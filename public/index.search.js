var relearn_search_index = [
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping",
    "content": "Reading Content Links Types of Relationships Creating a Many-to-One Relationship Creating a One-to-Many Relationship Creating a One-to-One Relationship Creating a Many-to-Many Relationship ",
    "description": "Reading Content Links Types of Relationships Creating a Many-to-One Relationship Creating a One-to-Many Relationship Creating a One-to-One Relationship Creating a Many-to-Many Relationship ",
    "tags": [],
    "title": "Reading",
    "uri": "/orm-relationships/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "Just as data in different database tables can have relationships to each other, so can classes and objects. In fact, relationships between objects will translate into relationships between rows in a database when using ORM.\nThis chapter introduces the tools needed to create meaningful relationships using ORM. Before considering how to do this with Spring Boot, however, let’s consider the different types of relationships at a conceptual level.\nFor the examples below, we use four classes:\nEvent - A class representing a coding event. EventCategory - A class representing categories of coding events. EventDetails - A class that encapsulates details about a single event, such as description, contact email, location, and so on. Tag - A piece of metadata labeling an event. You can think of these as topics that an event might include, such as Java, Spring, or JavaScript. An event can cover multiple topics, so it can have multiple tags. The first two of these are familiar to you from our codingevents app. The EventDetails and Tag classes will be introduced later in this chapter.\nOne-to-One The simplest type of relationship is the one-to-one relationship. This occurs when each instance of type A may be related to only one instance of type B, and vice versa.\nNote In the following examples, arrows point in the direction of the relationship. If A points to B, then you can say that A knows about B.\nWhile relationships in SQL are bidirectional, relationships in programming languages are unidirectional. In other words, if A knows about B, then B doesn’t necessarily know about A.\nAn Event object should only have one collection of details, so it should only be related to one EventDetails object. Similarly, details about an event are specific to that event, so an EventDetails object should only be related to one Event object.\nExxample The following pairs of things generally have one-to-one relationships:\nPeople / driver’s licenses States / capital cities iPhones / serial numbers It is not required that each instance of type A be related to an instance of type B. For example, a person may not have a driver’s license.\nOne-to-Many and Many-to-One A one-to-many relationship occurs when each instance of type A may be related to more than one instance of type B, but each instance of B can only be related to a single instance of type A.\nIn this case, we say that A has a one-to-many relationship to B. A category can contain multiple items, therefore an EventCategory object may be related to multiple Event objects. But an event may only be in one category.\nExample The following pairs of things generally have one-to-many relationships:\nBirth dates / people States / U.S. Representatives Model numbers / iPhones When discussing the inverse relationship, we say that B has a many-to-one relationship to A.\nA many-to-one relationship operates in the opposite direction of a one-to-many relationship. The difference between the two is which side of the relationship knows about the objects on the other side. In Java terms, this will translate into a field on one class that references the other.\nExample Many-to-one relationships are simply the opposite direction of one-to-many. Therefore, each of the following pairs has a many-to-one relationship.\nPeople / birth dates U.S. Representatives / states iPhones / model numbers Many-to-Many Many-to-many relationships occur when each instance of type A can be related to multiple instances of type B, and vice versa.\nAn event can have multiple tags, and a tag may be associated with multiple events. Thus, we have a many-to-many relationship.\nExample The following pairs of things generally have many-to-many relationships:\nBooks / authors Recipes / ingredients Actors / movies Check Your Understanding Question Match the following pairs with the appropriate relationship type:\ncar / manufacturer car / title car / driver car / tire Question True/False: In order for two Java classes, A and B, to be mapped in a one-to-many relationship, class A must contain a field for instances of B and B must have a field for instances of A.\nTrue False ",
    "description": "Just as data in different database tables can have relationships to each other, so can classes and objects. In fact, relationships between objects will translate into relationships between rows in a database when using ORM.\nThis chapter introduces the tools needed to create meaningful relationships using ORM. Before considering how to do this with Spring Boot, however, let’s consider the different types of relationships at a conceptual level.\nFor the examples below, we use four classes:",
    "tags": [],
    "title": "Types of Relationships",
    "uri": "/orm-relationships/reading/types-of-relationships/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 11: Rules to the Exceptions \u003e Reading",
    "content": "To get started with exceptions, open up java-web-dev-projects/exceptions/chapter-example on your machine so you can code along. Inside the Temperature package, take a look at the Temperature class. We worked with this exact class when learning more about classes .\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class Temperature { private double fahrenheit; public double getFahrenheit() { return fahrenheit; } public void setFahrenheit(double aFahrenheit) { double absoluteZeroFahrenheit = -459.67; if (aFahrenheit \u003c absoluteZeroFahrenheit) { System.out.println(\"Value is below absolute zero\"); } fahrenheit = aFahrenheit; } } Instead of simply printing out a warning that the temperature is below absolute zero, let’s use exceptions to handle this case.\nBefore coding with exceptions, first think about what the exception needs to handle. In the case of our Temperature class, we need to throw an exception if the program attempts to set the value of fahrenheit to a temperature that is below absolute zero. The first question we need to ask about this exception is: when will it be thrown? Exceptions in Java can either be checked or unchecked depending on if the exception is a compile-time exception or a runtime exception. In the context of a larger program, setFahrenheit() is only called with a value that is given by a user. This means if we throw an exception when a value that is below absolute zero is passed to setFahrenheit(), it will be a runtime or unchecked exception.\nNow that we know we are going to use a runtime exception, we need to answer the question: under what conditions should the exception be thrown? In our case, that is when we attempt to set fahrenheit to a value that is below -459.67. Based on our knowledge of builtin Java exceptions, we know that there isn’t a builtin exception that works for this, so now we need to build a custom exception.\nTurn your attention to the TemperatureException class. Here is where we need to start coding. First, all custom exceptions must inherit from the Exception class.\n3 4 5 public class TemperatureException extends Exception { // Write code here! } With the relationship between the two classes set up, we now need to add a constructor. In this case, that is all we need to add. We do not want to call the Exception class directly, so we will use TemperatureException to access its properties. The constructor will only have to deal with a message parameter.\n4 5 6 public TemperatureException(String message){ super(message); } We now have a custom exception ready for use! Back in the Temperature class, we need to use this exception to prevent the temperature from being set to a value that is below absolute zero. You may be tempted to just throw the exception if the value is below absolute zero, like so:\n15 16 17 if (aFahrenheit \u003c absoluteZeroFahrenheit) { throw new TemperatureException(\"That temperature is too low!\"); } However, if you do this, you will get an error in IntelliJ. You get this error because, in Java, we must handle every exception that is thrown. We need to encase our exception in a try/catch block. We want to try to throw the exception and if we catch the error, we want to print the stack trace.\n15 16 17 18 19 20 21 if (aFahrenheit \u003c absoluteZeroFahrenheit) { try { throw new TemperatureException(\"That temperature is too low!\"); } catch (TemperatureException e) { e.printStackTrace(); } } Now run the program and try to enter a value below absolute zero!\nCheck Your Work Check out the end-of-walkthrough branch on Github to make sure your code is correct.",
    "description": "To get started with exceptions, open up java-web-dev-projects/exceptions/chapter-example on your machine so you can code along. Inside the Temperature package, take a look at the Temperature class. We worked with this exact class when learning more about classes .\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class Temperature { private double fahrenheit; public double getFahrenheit() { return fahrenheit; } public void setFahrenheit(double aFahrenheit) { double absoluteZeroFahrenheit = -459.",
    "tags": [],
    "title": "Check the Temperature with Exceptions",
    "uri": "/exceptions/reading/temperature-walkthrough/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 11: Rules to the Exceptions",
    "content": " Check the Temperature with Exceptions ",
    "description": " Check the Temperature with Exceptions ",
    "tags": [],
    "title": "Reading",
    "uri": "/exceptions/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation",
    "content": "Reading Content Links Server-Side Validation Validation Annotations Validating Models in a Controller Thymeleaf Form Tools ",
    "description": "Reading Content Links Server-Side Validation Validation Annotations Validating Models in a Controller Thymeleaf Form Tools ",
    "tags": [],
    "title": "Reading",
    "uri": "/spring-model-validation/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation \u003e Reading",
    "content": "Web applications work under the client-server model. We have been focusing on the server portion, using Spring Boot and Java to create server-side application code. A critical component of any well-made web application is validation, which is the process of checking that data conforms to certain criteria. Validation ensures that the application only stores meaningful data.\nExample Consider a user registration form on a web site. Effective validation rules might require that:\nThe username is between 3 and 12 characters long, and The password is at least 6 characters long. Web applications should validate all data submitted by users. This ensures that data remains well-structured and unexpected errors don’t occur. Validation that occurs in the browser—using JavaScript or HTML attributes—is client-side validation. Validation that occurs on the web server is server-side validation.\nEven if client-side validation is done, it is still critical to validate data on the server. This is because client-side validation can often be bypassed by a savvy user. For example, such a user might modify HTML using a browser’s developer tools, or disable JavaScript.\nServer-side validation involves both the model and controller. The model is responsible for defining validation rules, while the controller is responsible for checking validation rules when data is submitted to the server.\nCheck Your Understanding Question The best practice for validating data in a web app is to:\nUse client-side validation Use server-side validation Use both client-side and server-side validation Don’t validate incoming data ",
    "description": "Web applications work under the client-server model. We have been focusing on the server portion, using Spring Boot and Java to create server-side application code. A critical component of any well-made web application is validation, which is the process of checking that data conforms to certain criteria. Validation ensures that the application only stores meaningful data.\nExample Consider a user registration form on a web site. Effective validation rules might require that:",
    "tags": [],
    "title": "Server-Side Validation",
    "uri": "/spring-model-validation/reading/server-side-validation/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 12: Tools in Intellij \u003e Reading",
    "content": "By now you have created at least two Spring projects using Gradle. If you recall, Spring is the framework that will enable us to create an MVC application. When we created each project, we selected “Gradle Project”, but what is Gradle?\nGradle is an automated build tool that handles tasks like:\nManaging dependencies Testing protocols Packaging the executable program for deployment. So far we have included Gradle in our Spring Boot projects.\nNote You can also import Gradle using the terminal. Instruction on that is beyond the scope of this class. Here is documentation on this process if you are curious.\nHow Gradle Works A Gradle build represents one or more projects. Projects are craeted from a series of tasks. Gradle manages tasks based on their function in the build. Some tasks run tests, some compile, etc. Gradle organizes these tasks in the build.gradle file.\nbuild.gradle The build.gradle file is the project build script. Gradle will refer to this file as it runs through the task list to build the application. You can code tasks into this file or you can import tasks into this file.\nIf we are using external tasks, we use methods to group tasks by functionality in this file. Tasks call the methods to execute a task or series of tasks to build the project. You are also allowed code directly in the build file, but this is more common if you are creating a Gradle project from scratch.\nNote Spring Boot populated this file as it initialized your hello-spring build.\nOpen your build.gradle file and look at each section.\ntasks and plugins As stated earlier, Gradle builds a project by running tasks. These tasks are kept in a task method that calls them when needed. The task method is where you create tasks.\nNote hello-spring has a task method that runs a test.\nOften you will import tasks from an external resource as plugins. Plugins contain any necessary tasks and scripts to extend a project’s capabilities. Plugins often need dependencies and external repositories.\nNote Your Spring Boot framework projects contain plugins.\ndependencies dependencies are external code libraries used by tasks to build your project. Gradle often groups related dependencies together in configurations. In the dependencies method, the configuration name proceeds the dependency information.\nNote Your hello-spring project has three dependencies. Note that each dependency has its own configuration name, such as implementation or developmentOnly.\nconfigurations Some projects contain a stand-alone configurations method. This method bundles dependencies together based on their role in the build. Dependency configurations can extend from one another, reducing redundancies within your code.\nNote In the hello-spring project, the build.gradle file contains a configurations method.\nThe hello-spring project does not.\nrepositories Where do we get the source code if dependencies are external libraries? It comes from an external repository site, such as Maven Central. Maven Central is a repository website that contains files for dependencies. This is not the only external repository. Other repositories work the same as Maven Central. In the build.gradle file we link up with Maven Central by using the repositories method.\nNote You will see repositories in your Spring Boot projects.\nTroubleshooting Tips My dependencies won’t build We are using IntelliJ as our IDE to build our Gradle projects for this class. IntelliJ’s built-in IntelliSense should prompt you to refresh your build.gradle whenever you change a file. You should see a small icon appear in the top right corner of the build.gradle file. If you click on the icon, it will refresh your build. If you update build.gradle and the icon does not appear, you can manually refresh the build. Mac Users try Up + Command + I and Windows/Linux Users try Control + Shift + O.\nFor more on Gradle and IntelliJ, visit this website .\nI’ve refreshed, but my dependencies still won’t build Read IntelliJ’s documentation on Maven.Importing .\nCheck Your Understanding Question From where do dependencies access their source code?\nAn external repository such as Maven Central Internal code within a Class you created ",
    "description": "By now you have created at least two Spring projects using Gradle. If you recall, Spring is the framework that will enable us to create an MVC application. When we created each project, we selected “Gradle Project”, but what is Gradle?\nGradle is an automated build tool that handles tasks like:\nManaging dependencies Testing protocols Packaging the executable program for deployment. So far we have included Gradle in our Spring Boot projects.",
    "tags": [],
    "title": "Gradle",
    "uri": "/tools-in-intellij/reading/gradle/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 12: Tools in Intellij",
    "content": " Gradle Debugging in IntelliJ ",
    "description": " Gradle Debugging in IntelliJ ",
    "tags": [],
    "title": "Reading",
    "uri": "/tools-in-intellij/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 9: Spring Into MVC \u003e Reading",
    "content": "So far, we have been designing our applications by diagramming classes, drawing connections, and abstracting via interfaces. This practice benefits us because we can start seeing issues before we start coding. Many software developers start their applications with this process. Before we start diagramming our Cat class and our HouseCat class, we decide on the template for our design that we want to use. These design templates that are abstract solutions to common software architecture problems are called design patterns. Design patterns provide a set of conventions that we follow to build an application.\nModel-View-Controller (MVC) is a design pattern where the programming logic behind the application is broken down into 3 components: models, views, and controllers. A model handles the data and business logic of the application. A view handles the user interface elements. A controller passes information from the models to the views. Controllers are the traffic cops of the application, capable of passing data back and forth to the browser in MVC web applications. This process will be covered in depth later on in this chapter.\nBecause MVC breaks down all of the programming logic of an application into three digestible components, we can use this particular design pattern to make extensible applications. We also use MVC because it separates the components of the programs that the user interacts with from the underlying business logic.\nSpring Spring is a Java framework with multiple different modules and extensions. For this class, we will be using Spring Boot, an extension of Spring MVC (a module of Spring) to build Java based web applications with the MVC design pattern. Spring Boot gives us easier configuration options than Spring MVC and is a framework that helps us write applications with the idea of convention over configuration. With Spring Boot’s default settings and locations, we won’t have to configure all of the paths and settings for our applications. We can also write and run apps quickly because of the embedded application server, Tomcat.\nHow we Teach Spring The following section is the first of many videos we will be using to demonstrate coding a Spring Boot application. The video below introduces the role of controllers. In subsequent videos, we ask you to code along for maximum absorption of the topics introduced. A summary of the content introduced will follow each video.\nIntro to Spring - Video ",
    "description": "So far, we have been designing our applications by diagramming classes, drawing connections, and abstracting via interfaces. This practice benefits us because we can start seeing issues before we start coding. Many software developers start their applications with this process. Before we start diagramming our Cat class and our HouseCat class, we decide on the template for our design that we want to use. These design templates that are abstract solutions to common software architecture problems are called design patterns.",
    "tags": [],
    "title": "Design Patterns, MVC, and Spring, Oh My!",
    "uri": "/spring-intro/reading/mvc/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 6: Unit Testing",
    "content": " Testing in Java JUnit ",
    "description": " Testing in Java JUnit ",
    "tags": [],
    "title": "Reading",
    "uri": "/unit-testing/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 6: Unit Testing \u003e Reading",
    "content": "You already recognize the importance of testing your code. Automated testing in Java, like any language, ensures that your code works as expected, every time it runs. Tests also function as documentation, giving an observer instructions on how to properly execute your classes and methods.\nThis course covers unit testing in Java with a test runner called JUnit. Unit testing breaks down the codebase into its smallest building blocks, which are individual statements and methods.\nTip If you’re not yet familiar with the benefits of automated testing, you can familiarize yourself here .\nWhy We Test Refactoring Because they work on the most basic functionality of your code, unit tests safeguard against bugs introduced in refactoring. Refactoring refers to the process of rewriting code without adding new features.\nImagine this common workflow:\nYou practice TDD, writing your tests to stipulate your class’s code.\nYou write your code to pass your tests.\nLater, a stakeholder in your project’s use requests that you refactor your code using different syntax.\nThe features will be the same, but the implementation changes. Unit tests help in this scenario in that changes to implementation should not require changes to outcome. Thus, if your tests continue to pass after the refactor, you can move on, knowing you have not inadvertently introduced a bug. When you write tests once, they provide a code lifetime’s worth of benefits.\nDocumentation Unit tests are the most enlightened form of documentation. Again, because they address the most fundamental tasks of your classes, unit tests serve as live-code use-cases. You may also have an external documentation directory with examples of how to run your project, or perhaps you have been writing comments within your code to best communicate with your teammates about your changes. Both of these are great choices and should be done when possible. However, they also require more forethought to maintain. Each time you update your code, you might not remember to update the documentation and comments. With unit testing, however, you have a more obvious reminder that a change has been made if a test fails.\nTesting Best Practices Below are some best practices to keep in mind when writing unit tests, in any language.\nThe AAAs\nThe AAAs of unit testing refers to the pattern to follow when writing your unit tests.\nArrange the variables your test requires Act on the methods your test requires Assert the anticipated comparison of the expected and actual values Deterministic\nEvery, single, solitary time a test is run, it should produce the same outcome. A test that passes only most of the time is a worthless test.\nRelevant\nTests, as they are written, should be grouped by related class and function.\nMeaningful\nThere is no need to test trivial code. For example, unless they contain additional functionality, there is no need to write tests for getters and setters. Your IntelliJ IDE offers code completion for these anyway.\nCheck Your Understanding Question True or False: Comments are the best tool to make your code readable.\nQuestion Unit tests are a form of:\nManual testing Automated testing Integration testing Documentation testing ",
    "description": "You already recognize the importance of testing your code. Automated testing in Java, like any language, ensures that your code works as expected, every time it runs. Tests also function as documentation, giving an observer instructions on how to properly execute your classes and methods.\nThis course covers unit testing in Java with a test runner called JUnit. Unit testing breaks down the codebase into its smallest building blocks, which are individual statements and methods.",
    "tags": [],
    "title": "Testing in Java",
    "uri": "/unit-testing/reading/testing-in-java/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections \u003e Reading",
    "content": "Control flow statements in Java — conditionals and loops — are very straightforward.\nOperators Before we review the syntax for conditionals, let’s go over the comparison and logical operators that we need to use in control flow statements.\nComparison Operators Operator Description == Checks if two items are equal != Checks if two items are not equal \u003c Checks if item on left is lesser than item on right \u003c= Checks if item on left is lesser than or equal to item on right \u003e Checks if item on left is greater than item on right \u003e= Checks if item on left is greater than or equal to item on right Logical Operators Operator Description \u0026\u0026 Combines two expressions with AND, returns true if both statements are true || Combines two expressions with OR, returns true if at least one of the statements is true ! Reverses the evaluation of the operand, returns false if the result is true if Statements Let’s consider an if statement with no else clause.\nIn Java this pattern is simply written as:\n1 2 3 4 5 if (condition) { statement1 statement2 ... } You can see that in Java the curly braces define a block. Parentheses around the condition are required.\nif else Adding an else clause, we have:\n1 2 3 4 5 6 7 8 9 if (condition) { statement1 statement2 ... } else { statement1 statement2 ... } else if An else if construction in Java:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import java.util.Scanner; public class ElseIf { public static void main(String args[]) { Scanner in = new Scanner(System.in); System.out.println(\"Enter a grade: \"); int grade = in.nextInt(); if (grade \u003c 60) { System.out.println('F'); } else if (grade \u003c 70) { System.out.println('D'); } else if (grade \u003c 80) { System.out.println('C'); } else if (grade \u003c 90) { System.out.println('B'); } else { System.out.println('A'); } } } switch Statements Java also supports a switch statement that acts something like an else if statement under certain conditions, called cases. The switch statement is not used very often, and we generally recommend you avoid using it. It is not as powerful as the else if model because the switch variable can only be compared for equality with a very small class of types.\nHere is a quick example of a switch statement:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import java.util.Scanner; public class DayPrinter { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.println(\"Enter an integer: \"); int dayNum = in.nextInt(); String day; switch (dayNum) { case 0: day = \"Sunday\"; break; case 1: day = \"Monday\"; break; case 2: day = \"Tuesday\"; break; case 3: day = \"Wednesday\"; break; case 4: day = \"Thursday\"; break; case 5: day = \"Friday\"; break; case 6: day = \"Saturday\"; break; default: // in this example, this block runs if none of the above blocks match day = \"Int does not correspond to a day of the week\"; } System.out.println(day); } } In the example above, here’s the output if a user enters the number 4.\nEnter an integer: 4 Thursday And the output if that user enters 10? Below:\nEnter an integer: 10 Int does not correspond to a day of the week Here’s how the above example looks using the else if construction:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import java.util.Scanner; public class DayPrinter { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.println(\"Enter an integer: \"); int dayNum = in.nextInt(); String day; if (dayNum == 0) { day = \"Sunday\"; } else if (dayNum == 1){ day = \"Monday\"; } else if (dayNum == 2){ day = \"Tuesday\"; } else if (dayNum == 3){ day = \"Wednesday\"; } else if (dayNum == 4){ day = \"Thursday\"; } else if (dayNum == 5){ day = \"Friday\"; } else if (dayNum == 6){ day = \"Saturday\"; } else { day = \"Int does not correspond to a day of the week\"; } System.out.println(day); } } Fallthrough Additionally, if break statements are omitted from the individual cases on accident, a behavior known as fallthrough is carried out. Fallthrough can be quite unintuitive, and is only desirable in very specific circumstances. We will discuss break statements in more detail in the upcoming loop section. For now, just know that when used in a switch block, they terminate the switch statement they are in, so the flow of control in your program moves to the next statement after the switch block.\nHere’s a quick example of how fallthrough works:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.util.Scanner; public class DayPrinter { public static void main(String[] args) { System.out.println(\"Enter an integer: \"); Scanner in = new Scanner(System.in); int dayNum = in.nextInt(); String day; switch (dayNum) { case 0: day = \"Sunday\"; case 1: day = \"Monday\"; case 2: day = \"Tuesday\"; case 3: day = \"Wednesday\"; case 4: day = \"Thursday\"; case 5: day = \"Friday\"; case 6: day = \"Saturday\"; default: // in this example, this block runs even if one of the above blocks match day = \"Int does not correspond to a day of the week\"; } System.out.println(day); } } This time, without the break statements in each case, if the user enters 4, they will see the default output:\nEnter an integer: 4 Int does not correspond to a day of the week This is because after the switch statement matches the case for 4 and assigns the value Thursday to the variable day, it proceeds to execute every statement in every case that follows, all the way through the default case. So the String that ends up being printed will reflect the last executed statement in the switch block.\nAlong similar lines, consider this variation on the code block above:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.util.Scanner; public class DayPrinter { public static void main(String[] args) { System.out.println(\"Enter an integer: \"); Scanner in = new Scanner(System.in); int dayNum = in.nextInt(); String day; switch (dayNum) { case 0: day = \"Sunday\"; case 1: day = \"Monday\"; case 2: day = \"Tuesday\"; case 3: day = \"Wednesday\"; case 4: day = \"Thursday\"; case 5: day = \"Friday\"; case 6: day = \"Saturday\"; break; default: day = \"Int does not correspond to a day of the week\"; } System.out.println(day); } } Here, we have a break statement in case 6 after day = \"Saturday\";. If the user enters 4, the execution will fallthrough until it reaches that break statement and Saturday is printed instead of Thursday. The output:\nEnter an integer: 4 Saturday Check Your Understanding Question When does fallthrough occur in Java?\nOmitting an else clause from a conditional. Omitting an else clause from switch statement. Omitting a default case from a switch statement. Omitting a break line from a switch statement. Question 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import java.util.Scanner; public class QuizQuestion { public static void main(String[] args) { System.out.println(\"Are you a space cadet? yes or no\"); Scanner in = new Scanner(System.in); String response = in.next(); switch (response) { case \"yes\": System.out.println(\"Greetings cadet.\"); case \"no\": System.out.println(\"Greetings normie.\"); default: System.out.println(\"Are you an alien?\"); } } } Given the code above, what prints if the user enters no after the prompt?\nGreetings cadet. Greetings normie. Greetings normie. Are you an alien? Greetings cadet. Greetings normie. ",
    "description": "Control flow statements in Java — conditionals and loops — are very straightforward.\nOperators Before we review the syntax for conditionals, let’s go over the comparison and logical operators that we need to use in control flow statements.\nComparison Operators Operator Description == Checks if two items are equal != Checks if two items are not equal \u003c Checks if item on left is lesser than item on right \u003c= Checks if item on left is lesser than or equal to item on right \u003e Checks if item on left is greater than item on right \u003e= Checks if item on left is greater than or equal to item on right Logical Operators Operator Description \u0026\u0026 Combines two expressions with AND, returns true if both statements are true || Combines two expressions with OR, returns true if at least one of the statements is true !",
    "tags": [],
    "title": "Conditionals",
    "uri": "/control-flow-and-collections/reading/conditionals/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections",
    "content": " Conditionals Loops Collections ArrayList Array HashMap ",
    "description": " Conditionals Loops Collections ArrayList Array HashMap ",
    "tags": [],
    "title": "Reading",
    "uri": "/control-flow-and-collections/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "The third pillar of Object-Oriented Programming that we’ll explore is polymorphism.\nPolymorphism Polymorphism is an object-oriented mechanism that allows for objects of different types to be used in the same way.\nWe’ve already encountered polymorphism made possible by inheritance when talking about casting with our Cat and HouseCat classes. In that case, we stored an object of type HouseCat in its compatible type, Cat.\nLet’s take a closer look at how polymorphism might work in our cat-centric application.\nExample Suppose we had a CatOwner class like the one below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class CatOwner { private Cat pet; public CatOwner(Cat pet) { this.pet = pet; } public void feedTheCat() { // ...code to prepare the cat's meal... pet.eat(); } } The method feedTheCat uses the field pet, which is of type Cat. Since a HouseCat is a Cat via inheritance, it is perfectly acceptable to use an instance of HouseCat to fill the pet field.\n1 2 3 4 HouseCat suki = new HouseCat(\"Suki\", 12); CatOwner Annie = new CatOwner (suki); Annie.feedTheCat(); Similarly, feedTheCat can accept Tiger instances as well. This is because the only thing that the method requires is that the input parameter has the methods defined within Cat, and via inheritance, both of the subclasses satisfy this requirement.\nIn addition to using classes to code in a polymorphic way, we can use interfaces.",
    "description": "The third pillar of Object-Oriented Programming that we’ll explore is polymorphism.\nPolymorphism Polymorphism is an object-oriented mechanism that allows for objects of different types to be used in the same way.\nWe’ve already encountered polymorphism made possible by inheritance when talking about casting with our Cat and HouseCat classes. In that case, we stored an object of type HouseCat in its compatible type, Cat.\nLet’s take a closer look at how polymorphism might work in our cat-centric application.",
    "tags": [],
    "title": "Introduction",
    "uri": "/interfaces/reading/intro/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": " Introduction Interfaces Interfaces and Abstract Classes Interfaces in the Wild Unit Testing and Interfaces ",
    "description": " Introduction Interfaces Interfaces and Abstract Classes Interfaces in the Wild Unit Testing and Interfaces ",
    "tags": [],
    "title": "Reading",
    "uri": "/interfaces/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading",
    "content": "Customizing Fields A final field is one that cannot be changed once it is initialized. This means slightly different things for primitive and class types. We create final fields by declaring them with the final keyword.\nWe cannot change the value of a final primitive field (final int, final double, etc.) after it is initialized.\nSimilarly, we cannot assign a new object to a final object field (final String, final Double, final ClassName, etc.) after initialization. However, we can change the values within the object itself.\nHere are some examples to illustrate. Each class would normally be in its own file, but we present them side-by-side for convenience. Additionally, we declare each field public to minimize the example code and more clearly demonstrate where compiler errors would occur.\nExample public class FortyTwo { public int intValue = 42; } public class FinalFields { public final int intValue = 42; public final double doubleValue; public final FortyTwo objectValue = new FortyTwo(); public static void main(String[] args) { FinalFields demo = new FinalFields(); // This would result in a compiler error demo.intValue = 6; // This is allowed since we haven't initialized doubleValue yet demo.doubleValue = 42.0; // However, this would result in a compiler error demo.doubleValue = 6.0; // This would result in a compiler error, since we're trying to // give objectValue a different object value demo.objectValue = new FortyTwo(); // However, this is allowed since we're changing a field // inside the final object, and not changing which object // objectValue refers to demo.objectValue.intValue = 6; } } Final fields help to prevent accidentally (or intentionally) changing the value of a field after it is initialized. As such, final fields may NOT have setters.\nStatic Fields A static field is one that is shared by all instances of the class, and it is declared with the static keyword.\nFor example, in our Temperature class there is no reason for each Temperature object to hold its own copy of the double absoluteZeroFahrenheit. That value remains constant from class to class and object to object. Because of this, we make it a static field.\nPrevious examples used the static keyword with both fields and methods, but since this discussion is focused on data, let’s focus on static fields for now.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Temperature { private double fahrenheit; private static double absoluteZeroFahrenheit = -459.67; public double getFahrenheit() { return fahrenheit; } public void setFahrenheit(double aFahrenheit) { if (aFahrenheit \u003c absoluteZeroFahrenheit) { throw new IllegalArgumentException(\"Value is below absolute zero\"); } fahrenheit = aFahrenheit; } /* rest of the class... */ } There are multiple ways to refer to a static field.\nExample Within a class:\n1 2 3 4 5 // Use a static field the same way as a normal, non-static field System.out.println(\"Absolute zero in F is: \" + absoluteZeroFahrenheit); // We can also be more explicit System.out.println(\"Absolute zero in F is: \" + this.absoluteZeroFahrenheit); Outside of a class:\n6 7 8 9 10 // If the static field is public, we can do this System.out.println(\"Absolute zero in F is: \" + Temperature.absoluteZeroFahrenheit); // Or if we have an object named \"temp\" of type Temperature System.out.println(\"Absolute zero in F is: \" + temp.absoluteZeroFahrenheit); When accessing a field from outside of its class, line 7 shows the preferred technique. The syntax makes it explicit that the field is static. Line 10 does not make this point clear.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Student { private static int nextStudentId = 1; private String name; private final int studentId; private int numberOfCredits; private double gpa; public Student(String name, int studentId, int numberOfCredits, double gpa) { this.name = name; this.studentId = studentId; this.numberOfCredits = numberOfCredits; this.gpa = gpa; } public Student(String name, int studentId) { this(name, studentId, 0, 0); } public Student(String name) { this(name, nextStudentId); nextStudentId++; } /* getters and setters omitted */ } In line 3, we add a static integer field that will keep track of the next student ID to be assigned to a student. Then, our new constructor (line 21) takes only a name as a parameter and assigns the student the next available ID. This works because static fields are shared across all objects created from the Student class, so it functions as a counter of sorts for the number of Student objects created.\nConstants Unlike some other languages, Java doesn’t have a special keyword to declare a constant, or unchanging, variable. However, we can achieve the same result using a combination of static and final.\n1 2 3 4 public class Constants { public static final double PI = 3.14159; public static final String FIRST_PRESIDENT = \"George Washington\"; } Throughout the rest of this course, when we say constant we will mean a static final variable.\nThree things to note from this example:\nWe use a different naming convention for constants than for other variables. Constants should be in ALL CAPS, with an underscore to separate words.\nThere is no strong reason to make constants private, since restricting access would force us to re-declare the same values in different classes. We’ll generally make our constants public.\nWe must declare and initialize a constant at the same time. If we do not declare and initialize the constant in the same statement, we cannot assign it a value later. The constant’s value remains empty.\nA good use of a constant can be seen in our Temperature class. Since absolute zero will never change, we can ensure that nobody ever alters it (intentionally or by mistake) by adding final to make it a constant.\n1 2 3 4 5 6 7 8 9 public class Temperature { private double fahrenheit; public static final double ABSOLUTE_ZERO_FAHRENHEIT = -459.67; /* rest of the class... */ } Check Your Understanding Question Assume that we define a Pet class that uses the fields name, age, mass, and species.\nAssuming you do not give your pet away, which of these fields should be declared final? (There may be more than one).\nname age mass species Should any of the fields be declared static?\nYes No Question Assume we define several fields in a Circle class. Which of the following is the BEST choice to be declared static?\nradius area pi circumference Question Which of the following is the BEST syntax for defining a variable to hold the (constant) speed of light in a vacuum?\npublic static final int SPEED_OF_LIGHT = 299792458; private static final int SPEED_OF_LIGHT = 299792458; public static final int SPEED_OF_LIGHT; private static final int SPEED_OF_LIGHT; ",
    "description": "Customizing Fields A final field is one that cannot be changed once it is initialized. This means slightly different things for primitive and class types. We create final fields by declaring them with the final keyword.\nWe cannot change the value of a final primitive field (final int, final double, etc.) after it is initialized.\nSimilarly, we cannot assign a new object to a final object field (final String, final Double, final ClassName, etc.",
    "tags": [],
    "title": "Customizing Fields",
    "uri": "/classes-part-2/reading/custom-fields/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2",
    "content": " Customizing Fields Instance and Static Methods Special Methods IntelliJ Generator Shortcut ",
    "description": " Customizing Fields Instance and Static Methods Special Methods IntelliJ Generator Shortcut ",
    "tags": [],
    "title": "Reading",
    "uri": "/classes-part-2/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 2: Data Types \u003e Reading",
    "content": "Static vs. Dynamic Typing In a dynamically typed programming language (like JavaScript or Python), a variable or parameter can refer to a value of any data type (string, number, object, etc.) at any time. When the variable is used, the interpreter figures out what type it is and behaves accordingly.\nJava is a statically typed language. When a variable or parameter is declared in a statically typed language, the data type for the value must be specified. Once the declaration is made, the variable or parameter cannot refer to a value of any other type.\nFor example, this is legal in JavaScript, a dynamically typed language:\nExample 1 2 3 4 let dynamicVariable = \"dog\"; console.log(typeof(dynamicVariable)); dynamicVariable = 42; console.log(typeof(dynamicVariable)); Output\nstring number After line 1 executes, dynamicVariable holds a string data type. After line 3 runs, dynamicVariable becomes a number type. dynamicVariable is allowed to hold values of different types, which can be reassigned as needed when the program runs.\nHowever, the corresponding code in Java will result in a compiler error:\nExample 1 2 String staticVariable = \"dog\"; staticVariable = 42; Output\nerror: incompatible types: int cannot be converted to String The compiler error occurs when we try to assign 42 to a variable of type String.\nTake-home lesson: We must declare the type of every variable and parameter in a statically typed language. This is done by declaring the data type for the variable or parameter BEFORE its name, as we did in the example above: String staticVariable = \"dog\".\nNote We only need to specify the type of a variable or parameter when declaring it. Further use of the variable or parameter does not require us to identify its type. Doing so will result in an error.\nDynamic and static typing are examples of different type systems . The type system of a programming language is one of the most important high-level characteristics that programmers use when discussing the differences between languages. Here are a few examples of popular languages falling into these two categories:\nDynamic: Python, Ruby, Javascript, PHP Static: Java, C, C++, C#, TypeScript Because we need to give plenty of attention to types when writing Java code, let’s begin by exploring the most common data types in this language.\nStrings and Single Characters Immutability Strings in Java are immutable, which means that the characters within a string cannot be changed.\nSingle vs Double Quotation Marks Java syntax requires double quotation marks when declaring strings.\nJava has another variable type, char, which is used for a single character. char uses single quotation marks. The single character can be a letter, digit, punctuation, or whitespace like tab ('\\t').\nExample 1 2 String staticVariable = \"dog\"; char charVariable = 'd'; Manipulation The table below summarizes some of the most common string methods available in Java. For these examples, we use the string variable String str = \"Rutabaga\".\nString Methods in Java Java Syntax Description str.charAt(3) Returns the character at index 3, ('a'). str.substring(2,4) Returns the characters from indexes 2 - 4, (\"tab\"). str.length() Returns the length of the string. str.indexOf('a') Returns the index for the first occurrence of ‘a’, (3). str.split(\"delimiter\") Splits the string into sections at each delimiter and stores the sections as elements in an array. str.concat(string2).concat(string3) In Java, concat concatenates only two strings. To join multiple strings, method chaining is required.` str.trim() Removes any whitespace at the beginning or end of the string. str.toUpperCase(), str.toLowerCase() Changes all alphabetic characters in the string to UPPERCASE or lowercase, respectively. str.contains(\"text\") Searches for the specified text within a string and returns true or false. str.equals(otherString) Compares strings for equality and returns a boolean. Note We will explore the differences between using == and .equals() when we discuss Java operators. For now, use .equals() if you need to compare two strings.\nPrimitive Types A primitive data type is a basic building block. Using primitive data types, we can build more complex data structures called object data types.\nJava uses its own set of primitive data types. The table below shows the most common types that beginners are likely to encounter. A more complete list can be found on the Oracle website .\nJava Primitive Data Types Java Syntax Examples Notes int 42 Represents positive and negative whole numbers float 3.141593 and 1234.567 and 2.0 Represents positive and negative decimal numbers with up to 7 digits double 3.14159265358979 and 10000.12345678912 Represents positive and negative decimal numbers with 15-16 digits char ‘a’ and ‘9’ and ‘n’ A single unicode character enclosed in single quotes '' boolean true and false Booleans in Java are NOT capitalized Warning As we will see in a later section, the float data type sacrifices some accuracy for speed of calculation. Thus, evaluating 1.11111 + 3 results in an answer of 4.1111097 instead of 4.11111.\nAnytime you need to perform calculations with decimal values, consider using the double type instead of float.\nNon-Primitive Types Primitive data types are immutable and can be combined to build larger data structures. One example is forming the String “LaunchCode” from multiple char characters (‘L’, ‘a’, ‘u’, etc.).\nString is a non-primitive data type, also called an object type. As we saw in the String table above, object types have methods which we can call using dot notation. Primitive data types do not have methods.\nNote Primitive data types in Java begin with a lowercase letter, while object data types in Java begin with a capital letter.\nLater in this chapter, we will explore the Array and Class object types.\nAutoboxing There may be situations when we call a method that expects an object as an argument, but we pass it a primitive type instead (or vice versa). In these cases, we need to convert the primitive type to an object, or convert an object type into a primitive.\nIn older versions of Java, it was the programmer’s responsibility to convert back and forth between primitive types and object types whenever necessary. Converting from a primitive type to an object type was called boxing, and the reverse process (object to primitive) was called unboxing.\nExample Boxing:\n1 2 3 int someInteger = 5; Integer someIntegerObject = Integer.valueOf(someInteger); ClassName.methodName(someIntegerObject); Line 1 declares and initializes the variable someInteger. Line 2 converts the primitive int to the Integer object type. Line 3 calls methodName and passes someIntegerObject as the argument. If methodName expects an object type and we tried sending an int instead, we would generate an error message. Unboxing Let’s assume that a method returns a random number of Integer type, and we want to combine it with a value of int type.\n1 2 3 4 int ourNumber = 5; Integer randomNumber = ClassName.randomNumberGenerator(); int randomInt = (int) randomNumber; int sum = ourNumber + randomInt; Line 2 declares and initializes randomNumber as an Integer type. Line 3 converts randomNumber to an int and stores the value in the randomInt variable. Converting between data types in order to pass values between methods quickly became tedious and error prone. In the newer versions of Java, the compiler is smart enough to know when to convert back and forth, and this is called autoboxing.\nFor us, the consequence of autoboxing is that in many situations, we can use primitive and object types interchangeably when calling methods or returning data from those methods.\nTip It’s a best practice to use primitives whenever possible. The primary exception to this occurs when storing values in collections, which we’ll learn about in a future lesson.\nEach of the primitive data types has a corresponding object type:\nint —\u003e Integer float —\u003e Float double —\u003e Double char —\u003e Character boolean —\u003e Boolean References Primitive Data Types (docs.oracle.com) Autoboxing and Unboxing (docs.oracle.com) Variables (docs.oracle.com) Check Your Understanding Question Which of the following is NOT a number data type in Java:\nnumber int float double Question Name the Java method responsible for checking string equality:\n.isEqualTo() .sameAs() .equals() === ",
    "description": "Static vs. Dynamic Typing In a dynamically typed programming language (like JavaScript or Python), a variable or parameter can refer to a value of any data type (string, number, object, etc.) at any time. When the variable is used, the interpreter figures out what type it is and behaves accordingly.\nJava is a statically typed language. When a variable or parameter is declared in a statically typed language, the data type for the value must be specified.",
    "tags": [],
    "title": "Data Types",
    "uri": "/data-types/reading/data-types/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 2: Data Types",
    "content": " Data Types Some Java Practice More Data Types ",
    "description": " Data Types Some Java Practice More Data Types ",
    "tags": [],
    "title": "Reading",
    "uri": "/data-types/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 2: Data Types \u003e Reading",
    "content": "Let’s move beyond our “Hello, World” example and explore a simple temperature conversion program. We want our function to convert a Fahrenheit temperature to Celsius.\nTemperature Conversion Open the TempConverter file in the java-web-dev-projects/datatypes/datatypes-examples project in IntelliJ. Click through the folders until you find the TempConverter class.\nHere’s what the file should look like. We will analyze the different statements in a moment.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import java.util.Scanner; public class TempConverter { public static void main(String[] args) { double fahrenheit; double celsius; Scanner input; input = new Scanner(System.in); System.out.println(\"Enter the temperature in Fahrenheit: \"); fahrenheit = input.nextDouble(); input.close(); celsius = (fahrenheit - 32) * 5/9; System.out.println(\"The temperature in Celsius is: \" + celsius + \"°C\"); } } Build and run the program to verify that it works. Entering a Fahrenheit temperature of 212 yields the result, The temperature in Celsius is: 100.0°C.\nThere are several new concepts introduced in this example. We will look at them in the following order:\nJava package The import statement Declaring variables Collecting input with the Scanner class Java Packages Line 1 of the program above, package org.launchcode.java.demos.lsn1datatypes; declares the package in which the file resides. For this simple program, your code could run without this line. However, you want to get used to always declaring the package of your Java classes.\nPackages help to encapsulate your code. Encapsulation refers to the practice of shielding your code from outside influences. It’s an essential component of good object oriented programming, and package declaration in Java is just one application of this principle. Without declaring a package, a Java class exists within the default package. In larger applications, leaving all classes in the default package risks naming conflicts and bugs.\nimport The import statement in Java allows us to access the class, methods, and data stored in a different file. import tells the compiler that we are going to use a shortened version of the class name. In this example, we are going to use the class java.util.Scanner, but we can refer to it as just Scanner. We could use the java.util.Scanner class without any problem and without any import statement, provided that we always refer to it by its full name.\nThis idea bears repeating. In Java, you can use any available class WITHOUT having to import it, but you must use the full name of the class. “Available” classes include:\nAll the classes you define in the .java and .class files in your current working directory. All the classes that get shipped with the software. Try It In the sample code, remove the import statement in line 3, and change Scanner on lines 9 \u0026 11 to java.util.Scanner. The program should still compile and run.\nThe class naming system in Java is very hierarchical. The full name of the Scanner class is really java.util.Scanner. You can think of this name as having two parts:\njava.util is called the package, Scanner is the class name. We’ll talk more about the class naming system a bit later.\nDeclaring Variables In the example above, lines 7 - 9 contain variable declarations:\n7 8 9 double fahrenheit; double celsius; Scanner input; Since Java is a statically typed language, we must always declare the data type for any variable. Lines 7 \u0026 8 establish that fahrenheit and celsius will hold values of type double. In line 9, the variable input references a Scanner object.\nIf later in the code we try to initialize fahrenheit with a string:\nfahrenheit = \"xyz\"The compiler throws an error because fahrenheit is declared to be a double.\nThe following error is common for new Java programmers. Suppose we forget to include the declaration for celsius. What happens when we try to compile and run our program?\nTry It Edit your TempConverter class by removing line 8, which declares the variable celsius.\nClick any of the “Run” options in IntelliJ. Alternatively, use the terminal to navigate to the parent directory of your TempConverter.java class and run java TempConverter.java.\nYour terminal will return some errors that resemble these:\nError:(16, 9) java: cannot find symbol symbol: variable celsius location: class TempConverter Error:(17, 64) java: cannot find symbol symbol: variable celsius location: class TempConverterThese two compiler errors occur before the program runs. The values in the parentheses () give the line number and text column where the error was found. In the first description (line 16, column 9), the celsius variable before the = is flagged. When this type of error happens, it usually means that the variable was not declared before we tried to initialize it with a value.\nThe second error message (line 17, column 64) occurs because we use celsius before it has been assigned a value.\nNote When using an IDE such as IntelliJ, your work is typically checked by the IDEs built-in compiler as you write your code. Errors are often visually indicated by the IDE as you type. This avoids having to explicitly compile your code before finding errors. Nice, huh?\nThe general rule in Java is that you must decide on the data type for your variable first, and then declare that variable before you use it. There is much more to say about the static typing of Java, but for now this is enough.\nNote As in other languages, Java allows you to declare and initialize your variables in the same line:\ndouble celsius = (fahrenheit - 32) * 5/9; Add Comments to Your Code As programs get bigger and more complicated, they get more difficult to read. Good programmers try to make their code understandable to others, but it is still tricky to look at a large program and figure out what it is doing and why.\nAlso, there are times when programmers need to isolate or ignore certain portions of their code as they are testing it. In the “Try It” box above, you were instructed to remove a line of code in order to create compiler errors. However, programmers are usually reluctant to delete lines that they might need to bring back.\nBest practice encourages us to add comments to our programs. These are notes that clearly explain what the code is doing.\nA comment is text within a program intended only for a human reader—–it is completely ignored by the compiler or interpreter. In Java, the // token indicates the start of a comment, and the rest of the line gets ignored. For comments that stretch over multiple lines, the text falls between the symbols /* */.\nComments can also be used to temporarily skip a portion of the code when a program runs. Instead of removing double celsius; in TempConverter, we could comment out the line. This would create the same compiler errors we wanted to witness, but it would preserve the original code and allow us to easily reactivate it by removing the // token from the line.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import java.util.Scanner; // Here is an example of a comment. /* Here is how to have multi-line comments. */ /* Or like this. */ public class HelloWorld { public static void main(String[] args) { Scanner input; // Comments do not have to start at the beginning of a line. input = new Scanner(System.in); System.out.println(\"Please enter your first name: \"); String name = input.next(); //Declares the 'name' variable and initializes it with text from the command line. input.close(); System.out.println(\"Hello, \" + name + \"!\"); // System.out.println(\"This line will NOT print!\"); } } Collect Input with the Scanner Class In Java, Scanner objects make getting input from the user, a file, or even over the network relatively easy. For our temperature conversion program, we declared the variable input to be of type Scanner.\n9 Scanner input; We want our program to prompt the user to enter in a number in the command line. We accomplish this by creating a Scanner instance using the word new and then calling the constructor and passing it the System.in object:\n11 input = new Scanner(System.in); Notice that this Scanner object is assigned to the name input, which we declared to be a Scanner object earlier.\nAnd you know those System statements we’ve been using? Like System.in above here, and System.out.println() for print statements. Well, System itself is a java class. System.in is similar to System.out except, as the name implies, it is used for input.\nNote If you are wondering why we must create a Scanner object to read data from System.in when we can write data directly to System.out using println, you are not alone. We will talk about the reasons why this is so when we dive into Java streams.\nNext, line 12 asks the user to enter a number, and in line 13 we use input to read the value from the command line:\n12 13 System.out.println(\"Enter the temperature in Fahrenheit: \"); fahrenheit = input.nextDouble(); Here again we see the implications of Java being a strongly typed language. Notice that we must call the method nextDouble, because the variable fahrenheit was declared as a double.\nBecause Java is a statically typed language, we must call the appropriate method on the Scanner object to ensure the entered data is of the correct type. In this case, the compiler compares the types for fahrenheit and input.nextDouble() and throws an error if the two do not match.\nThe table below shows some commonly used methods of the Scanner class. There are many others supported by this class, and the Oracle website provides a complete listing of the Scanner methods.\nScanner methods Method Name Return Type Description hasNext() boolean Returns true if more data is present hasNextInt() boolean Returns true if the next item to read is an int data type hasNextFloat() boolean Returns true if the next item to read is a float data type hasNextDouble() boolean Returns true if the next item to read is a double data type nextInt() int Returns the next item to read as an int data type nextFloat() float Returns the next item to read as a float data type nextDouble() double Returns the next item to read as a double data type next() String Returns the next item to read as a String data type nextLine() String Returns the next line to read as a String data type Closing Scanner To collect data from the command line or other source, create a Scanner object. This opens up resources in your machine to manage the input, and these resources remain open even after the required data is loaded into your program.\nLeaving a Scanner open is like keeping a window open in your house 24/7. Anyone can climb into your home, and you lose $$$ by trying to heat and cool your space while it is open to the outside air. Similarly, an open Scanner can allow unintended access to your program, and it ties up resources that might be needed elsewhere.\nBest practice states that if you open a Scanner object, close it after it finishes its job. Line 14 does this in our TempConverter program:\n14 input.close(); The general syntax is scannerObjectName.close().\nMoving Beyond the Command Line The Scanner class serves as a kind of adapter that gathers primitive data types as input and converts them into object types (e.g. it converts an int into Integer). We will discuss the purpose of this later, but for now, know that this adaptation makes low-level data types easier to use.\nFor the temperature conversion program, we collected user input from the command line, but there are other options for collecting data for our programs. In future examples, we will create a Scanner object by passing a File object as a parameter instead of System.in.\nCheck Your Understanding Question True/False: An import statement is required to use a Java class defined in another package.\nQuestion Which of the following Scanner methods should you use to return an expected String input? Check ALL that apply.\n.hasNext() .nextLine() .next() .nextFloat() ",
    "description": "Let’s move beyond our “Hello, World” example and explore a simple temperature conversion program. We want our function to convert a Fahrenheit temperature to Celsius.\nTemperature Conversion Open the TempConverter file in the java-web-dev-projects/datatypes/datatypes-examples project in IntelliJ. Click through the folders until you find the TempConverter class.\nHere’s what the file should look like. We will analyze the different statements in a moment.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import java.",
    "tags": [],
    "title": "Some Java Practice",
    "uri": "/data-types/reading/some-java-practice/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #2: Tech Jobs OO",
    "content": "Open the Employer file in IntelliJ and examine the code. In addition to the two fields—id and value—the class includes the standard getters and setters as well as some custom methods like toString and equals.\nYou can refer to these examples as you fill in the missing pieces in the other classes, but for now let’s take a closer look at the constructors.\nAssign a Unique ID One neat trick we can use is to automatically assign each new object a unique ID number.\nExample Examine the two constructors in Employer.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Employer { private int id; private static int nextId = 1; private String value; public Employer() { id = nextId; nextId++; } public Employer(String aValue) { this(); this.value = aValue; } // Getters and setters omitted from this view. } Line 3 declares the variable nextId. Since it is static, its changing value is NOT stored within any Employer object.\nThe first constructor (lines 6 - 9) accepts no arguments and assigns the value of nextId to the id field. It then increments nextId. Thus, every new Employer object will get a different ID number.\nThe second constructor (lines 11 - 14) assigns aValue to the value field. However, it ALSO initializes id for the object by calling the first constructor with the this(); statement. Including this(); in any Employer constructor makes initializing id a default behavior.\nNext ",
    "description": "Open the Employer file in IntelliJ and examine the code. In addition to the two fields—id and value—the class includes the standard getters and setters as well as some custom methods like toString and equals.\nYou can refer to these examples as you fill in the missing pieces in the other classes, but for now let’s take a closer look at the constructors.\nAssign a Unique ID One neat trick we can use is to automatically assign each new object a unique ID number.",
    "tags": [],
    "title": "Task 1: Explore the Employer Class",
    "uri": "/assignments/techjobs-oo/task1/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments",
    "content": "The purpose of this initial assignment is to familiarize yourself with the process of running the autograding tests with Github Actions and submitting your work. Even if you are familiar with GitHub Actions, this assignment will contain several new items that are specific to working with Java assignments.\nGetting Started Let’s set up the assignment on our computer and learn about its basic structure.\nFirst, find Assignment #0 in Canvas and click on the starter code repo link. Fork the repository to your personal profile, copy the repo’s URL for cloning, and open up IntelliJ.\nMake sure IntelliJ is running and all project windows are closed. You should see IntelliJ’s Welcome pane. From here, select the Get from VCS option.\nPaste the repo URL in the URL field of the Get from Version Control pane that IntelliJ has opened. Make sure the Directory field is the location that you want your assignment to be saved within, then click the Clone button.\nWarning Where you save your project matters! IntelliJ will only save it to a folder that is currently empty.\nAfter IntelliJ clones your repository, it will ask you if you trust the contents in the repository. Select Trust Project.\nWhen the project opens initially, the Project pane at the left of the screen should be open and will show you the files within your project. If it is closed, click on the pane’s button at the top left to open it.\nNavigate though the directories down to the HelloWorld class. This will be in the src/main/java/org.launchcode directory. For all of the assignments we work on in this unit, our source code will live within this directory.\nNote that there are two green “play” buttons on the left of the source code. This indicates that IntelliJ recognizes this class as being runnable code. You can use either of these buttons to run the program. They function exactly the same. Clicking on one of them opens up a menu with a few options. Choose the first to run the program.\nWhen the program runs, IntelliJ will open a pane at the bottom of the window and display program output. Currently, the program has no output. You’ll fix that in a bit.\nRunning the Autograding Script Locally We encourage you to run the autograding tests yourself before you push your code. Github Actions may take a moment to run so running your tests locally will make it quicker and easier to know whether or not your code is correct. Let’s learn how to run the tests in IntelliJ.\nIn the Project pane, navigate to the test class, HelloWorldTest, in the directory src/test/java/org.launchcode. For each assignment, this directory will contain all of the autograding tests, and it may have more than one class.\nNotice the two slightly different “play” buttons at the left of the code. The topmost button is actually two green “play” arrows stacked on top of each other. It allows you to run all of the tests in a given file.\nThe lower button, next to the testSayHello() method, will run only that individual test. A test is a single method in a test file that has @Test just above it. A test file may have multiple tests.\nRun all of the tests (in this case, there is only one) by clicking on the topmost button.\nA menu opens, and selecting the first option runs the tests.\nWhen IntelliJ runs the tests, it opens a pane at the bottom of the window to display test results. At the left, we see that the test has failed. We can expand the tree to see each of the individual tests (again, in this case there is only one). Selecting one of the tests shows its results to the right.\nThis console-based test output can be hard to read, but IntelliJ provides a nicer interface for viewing test results. Follow the Click to see difference link to open this pane.\nOn the left, you’ll see the output that the test expected. On the right, you’ll see the output that your program actually provided. IntelliJ will highlight the difference between the two, showing you exactly why your test failed.\nIn this case, the test expected our code to output Hello, World!. Instead, it provided no output at all.\nWarning The autograding tests are VERY exacting. A difference of just one character will result in a failed test. The tests are also case-sensitive. You’ll need to pay attention to detail in order to complete your assignments.\nWhen your code is correct, IntelliJ will display a green checkmark indicating passing tests.\nYour Task Your task is simple: make the program print out the string \"Hello, World!\". Only edit the code in the HelloWorld class, within the sayHello() method. When your code is correct, running the tests will display passing results. Once your tests pass, you are ready to submit your work and run the autograder.\nRunning the Autograding Tests through Github Actions Before you commit and push your work to Github, head over to the repository page on Github. On the repository page, right below the name, you have a number of options. Click on Actions.\nWe have set up the autograding for you, but you need to allow the workflow to run. Select I understand my workflows, go ahead and enable them within the Actions tab. Now the autograder is ready to check your work!\nOpen IntelliJ’s Terminal pane. You should commit and push your code to GitHub.\nVisit your assignment repository page. Actions may take a minute to run. While the autograding workflow is running, you will see a small yellow circle near the top right. Once the action has completed running, you’ll see a green checkmark indicating that GitHub has graded your assignment as passing. If you see a red “X”, then your assignment is not yet correct.\nThis process will be the same for all of your assignments in this unit. Revisit this page as needed to review instructions on running tests in Java projects.\nHow to Deal With a Failing Assignment Sometimes you may get a red “X” and you need to break out your debugging skills to get down to the bottom of the problem!\nClick on the Actions tab and select the run that failed.\nYou will be taken to that particular run’s detail page. This is where you can find more detail about what happened to cause the autograder to fail. In the pane labeled “autograde.yml on: push”, select the rectangle that says “build” with a time next to it.\nYou can now review the console output for what happened when the autograding action ran. You will find that a number of tasks occur when this action ran. Click on Build with Gradle to find the console output related to the tests.\nRead through the output carefully. In our example, the reason why the test failed was because we forgot the exclamation point at the end of “Hello, World!”. So our best course of action here would be to return to IntelliJ, edit the sayHello() method, re-run our tests locally to confirm that the tests pass, and then commit and push our work to Github.\nNote If the autograder is failing and you cannot determine the root cause, please reach out to course staff for assistance as soon as possible!\nSubmitting Your Work on Canvas When you are satisfied with your work, copy the URL to your repository on Github and paste it in the submission field for Assignment #0 on Canvas.",
    "description": "The purpose of this initial assignment is to familiarize yourself with the process of running the autograding tests with Github Actions and submitting your work. Even if you are familiar with GitHub Actions, this assignment will contain several new items that are specific to working with Java assignments.\nGetting Started Let’s set up the assignment on our computer and learn about its basic structure.\nFirst, find Assignment #0 in Canvas and click on the starter code repo link.",
    "tags": [],
    "title": "Assignment #0: Hello, World!",
    "uri": "/assignments/hello-world/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #3: Tech Jobs (MVC Edition)",
    "content": "Getting Started Set up a local copy of the project:\nIn Canvas, Graded Assignment #3: TechJobs (MVC Edition) contains a GitHub repo link. Fork, clone, and then set up the project in IntelliJ. Refer back to the instructions from Assignment 0 for details. Launch the application (via the Gradle pane, Tasks \u003e Application \u003e bootRun) to make sure it starts up. Then shut it down. Run the autograding tests. The tests for this assignment are set up the same way as for Assignment 2 . There are four tasks for this assignment, but the first doesn’t require any coding on your part. Therefore, there are 3 test files (for tasks 2-4). As with Assignment 2, we recommend that you only run the tests for the task you are currently working on. Review the Code Tip One essential programming skill that you will develop is the ability to read and understand someone else’s code. This assignment begins with you practicing exactly that. Make sure you carefully examine the provided code BEFORE you start changing things.\nTrying to “fix” a code sample before understanding how it works leads to confusion, frustration, and a broken program. DO NOT SKIP the code review!\nCarly created a Spring Boot application and filled in some features. She refactored JobData to generate an ArrayList of Job objects based on your TechJobs-OO work, and she added controllers and views for a “Home”, “List”, and “Search” page. JobData now also builds ArrayLists for the Employer, Location, PositionType, and CoreCompetency objects.\nThe Model Note When referring to Java class locations, we’ll usually omit the leading path: src/main/java/org/launchcode/.\nThe “model” is contained in the JobData class, which is in the models package. We put “model” in quotes, since this class isn’t a model in the typical, MVC/object-oriented sense (maybe a better name for this assignment would be TechJobs VC).\nThe JobData class serves the same purpose as before—it reads data from the job_data.csv file and stores it in a format we can use. In this case, that format is an ArrayList of Job objects. Note that Carly changed the path to the job_data.csv file to store it in the src/main/resources directory.\nYou’ll use some of the static methods provided by JobData in your controller code. Since you’re already familiar with these, we’ll leave it to you to review their functionality as you go.\nThe Controllers Expand the controllers package, and you’ll see that you have three controllers already in place. Let’s look at these one at a time.\nThe HomeController This class has only one handler method, index, which displays the home page for the app. The controller renders the index.html template (in src/main/resources/templates) and provides a fairly simple view.\nThe ListController This controller provides functionality for users to see either a table showing all the options for the different Job fields (employer, location, coreCompetency, and positionType) or a list of details for a selected set of jobs.\nIf you look at the corresponding page at /list, you’ll see an “All” column in the table. However, this option doesn’t work yet, and you will fully implement that view as you work on the assignment.\nAt the top of ListController is a constructor that populates columnChoices and tableChoices with values. These HashMaps play the same role as in the console app, which is to provide a centralized collection of the different List and Search options presented throughout the user interface.\nListController also has list and listJobsByColumnAndValue handler methods, with routes as annotated above their definitions. The first method renders a view that displays a table of clickable links for the different job categories. The second method renders a different view that displays information for the jobs that relate to a selected category. Both of the handlers obtain data by implementing the JobData class methods.\nIn the listJobsByColumnAndValue method, the controller uses two query parameters passed in as column and value to determine what to fetch from JobData. In the case of \"all\" it will fetch all job data, otherwise, it will retrieve a smaller set of information. The controller then renders the list-jobs.html view. We’ll explore the list.html and list-jobs.html templates in a moment.\nlistJobsByColumnAndValue works similarly to the search functionality, in that we are “searching” for a particular value within a particular field and then displaying jobs that match. However, this is slightly different from the other way of searching in that the user will arrive at this handler method as a result of clicking on a link within the list view, rather than via submitting a form. We’ll see where these links originate when we look at the views. Also note that the listJobsByColumnAndValue method deals with an “all” scenario differently than if a user clicks one of the category links.\nThe SearchController Currently, the search controller contains only a single method, search. It simply renders the form defined in the search.html template.\nLater in this assignment, you will receive instructions for adding a second handler to deal with user input and display the search results.\nThe Views Let’s turn our attention to the views.\nThe fragments File If the application is not running, launch it and navigate to the site’s home page in your browser. Also open up the src/main/resources/templates/index.html file in IntelliJ. You’ll notice that there is a fair amount of content visible on the page that isn’t contained in index.html. This is because we’re using two fragments from fragments.html (head and page-header). These allow for some basic page structure and navigation to be shared across all of our views.\nHave a look at the structure of fragments.html, but you will NOT need to do any work within this file for this assignment.\nTip We use Twitter’s Bootstrap CSS, HTML, and JS framework to provide some styling and functionality to our views. The appropriate files are included at the top of fragments.html and thus are included on every page of our app.\nYou won’t have to explicitly use Bootstrap at all in this assignment, but it’s a great way to make your sites look good with minimal work. Consider using it in your own projects!\nThe List Views Turn your attention to list.html. This page displays a table of links broken down into several categories. Data from columnChoices is used to fill in the header row, and information stored in tableChoices generates the link text.\nThe most interesting part of this template is how we generate the links:\n1 2 3 4 5 6 7 \u003ctd th:each=\"category : ${tableChoices}\"\u003e \u003cul\u003e \u003cli th:each=\"item : ${category.value}\"\u003e \u003ca th:href=\"@{/list/jobs(column=${category.key},value=${item})}\" th:text=\"${item}\"\u003e\u003c/a\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/td\u003e tableChoices is a HashMap from JobData, and it contains the names of the Job fields as keys (employer, etc.). The value for each key is an ArrayList of Employer, Location, CoreCompetency, or PositionType objects. In line 1, category represents one key/value pair from tableChoices, and in line 3, item represents one entry from the stored ArrayList. We’ve seen the syntax @{/list/jobs} to generate a link within a Thymeleaf template, but we haven’t seen the other portion of the link: (column=${category.key},value=${position}). This syntax causes Thymeleaf to dynamically generate query parameters for our URL. In line 4, we set these parameters by using column= and value=. The values of these parameters are determined dynamically based on ${category.key} and ${item}. Since these values come from tableChoices, the keys will be employer, location, etc. The values will be the individual elements from the related ArrayList. When the user clicks on these links, they will be routed to the listJobsByColumnAndValue handler in ListController, which looks for these parameters.\nClicking on one of the links will display a list of jobs that relate to the choice, via the listJobsByColumnAndValue handler method. However, that view, list-jobs.html isn’t working yet. While the handler method is fully implemented, the view template needs some work.\nFor now, click one of the Location links. This sends a request as we outlined above, but doing so only displays a page with a title and no job list.\nThe page you see at /list/values?column=location\u0026value=... is generated by the list-jobs.html template. It has a similar structure as list.html, but the table consists of only one column.\nNote Select “Kansas City” from the list of locations, and then check the address bar of your browser:\n/list/jobs?column=location\u0026value=Kansas%20City Thymeleaf inserts %20 for us, to represent a space, but this may actually be hidden in your browser’s address bar.\nThe Search View Finally, click on Search from the home page, or the navigation bar, and open up search.html in IntelliJ. You’ll see a search form (in both the browser and template file) that gives the user the option of searching by a given Job field, or across all fields. This is an exact visual analog of our console application.\nThis template will be used to display search results, in addition to rendering the form. This will give the nice user experience of easily searching multiple times in a row.\nWrap Up the Code Review Once you understand the controllers and views that are already in place, you’re ready to begin your work.\nIn IntelliJ, select View \u003e Tool Windows \u003e TODO to pop open a small pane at the bottom of the window. This list is populated by any code comments that start with TODO. You’ll see your tasks listed, and clicking on any one will open the relevant file.\nAs you work on your tasks, remember to refer to the demo app .",
    "description": "Getting Started Set up a local copy of the project:\nIn Canvas, Graded Assignment #3: TechJobs (MVC Edition) contains a GitHub repo link. Fork, clone, and then set up the project in IntelliJ. Refer back to the instructions from Assignment 0 for details. Launch the application (via the Gradle pane, Tasks \u003e Application \u003e bootRun) to make sure it starts up. Then shut it down. Run the autograding tests. The tests for this assignment are set up the same way as for Assignment 2 .",
    "tags": [],
    "title": "Task 1: Getting to Know the Starter Code",
    "uri": "/assignments/techjobs-mvc/getting-started/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "Classes for Java In previous programming studies, we have come across classes and objects. Classes and objects in Java are similar to classes and objects in other languages.\nA Minimal Class and Object Classes may contain fields and methods. Fields contain our data for the class and methods define actions a class can take. We say that fields and methods are members of a class.\nExample Let’s create a class called HelloWorld with one field, message, and one method, sayHello(). message will be a string and have a value of \"Hello World\". sayHello() will not return a specific value and instead print out the value of message.\npublic class HelloWorld { public String message = \"Hello World\"; public void sayHello() { System.out.println(message); } } The only field in the HelloWorld class is the string message, while the only method is sayHello, which prints the value of the message field and doesn’t return anything.\nNote There is no main method, which is required to run a Java program. Without it, we have to do some additional work to get our program to run!\nTo execute sayHello, we’ll need to create an instance of the class HelloWorld. We refer to an object created from a particular class as an instance of that class.\nHere’s how this might look with our HelloWorld class:\nExample public class HelloWorldRunner { public static void main(String[] args) { HelloWorld hello = new HelloWorld(); hello.sayHello(); } } In order to call the sayHello method of HelloWorld, we must first have an instance of HelloWorld, which we create using the syntax new HelloWorld(). As with built-in classes, classes that we create define their own types. So the object hello is a variable of type HelloWorld.\nWe introduced this HelloWorld class as a means of illustrating the simplest representation of some basic concepts in Java. The goal of the next few lessons is to build up the machinery to create a wide variety of interesting classes that can be used to create complex programs and elegantly solve difficult problems.\nThe this Keyword In HelloWorld above, we could have written sayHello this way, with the same net effect:\npublic void sayHello() { System.out.println(this.message); }In this context, inside of the class, we can refer to fields (and methods) that belong to the class using the special object, this Whenever you use this, it always refers to the object that the given code is currently within. In other words, this will always be an instance of the given class. Since it is not legal to create code outside of a class in Java, this nearly always makes sense to us (there’s one exception, that we’ll encounter soon).\nYou are allowed to create local variables (variables declared within a method) with the same name as a field of the given class. In this case, in order to refer to the field, we must use this.\nWarning When a local variable has the same name as a field, we say that the local variable shadows the field. Errors caused by shadowing can be tricky to spot, so it’s best to avoid doing this in your code.\nNote If you want to learn more about this subject, check out the Oracle Documentation on using the this keyword .\nCheck Your Understanding Question The following code block contains several bugs. Mark all of the lines that contain a bug in the code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Greeting { public String name = \"Jess\" public void sayHello() { System.out.println(\"Hello \" + here.name + \"!\"); } } a. line 7 b. line 3 c. line 6 d. line 1 ",
    "description": "Classes for Java In previous programming studies, we have come across classes and objects. Classes and objects in Java are similar to classes and objects in other languages.\nA Minimal Class and Object Classes may contain fields and methods. Fields contain our data for the class and methods define actions a class can take. We say that fields and methods are members of a class.\nExample Let’s create a class called HelloWorld with one field, message, and one method, sayHello().",
    "tags": [],
    "title": "Classes for Java",
    "uri": "/classes/reading/background/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes",
    "content": "Content Links Classes for Java Modifiers in Java Encapsulation Constructors Methods Single Responsibility Principle ",
    "description": "Content Links Classes for Java Modifiers in Java Encapsulation Constructors Methods Single Responsibility Principle ",
    "tags": [],
    "title": "Reading",
    "uri": "/classes/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #1: Tech Jobs Console",
    "content": "Before diving in and starting to code, make sure you understand what the code you’ve been given does. Since you’re starting with a functioning—albeit unfinished—program, go ahead and run it to get an idea of how it works.\nWarning The application will run until you force it to quit, re-prompting time after time. To kill it, press the “stop” icon in the upper corner of the Run pane. We’ll learn precisely how the program manages to work this way below.\nLet’s explore the code by starting with the source of the data our program is providing access to.\nThe Data File: jobs_data.csv Our simple app doesn’t connect to a database. If the prototype proves useful and we continue development, we’ll add that functionality later. But for now, we’ve been given a CSV (comma-separated values) file from the Company Team at LaunchCode that contains some recent jobs. This file was exported from an Excel spreadsheet into this format, which is easy for programs to read in.\nIf CSV files are new to you, don’t worry, they’re easy to understand. CSV files are conceptually similar to simple spreadsheets in that they organize data in rows and columns. The major difference is that they don’t have the ability to carry out calculations the way spreadsheets do, and you can easily open, read, and edit them in plain text editors.\nOpen up jobs_data.csv, which is in the src/main/java/resources folder. You’ll see that the first line is:\nname,employer,location,position type,core competencyWhile it isn’t required, the first line of a CSV file often represents the column names. We have 5 names here, which indicates that each of our rows in the CSV file should have 5 fields. In this file format, a “row” corresponds to a new line. So each line below the first will constitute a row of data, or a record.\nHave a look at the data below line 1, and ask yourself the following questions:\nWhich fields match up with which column names above? Why do some lines/rows (e.g. line 10) have more commas than others, if commas are supposed to separate columns? What role do the double-quotes play? The TechJobs Class The TechJobs class contains the main method that will drive our program’s functionality. It contains three methods:\nmain - The main application runner. getUserSelection - A utility method that displays a menu of choices and returns the user’s selection. printJobs - This is meant to print a list of jobs to the console in a nicely formatted manner, but hasn’t been implemented yet. This will be part of your job. Let’s look at each of these.\nThe main Method The logic within main presents menus in turn, and based on the user’s choice, takes appropriate action.\nIt begins by declaring two local variables: columnChoices and actionChoices. These contain information relating to the menus that we’ll display, and we’ll look at them in more detail later.\nNext, we notice a while loop that starts while (true). While we usually want to avoid creating infinite loops, we have a good reason for doing so in this case! We want our application to continually run until the user decides they want to quit. The simplest way to do this is to loop forever. When the user wants to quit, they can enter x at the initial “View jobs by” prompt. As you saw above, however, IntelliJ’s Run pane works slightly differently and you’ll need to rely on the red “stop” icon to stop the program.\nNote Another way to kill a running program from the terminal is by pressing ctrl-C (a widely-known command to kill a console application). This will work in any terminal context, and not just for our console program in IntelliJ\nThe main method can be summarized as follows:\nPresent the user with choices on how to view data: list or search. Based on that choice, prompt them for the column to apply the choice to. In the case of a search, we also ask for a search term. Carry out the request to the JobData class via one of its public methods. Display the results of the request. Repeat. main simulates a query to an external source:\nWe ask the method for data that originates from a non-Java source. The method parses and filters that data. The method presents the data in a useful manner. The getUserSelection Method The getUserSelection method takes in a String to display above the menu, to provide context for what they are being asked. It also takes in a HashMap with String keys and String values. How is this used? What will this HashMap contain when the method runs?\nTo figure this out, right-click on the method name and select Find Usages. This will open a pane and display each location in the program where getUserSelection is called. The first such usage is the first line of the main while loop:\nString actionChoice = getUserSelection(\"View jobs by:\", actionChoices);What is this HashMap named actionChoices? If we look a few lines above, we see:\n// Top-level menu options HashMap\u003cString, String\u003e actionChoices = new HashMap\u003c\u003e(); actionChoices.put(\"search\", \"Search\"); actionChoices.put(\"list\", \"List\");If you recall how the program worked when you ran it, the first menu that you chose had two options, Search and List, which seem to correspond to the entries in actionChoices. This is, in fact, the case. This is the data that is used to generate the first menu we see when running the program.\nThe second usage of getUserSelection is a few lines below: String columnChoice = getUserSelection(\"List\", columnChoices);This references columnChoices, which is declared at the top of main and has a similar structure to actionChoices (they’re the same data type and are used in calls to the same method, so this shouldn’t be surprising). Most of the entries in columnChoices correspond to columns in the jobs data set, but there’s one additional entry with key/value pair \"all\"/\"All\". These entries will help us present to the user the options for searching our data, which will correspond to searching within a given column, or searching all columns at once.\nThe keys in actionChoices and columnChoices represent the “internal” String we’ll use to refer to these options (e.g. when representing the user’s menu choice or querying data). The values in the map represent the “external” way that these are represented to the user.\nWithin getUserSelection itself, most of the code is within a do-while loop. A do-while loop is similar to a while loop, but the conditional check is at the end of the loop’s code block. This has the net consequence that the loop’s code block always runs at least once. At the end of the block’s execution, we check a condition to determine if we should run the block again. This nicely mimics the behavior of simple menu-driven applications.\nWithin this loop, menu options are printed to the screen, and user input is collected. If the input is valid, it returns the choice as a String to the caller. This String corresponds to the chosen key (from choices, which will be either actionChoices or columnChoices) of the item the user selected. If invalid, it re-prompts the user.\nThe local variable choiceKeys is used to easily enumerate the choices HashMap. In other words, it gives us a simple way to provide an ordering to choices, which doesn’t have an ordering of its own.\nThe JobData Class The JobData class is responsible for importing the data from the CSV file and parsing it into a Java-friendly format, that is, into HashMap and ArrayList form. Look toward the bottom of the class, and you will see a method named loadData, which does just what it advertises. After parsing the file data, it stores the data in the private property allJobs, which is of type ArrayList\u003cHashMap\u003cString, String\u003e\u003e.\nNote We haven’t covered static properties and methods in-depth yet. For this assignment, know simply that they allow us to use properties and methods of a class without creating an object from that class. For example, we can call JobData.findAll() from the TechJob class.\nIf you want to create a new method in JobData or add a property, be sure to declare it as static.\nLet’s look more closely at the data type of allJobs. It purports to be an ArrayList that stores HashMap objects, which have String keys and String values. If we were to represent some of this data visually, using [] for an ArrayList and {} with key/value pairs, it would look like this:\n[ { \"name\": \"Junior Data Analyst\", \"employer\": \"Lockerdome\", \"location\": \"Saint Louis\", \"position type\": \"Data Scientist / Business Intelligence\", \"core competency\": \"Statistical Analysis\" }, { \"name\": \"Junior Web Developer\", \"employer\": \"Cozy\", \"location\": \"Portland\", \"position type\": \"Web - Back End\", \"core competency\": \"Ruby\" }, ... ]If you look at the loadData method, you’ll see a lot of unfamiliar code. Blake wrote this essential piece of code for you, and while you won’t have to modify it, it will be useful to have an idea of how it works. Read through the code until you feel like you can describe its functionality at a basic level.\nThere are three more methods in JobData, each of which is public (and static, per our earlier note): findAll(), findAll(String), and findByColumnAndValue(String, String). Note that there are two methods named findAll, but this is allowed in Java via a feature called overloading. Overloading happens when multiple methods have the same name, but they each have different input parameters (also called argument lists). Read more about overloading .\nHere are some questions to ask yourself while reading this code:\nWhat is the data type of a “job” record? Why does findAll(String) return something of type ArrayList\u003cString\u003e while findByColumnAndValue(String, String) and findAll() return something of type ArrayList\u003cHashMap\u003cString, String\u003e\u003e? Why is loadData() called at the top of each of these four methods? Does this mean that we load the data from the CSV file each time one of them is called? ",
    "description": "Before diving in and starting to code, make sure you understand what the code you’ve been given does. Since you’re starting with a functioning—albeit unfinished—program, go ahead and run it to get an idea of how it works.\nWarning The application will run until you force it to quit, re-prompting time after time. To kill it, press the “stop” icon in the upper corner of the Run pane. We’ll learn precisely how the program manages to work this way below.",
    "tags": [],
    "title": "Review the Starter Code",
    "uri": "/assignments/techjobs-console/starter-code-review/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #4: Tech Jobs Persistent",
    "content": " Checkout and Review the Starter Code Set up a local copy of the project:\nIn Canvas, find Graded Assignment #4: TechJobs (Persistent Edition) and click on the starter code repo link. Fork the repository to your personal profile, copy the repo’s URL for cloning, and open up IntelliJ. Refer back to the instructions from assignment0 for more details. Launch the application (via the Gradle pane, Tasks \u003e Application \u003e bootRun) to make sure it starts up properly. Then shut it down. The tests for this assignment are set up the same way as for Tech Jobs OO . You won’t be able to run your application or the tests yet. If you try to do so, you’ll see a host of errors relating to the Spring Data annotations and classes. Some of these have already been used in the code, but the dependency that includes them has not yet been declared. That will be one of your tasks. You’ll need to complete Part 1 before you can run the application and view it in a browser.\nThat said, it’s a good idea to scan the classes and templates even before you’re able to execute bootRun. Take a gander at the Job class. It will look somewhat similar to the model in Tech Jobs (MVC Edition) , with a few key differences.\nYou’re no longer using a csv file to load job data, instead, we’ll be creating new Job objects via a user form. The Job data will be stored in a MySQL database that you’ll setup in Part 1 of this assignment.\nAs you explore the starter code, you’ll notice that the JobField abstract class is no longer present. Your task for Part 2 is to complete the work to persist some of the classes. You’ll do this for Employer and Skill classes, as well as Job.\nThe Job class will also look different from how you have last seen it. In Part 3 and Part 4 , you’ll add object relational mapping on the Job class by refactoring the employer and skills (formerly coreCompetency) fields.\nIn your IntelliJ project, you’ll see an empty file in the root directory called queries.sql. After completing the Java updates for parts 1, 2, 3, and 4, we ask you to test your application updates with SQL statements.\nSince you are entering your own data, the queries we ask you to write will return unique result sets. For example, if you haven’t entered any data yet, there may be an empty result set. However, as the architect of the database, you have the knowledge to write the appropriate queries nonetheless.",
    "description": "Checkout and Review the Starter Code Set up a local copy of the project:\nIn Canvas, find Graded Assignment #4: TechJobs (Persistent Edition) and click on the starter code repo link. Fork the repository to your personal profile, copy the repo’s URL for cloning, and open up IntelliJ. Refer back to the instructions from assignment0 for more details. Launch the application (via the Gradle pane, Tasks \u003e Application \u003e bootRun) to make sure it starts up properly.",
    "tags": [],
    "title": "Review the Starter Code",
    "uri": "/assignments/techjobs-persistent/starter-code-review/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nSet up a Java development environment and execute Java programs. Write a “Hello, World!” program in Java. Connect an IntelliJ project to GitHub. Key Terminology Here is a list of the terms you should make note of as you read through this chapter. The list is broken down based on the page the word first appears on.\nSetup for Java Java Development Kit JDK javac Java Virtual Machine Bytecode IntelliJ Integrated Development Environment IDE Your First Java Project File tree Java Web Dev Projects Token Chapter Content Setup for Java Java in the Terminal IntelliJ Your First Java Project Java Web Dev Projects Java Naming Conventions ",
    "description": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nSet up a Java development environment and execute Java programs. Write a “Hello, World!” program in Java. Connect an IntelliJ project to GitHub. Key Terminology Here is a list of the terms you should make note of as you read through this chapter. The list is broken down based on the page the word first appears on.",
    "tags": [],
    "title": "Chapter 1: Introduction and Setup",
    "uri": "/intro-and-setup/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Inheritance is the second of the Four Pillars of Object-Oriented Programming that we encounter.\nHere’s a definition: inheritance is a mechanism within object-oriented programming that allows one class to be based on another class, thus receiving its properties and behaviors.\nNote Inheritance is also sometimes referred to as subtyping.",
    "description": "Inheritance is the second of the Four Pillars of Object-Oriented Programming that we encounter.\nHere’s a definition: inheritance is a mechanism within object-oriented programming that allows one class to be based on another class, thus receiving its properties and behaviors.\nNote Inheritance is also sometimes referred to as subtyping.",
    "tags": [],
    "title": "Inheritance in OOP",
    "uri": "/inheritance/reading/inheritance-oop/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "We log into many, many websites every day. The process has become so routine that we expect it to work flawlessly every time. How surprised would you be if you logged into a website and saw a different user’s account info? What if you entered the wrong password and were still let in? What we have come to expect as routine is anything but when we consider the code needed to make it happen.\nWhat Is Authentication? Authentication is the process of determining a user’s identity. In other words, are they who they say they are?\nThis is typically done by asking a user to provide a secret piece of data, which theoretically only they should know. Passwords are the most commonly used secrets, but there are others such as RSA keys and physical authentication tokens. Authentication relies on the ability of the user to keep their secret data, well, secret. If we are given a user’s secret data, we assume that only one person could have provided it.\nA related, but different, concept is authorization. Authorization is the process of determining if a user is allowed to carry out a specific action.\nExample I can share a Google doc with my coworker with read-only permission. They are then authorized to view the document, but not to make changes.\nMost applications that store personal data use authentication and authorization together. In this book, however, we will only discuss authentication.\nFlow for Simple Authentication Using authentication allows a web application to restrict access to certain pages to known users only. The simplest form of authentication treats all users the same. If a user is signed in, then they are allowed to view all restricted pages. Otherwise, they may not view any. With simple authentication, it is not possible to restrict a page to some users while allowing access by others.\nSimple authentication requires that for every request, the application answers two questions before the request is handled by a controller:\nIs the user asking for a restricted page? If so, do we know who they are? The answers to these questions determine whether or not the user is allowed to view the page.\nThe logical flow of simple authentication looks like this:\nSessions and Cookies The second question above—“Do we know who they are?”—sounds simple enough. However, to determine which user is making which request turns out to be more complicated. To do this, simple authentication relies on two standard web tools, sessions and cookies.\nA session is a collection of temporary data stored on the server that corresponds to a specific user. Sessions are often used to store data that an app wants to keep track of in the short term, but not permanently.\nExamples Some types of data that might be stored in a session:\nItems in a shopping cart Whether or not a user is logged in Data from a multi-page form, such as a checkout process A cookie is a piece of temporary data stored in the user’s browser. Cookies are also used to keep short-term data. While a session can hold lots of data entries, a cookie contains only a single key/value pair. However, a browser may hold a large number of cookies.\nNote A detailed discussion of cookies is beyond the scope of this book. For more info, read HTTP Cookies on MDN .\nCookies and sessions work together to enable simple authentication in the following way:\nWhen a user is authenticated—that is, they provide a valid username/password pair—a session containing their user ID is created on the server. The session has a unique session ID, such as 81LfWG9. In order to associate the user with their session, the server creates a session cookie and returns the cookie to the browser within an HTTP response. The session cookie contains the session ID, and looks something like this: session_id: 81LfWG9. For each subsequent request to the server, the browser passes the session cookie along with the request. When the server receives a request for a restricted resource, it checks for a session cookie. It then looks for a session with the given session ID. If such a session exists, then the server knows who the user is since their user ID is stored in the session. If the session does NOT exist, then the server does not know the user and they must authenticate themselves. The following diagram shows the initial creation (steps 1-2) of the session and cookie after a user signs in.\nAs the user navigates the site, sessions and cookies are used to validate whether users can access restricted pages. The next diagram shows the flow of steps 1-2 in black and the flow of steps 3-4 in blue.\nNote At some point, you may have cleared all of the cookies from your browser only to find that you were suddenly logged out of every website on the Internet. This is because those cookies stored the session IDs that allowed the various sites to know who you were.\nA logout request to a web app simply destroys the user’s session, erasing any memory of who they are. Even if they pass a session cookie in their subsequent requests, the old session and session ID will no longer exist.\nA Note On Authentication In Spring Before we proceed, we want to point out something important about authentication in Spring. Spring contains a sub-project, Spring Security , that provides extensive support for authentication and authorization. In addition to supporting simple authentication, Spring Security also supports more sophisticated authorization flows/processes like OAuth 2 . Professional developers working with Spring nearly always use Spring Security.\nIn this book, we are explicitly not introducing Spring Security for two reasons:\nThe project handles many aspects of the authentication process for you. This hides many of the steps that are important to understand as you learn about authentication. Setting up Spring Security is fairly complicated, and requires concepts that are beyond the scope of this course. That said, the authentication approach outlined in this chapter is sufficient for use in your personal projects. When you begin working with a team on professional applications, a senior developer will likely be on hand to help with authentication setup.\nNote If you are curious about simple authentication using Spring Security, check out an example on GitHub. Start with the SecurityConfig class .\nCheck Your Understanding Question Which of the following are true?\nA session is stored on the server. A session is stored in the browser. A cookie is stored on the server. A cookie is stored in the browser. Question What is the difference between authentication and authorization?\nAuthentication handles user permissions, authorization handles user restrictions. Authentication handles user identity, authorization handles user permissions. There is no difference, they are synonymous terms. User authorization can be changed in a request, authentication cannot. ",
    "description": "We log into many, many websites every day. The process has become so routine that we expect it to work flawlessly every time. How surprised would you be if you logged into a website and saw a different user’s account info? What if you entered the wrong password and were still let in? What we have come to expect as routine is anything but when we consider the code needed to make it happen.",
    "tags": [],
    "title": "Introduction to Authentication",
    "uri": "/authentication/reading/intro-to-authentication/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 16: Enums \u003e Reading",
    "content": "Many statically-typed programming languages provide a feature called enumeration types, or enum types for short. Enum types are special classes that should have only one of a set of fixed values, such as days of the week.\nImagine that we wanted to add a field to Event to specify which day of the week an event takes place. You might start by creating a new field:\n@NotBlank private String dayOfWeek;As defined here, a user could submit any of the following values representing Wednesday:\n\"Wednesday\" \"wednesday\" \"Wed\" \"WED\" \"W\" Accepting data like this leads to many complications. For example, searching for all events taking place on Wednesday would need to account for all of these variations. And what happens if a user misspells “Wednesday”?\nWhen filling out forms on the web, you are used to seeing select elements used to represent fields like this.\nSelect tag with days of the week.\nLimiting the values that the user can select drastically reduces complexity and ensures that our application data remains clean and standardized. Enum types are one way to model fields like this.\nCreating an Enum Type Let’s see how we can create an enum type, or enum class.\nNote Recall that a class defines a new data type. Thus, the term “data type” can be used in place of “class.” We’ll typically call enum classes “enum types” since this is what most Java developers do.\nThe simplest enum type that we can define to represent days of the week looks like this:\n1 2 3 4 5 6 7 8 9 10 11 public enum Day { SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY } Using the enum keyword specifies that this class should be an enum type. In other words, it should only be able to take on one of a fixed set of values. Within the body of the class, we list the valid values (SUNDAY, MONDAY, etc.). These values are in all-caps because they are constants. In fact, the class above is very similar to this static class:\n1 2 3 4 5 6 7 8 9 10 11 public class DayStatic { public static final int SUNDAY = 0; public static final int MONDAY = 1; public static final int TUESDAY = 2; public static final int WEDNESDAY = 3; public static final int THURSDAY = 4; public static final int FRIDAY = 5; public static final int SATURDAY = 6; } To refer to Thursday, you can use the value DayStatic.THURSDAY. Recall our switch example from earlier .\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import java.util.Scanner; public class DayPrinter { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.println(\"Enter an integer: \"); int dayNum = in.nextInt(); String day; switch (dayNum) { case 0: day = \"Sunday\"; break; case 1: day = \"Monday\"; break; case 2: day = \"Tuesday\"; break; case 3: day = \"Wednesday\"; break; case 4: day = \"Thursday\"; break; case 5: day = \"Friday\"; break; case 6: day = \"Saturday\"; break; default: // in this example, this block runs if none of the above blocks match day = \"Int does not correspond to a day of the week\"; } System.out.println(day); } } This code can be refactored using DayStatic:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import java.util.Scanner; public class DayPrinter { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.println(\"Enter an integer: \"); int dayNum = in.nextInt(); String day; switch (dayNum) { case DayStatic.SUNDAY: day = \"Sunday\"; break; case DayStatic.MONDAY: day = \"Monday\"; break; case DayStatic.TUESDAY: day = \"Tuesday\"; break; case DayStatic.WEDNESDAY: day = \"Wednesday\"; break; case DayStatic.THURSDAY: day = \"Thursday\"; break; case DayStatic.FRIDAY: day = \"Friday\"; break; case DayStatic.SATURDAY: day = \"Saturday\"; break; default: // in this example, this block runs if none of the above blocks match day = \"Int does not correspond to a day of the week\"; } System.out.println(day); } } In essence, this code represents days of the week as fixed integer values, one for each day. Enum types are essentially a more robust version of this approach.\nLet’s revisit our Day enum type:\n1 2 3 4 5 6 7 8 9 10 11 public enum Day { SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY } We can declare a variable of type Day and it will only be allowed to take on one of the 7 defined values.\n// This works Day workWeekStart = Day.MONDAY; // This does not, throwing a compiler error Day workWeekEnd = \"Friday\";Enums are important because they provide type safety in situations where we want to restrict possible values. In other words, they eliminate the possibility of bad, or dirty, values.\nEnum Examples The world is filled with examples ripe for representation by enums. Here are a few from both the real world and the world of programming.\nExample Months of the year.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public enum Month { JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER } Example Given a model type like our Event class, enums can represent categories that model objects can fall into.\n1 2 3 4 5 6 7 8 public enum EventCategory { CONFERENCE, MEETUP, WORKSHOP, SOCIAL } Example A common use of enums in programming is to set the log level of an application. The log level represents the types of log messages that should be displayed as the application runs.\nYou might only want to see critical error messages when running an application on a production server, but you may want to see many more messages, such as warnings and informational messages, when developing the application locally.\npublic enum LogLevel { DEBUG, INFO, WARNING, ERROR }An application can change the way it logs messages by changing the log level.\nExample An enum that you have already encountered is RequestMapping, which we have used to specify which HTTP methods a controller method can respond to. This enum has values RequestMapping.GET, RequestMapping.POST, RequestMapping.DELETE, and so on.\nAdding Properties to Enums It can sometimes be useful to add properties and methods to enum types, in order to associate data and behaviors with each value.\nLet’s consider the example of our Day enum from above. We can associate a user-friendly display name (such as “Saturday” for Day.SATURDAY), along with a boolean representing its status as a weekday, just as you would in any other class.\nLet’s include the relevant fields, getters, and a constructor. Note that the fields will be final since they should never change value. This also means that they don’t need setters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 private final String displayName; private final boolean weekday; public Day(String displayName, boolean weekday) { this.displayName = displayName; this.weekday = weekday; } public String getDisplayName() { return this.displayName; } public boolean isWeekday() { return this.weekday; } To specify the values of displayName and weekday for each enum value, we call the constructor when listing the values. The full class then looks like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public enum Day { SUNDAY(\"Sunday\", false), MONDAY(\"Monday\", true), TUESDAY(\"Tuesday\", true), WEDNESDAY(\"Wednesday\", true), THURSDAY(\"Thursday\", true), FRIDAY(\"Friday\", true), SATURDAY(\"Saturday\", false); private final String displayName; private final boolean weekday; public Day(String displayName, boolean weekday) { this.displayName = displayName; this.weekday = weekday; } public String getDisplayName() { return this.displayName; } public boolean isWeekday() { return this.weekday; } } Note Notice that we now have to add a semi-colon after our list of enum values.\nCheck Your Understanding Question We mentioned above that all classes define a data type. Is the inverse of this statement true? In other words, do all data types correspond to a class? (Hint: Try to think of a data type that is NOT a class.)\nYes, everything in Java is a class. No, there are data types that do not correspond to a class. (Be sure to provide an example.) Question Which of the following would NOT be a good choice for an enum type?\nStates in the US Shoe sizes (using the American scale) Price of a gallon of milk Sections in a bookstore ",
    "description": "Many statically-typed programming languages provide a feature called enumeration types, or enum types for short. Enum types are special classes that should have only one of a set of fixed values, such as days of the week.\nImagine that we wanted to add a field to Event to specify which day of the week an event takes place. You might start by creating a new field:\n@NotBlank private String dayOfWeek;As defined here, a user could submit any of the following values representing Wednesday:",
    "tags": [],
    "title": "Introduction to Enums",
    "uri": "/enums/reading/intro-to-enums/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "In the previous chapters, you learned about thymeleaf, which displays data and an interface for a user, and controllers which determine what data to send to the views. This data needs to come from some source and take some shape. Cue the models.\nWhat is a Model? A model represents the logic for accessing and storing the data used in an application. Properly constructed, they do not depend on any controllers or views, which makes models easy to reuse without modification.\nModels are not the data itself, but rather the data logic. They dictate how we want to handle the data in an application-specific way. The data used in an application is often sourced from a database or an external data service. Data is typically application-agnostic and it is the work of the models we write to shape raw data into useful application information.\nConsider a physical address book (a model). It stores names, addresses, phone numbers, etc. on its pages. Anyone (a controller) can pick up the book, retrieve the information, and then write some of the data on a separate piece of paper (a view). The address book model does not depend on who picks it up and enters their contacts. The book just provides organization and storage logic. On the flip side, the same person can input the same contact data into a different book. So a model takes raw information and turns it into something useful for a particular application.\nMVC: Putting it Together Model Shapes data to fit the needs of an application.\nView Displays data to the user. Via events, the user interacts with the view and updates the program data. The view communicates with the controller but not the model.\nController Directs the flow of information between the view and the model. It does not store the data or determine how to display it for the user. It passes information retrieved from the view to update the model. And it passes information retrieved from the model to update the view.\nTip Need further review? Check out MVC for Noobs .\nModel vs. Controller One tricky part of using the MVC structure is deciding what code belongs in the model and what belongs in the controller. In general, any code that deals with data transfer or responding to user actions belongs in the controller. Code that involves retrieving data from a database or service or organizing that data belongs with the model.\nIn our codingevents application thus far, we’ve done all data handling inside of controller classes. However, most data manipulation should occur in model classes. So we need to make a distinction between these actions. For any manipulations that must occur regardless of a user’s actions, that code belongs in the model. For changes that vary depending on a user’s request (e.g. multiplying vs. adding a set of numbers), that code belongs in the controller.\nModel code defines the logic for processes that the user never needs to see. These include:\nThe mechanics for storing data. The mechanics for retrieving data. The mechanics for organizing data. Updating or manipulating the data independent of any controller or view actions. Controller code handles requests made by the user. These include:\n“Please retrieve this information from the model.” “Please store this according to the rules of the model.” “Please delete this item.” “Please change this item.” “Please display this.” “Please modify this data in a novel way”. Remember, the controllers are the traffic cops, directing information from one place to another. A controller does not permanently store data. Instead, it either sends the information to the model, which uses its own code to preserve the data, or it sends the content to the view for display.\nCheck Your Understanding Question If we use baking as an analogy for an MVC project, which of the following items best represents a model?\nThe bread ingredients: flour, water, yeast, salt Mixing and shaping the ingredients together Baking the loaves into the final product Eating the bread Question If we use a library as an analogy for an MVC project, which of the following items best represents a model?\nThe books on the shelves The Dewey Decimal storage system The librarians The book readers ",
    "description": "In the previous chapters, you learned about thymeleaf, which displays data and an interface for a user, and controllers which determine what data to send to the views. This data needs to come from some source and take some shape. Cue the models.\nWhat is a Model? A model represents the logic for accessing and storing the data used in an application. Properly constructed, they do not depend on any controllers or views, which makes models easy to reuse without modification.",
    "tags": [],
    "title": "Models in MVC",
    "uri": "/models-and-model-binding/reading/models-in-mvc/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "With all that we have learned about MVC applications and relational databases, we are ready to connect the two and add persistent data storage to our apps! To do so, we need to use object-relational mapping.\nObject-Relational Mapping or ORM is a technique for converting data between Java objects and relational databases. ORM converts data between two incompatible type systems (Java and MySQL), such that each model class becomes a table in our database and each instance a row of the table.\nExample Let’s say we have a Java class called ContactInfo. ContactInfo has three fields: an integer id, a string name, and a string email. Now we want to store this information in a MySQL database. We can use ORM so that the database of our application has a table to contain all objects instantiated from the ContactInfo class. The table called contactinfo has three columns: an integer id, a varchar name, and a varchar email.\nNow, let’s instantiate a Java object:\npublic ContactInfo frank = new ContactInfo(3,\"Frank\",\"frank@email.com\"); Having properly set up our application, we can add Frank’s info to our contactinfo table. While we will write the code to add Frank’s info to our database in Java, the frameworks and APIs that make ORM happen will run the following MySQL query for us.\nINSERT INTO contactinfo (id,name,email) VALUES (3,\"Frank\",\"frank@email.com\");Now Frank’s info is safely stored in our MySQL database in the contactinfo table!\nAt the most basic level, we need two components to make ORM work in our Java applications: an API and an object-relational mapper. The API will set the standards by which the object-relational mapper will convert between Java and MySQL. In the example above, the API reads through our Java code and designates a class that will be turned into a table. The mapper will then read through the class and create the following MySQL query to make the contactinfo table.\nCREATE TABLE contactinfo ( INT id, VARCHAR(255) name, VARCHAR(255) email );In Java, this API is called a JPA or Java Persistence API. JPAs makes use of data layers. When we learned about models, we learned that data layers add abstraction between models and the data we want to store. Models are NOT persistent data stores and relational databases do NOT shape the Java objects we will be using. We want to make sure that the two remain separate.\nORM in Spring In Spring, our JPA is called the Spring Data JPA. If you look up JPA on the internet, you will find many different examples! While JPAs follow the same set of standards, different frameworks have different JPAs that work within their specific framework. The object-relational mapper we will be using with the Spring Data JPA is Hibernate. As you run your apps, you will notice Hibernate and JPA pop up in the logs! To run your apps, you need to connect MySQL to a Spring application. Let’s do this with codingevents!\nSetting up a Persistent Database - Video The following video explains how we can add a MySQL database to our codingevents application. The accompanying text is a quick rundown of what happens in the video. To get started, create a branch off of your enums branch.\nNote The starter code for this video is found at the enums branch of the coding-events-demo repo. The final code presented in this video is found on the db-config branch . As always, code along to the videos on your own codingevents project.\nSetting up a Persistent Database - Text To get started with using a relational database with our MVC applications, we need to first go to MySQL Workbench.\nIn MySQL Workbench, you need to do the following:\nCreate a new schema, codingevents. Note In the video, Chris names his schema coding_events. Either name works just fine, as long as you are consistent within your own application.\nAdd a new user with a new password. Give the user all privileges to modify your new schema. In IntelliJ, attach MySQL to your project in application.properties.\n# Database connection settings spring.datasource.url=jdbc:mysql://localhost:3306/coding-events spring.datasource.username=user spring.datasource.password=greatpassword # Specify the DBMS spring.jpa.database = MYSQL # Show or not log for each sql query spring.jpa.show-sql = false # Hibernate ddl auto (create, create-drop, update) spring.jpa.hibernate.ddl-auto = update # Use spring.jpa.properties.* for Hibernate native properties (the prefix is # stripped before adding them to the entity manager) spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect Set the value of username and password to the username and password you set up in MySQL Workbench.\nIn the dependencies of build.gradle, add MySQL and the Spring Data JPA, like so:\nimplementation 'org.springframework.boot:spring-boot-starter-data-jpa' implementation 'mysql:mysql-connector-java:8.0.32'Once you have taken these steps, you are ready to set up the appropriate models and controllers for the application!\nKey Takeaways Before we can get into the ins and outs of using ORM, we need to make sure that our application has a corresponding database and that our application is ready to connect to MySQL. We can start to do this by creating new schemas and setting user privileges in MySQL Workbench. We also must make sure that the Spring application has the correct dependencies, username, and password to access the schema.\nIf we do not do these steps, then our application will not be able to use a persistent data source.\nAs Chris noted in our video, while we can simply set the value of spring.datasource.username and spring.datasource.password to the value of the username and password, this is NOT best practice. We regularly commit our code to Github, meaning anyone who reads the code in our repository can see the username and password. While you can do it for the applications in this class, you do not want to do it in the future.\nTo avoid this in the future, you can configure your application.properties file to use environment variables. You then hide the appropriate info by setting the environment variable’s value equal to the password, for example.\nWe have written an article on how to configure your environment variables to keep the username and password to your database safe and secure.\nCheck Your Understanding Question True or false: writing usernames and passwords in plain text in a file is a GREAT idea!\nQuestion True or false: an ORM converts data between Java objects and relational databases.\nQuestion True or false: We need Hibernate AND Spring Data to successfully use ORM.",
    "description": "With all that we have learned about MVC applications and relational databases, we are ready to connect the two and add persistent data storage to our apps! To do so, we need to use object-relational mapping.\nObject-Relational Mapping or ORM is a technique for converting data between Java objects and relational databases. ORM converts data between two incompatible type systems (Java and MySQL), such that each model class becomes a table in our database and each instance a row of the table.",
    "tags": [],
    "title": "Object-Relational Mapping",
    "uri": "/intro-orm-mapping/reading/orm/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication",
    "content": " Introduction to Authentication Hashing Passwords Creating a User Model Login and Registration Forms Filtering Requests ",
    "description": " Introduction to Authentication Hashing Passwords Creating a User Model Login and Registration Forms Filtering Requests ",
    "tags": [],
    "title": "Reading",
    "uri": "/authentication/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 10: Controllers and Routing",
    "content": " Simple Controllers Controllers with Parameters Controllers with Forms Class Level Controller Annotations ",
    "description": " Simple Controllers Controllers with Parameters Controllers with Forms Class Level Controller Annotations ",
    "tags": [],
    "title": "Reading",
    "uri": "/controllers-and-routing/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 16: Enums",
    "content": "Content Links Introduction to Enums Enums in Model Classes ",
    "description": "Content Links Introduction to Enums Enums in Model Classes ",
    "tags": [],
    "title": "Reading",
    "uri": "/enums/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance",
    "content": "Content Links Inheritance in OOP Inheritance in Java A Tale of Two Cats Inheriting from Abstraction Casting Testing Inheritance Class Diagrams ",
    "description": "Content Links Inheritance in OOP Inheritance in Java A Tale of Two Cats Inheriting from Abstraction Casting Testing Inheritance Class Diagrams ",
    "tags": [],
    "title": "Reading",
    "uri": "/inheritance/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping",
    "content": "Reading Content Links Object-Relational Mapping Accessing Data Repositories ",
    "description": "Reading Content Links Object-Relational Mapping Accessing Data Repositories ",
    "tags": [],
    "title": "Reading",
    "uri": "/intro-orm-mapping/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 14: Models and Model Binding",
    "content": "Content Links Models in MVC Create a Model Models and Data Models Binding ",
    "description": "Content Links Models in MVC Create a Model Models and Data Models Binding ",
    "tags": [],
    "title": "Reading",
    "uri": "/models-and-model-binding/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views",
    "content": " Templates Creating Templates Using Templates Iterating in a Template Conditionals in a Template Thymeleaf Forms Template Fragments Static Resources Bootstrap ",
    "description": " Templates Creating Templates Using Templates Iterating in a Template Conditionals in a Template Thymeleaf Forms Template Fragments Static Resources Bootstrap ",
    "tags": [],
    "title": "Reading",
    "uri": "/thymeleaf-views/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "Reading Content Links Web APIs What is REST REST: Practical Fundamentals ",
    "description": "Reading Content Links Web APIs What is REST REST: Practical Fundamentals ",
    "tags": [],
    "title": "Reading",
    "uri": "/web-api-rest/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "For the entirety of this course, we will be coding in Java. Besides installing Java on your machine, you must also add some support technologies to allow you to run and edit Java code.\nJava Development Kit Installing Java means downloading a package of software called the Java Development Kit, or JDK, for short. The JDK contains the software tools needed to develop and run Java code, namely the Java compiler, javac, and the Java Virtual Machine (JVM).\nWhile the compiler is responsible for processing Java code into machine-readable code, the JVM allows us to run that code on any computer. These tools together, downloaded as the JDK, give us the means to write, compile, and run Java on our machines.\nA step-by-step walk-through of the process:\nWe write code in Java, The code is passed through the compiler program, The compiler translates Java into bytecode, a language readable by the JVM. In the JVM, bytecode is translated to machine code, Your computer then reads and executes the machine code. The JVM gives Java more flexibility than other compiled programming languages because it will translate bytecode into the appropriate machine code, depending on the operating environment.\nInstall the JDK Open a terminal window on your machine and enter the following command:\njava -versionIf the response returns a major version 17, you can move on to the next page, Java in the Terminal .\nIf you do not have Java 17, or the command does not work, you can download it here .\nBe sure to select your Operating System from the tab options.\nThe figure above shows options for downloading Java 17.\nMac users: we recommend the .dmg option. The ARM64 option is preferred if you have a recent Mac with an Apple Silicon processor (M1, M2, M…), otherwise choose the x64 option for Macs with an Intel processor. Windows users: we recommend the .exe option To install, you must first select Accept License Agreement.\nMake note of the location where the Java JDK has been installed on your computer.\nMac users: This should be /Library/Java/JavaVirtualMachines.\nWindows users: This should be in the C: Drive under Program Files\nOnce you have completed the installation steps, move onto the next section.",
    "description": "For the entirety of this course, we will be coding in Java. Besides installing Java on your machine, you must also add some support technologies to allow you to run and edit Java code.\nJava Development Kit Installing Java means downloading a package of software called the Java Development Kit, or JDK, for short. The JDK contains the software tools needed to develop and run Java code, namely the Java compiler, javac, and the Java Virtual Machine (JVM).",
    "tags": [],
    "title": "Setup for Java",
    "uri": "/intro-and-setup/setup/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "The first of the MVC elements we’ll work on implementing are the controllers. Recall that controllers are like the traffic cops of our application. They handle the requests made from users interacting with the application’s view and update model data accordingly. Conversely, changes to model data are sent to the view via controller methods.\nControllers and Static Responses - Video Note: The starter code for this video is found in the starter branch of the hello-spring repo. The final code presented in this video is found on the static-responses branch . Code along to the videos on your own hello-spring project.\nControllers and Static Responses - Intro @Controller In the Spring Boot context, we’ll organize controller code into a controller package. Remember when we mentioned that the framework works by convention over configuration? This is what we mean. It’s not required for a controller to be in a controller package, but it’s generally a good idea.\nTo designate a given class as a controller within the Spring framework, we use the annotation @Controller. Recall that java-annotations are like metadata about your code. They help the framework do its work by adding context to your code.\n@Controller public class HelloSpringController { // class code here ... }Controllers Map to Requests @GetMapping is another critical annotation used on controller methods. @GetMapping designates a controller action with a URL path. For every GET request made to the provided path, the controller method will be called. The path is defined with @GetMapping(\"pathname\"). If the pathname value is null, then the path used is the index path, or /.\n@Controller public class HelloSpringController { // responds to get requests at \"/hello\" @GetMapping(\"hello\") public String hello() { // method code here ... } }For every controller method that you want to respond to a request, you will want to use a mapping annotation. Not surprisingly, though, @GetMapping only handles GET requests. If you want to write a controller method that takes care of a POST request, you’ll want to use @PostMapping. Of course, there are other annotations for the other request methods, but these are the two we will use in this class.\n@Controller public class HelloSpringController { // responds to post requests at \"/goodbye\" @PostMapping(\"goodbye\") public String goodbye() { // method code here ... } }If we want to write a controller method that will be used for both GET and POST at the same path, we can label the method with @RequestMapping. @RequestMapping can handle more than one method as such:\n@Controller public class HelloSpringController { // responds to get and post requests at \"/hellogoodbye\" @RequestMapping(value=\"hellogoodbye\", method = {RequestMethod.GET, RequestMethod.POST}) public String hellogoodbye() { // method code here ... } }The default method of @RequestMapping is GET. Another added capability of @RequestMapping is\nthat it can be applied to a whole class, not just a single method. When applied to a whole class, @RequestMapping essentially designates a base path that all methods in the class start with.\n@ResponseBody @ResponseBody is yet another annotation used in the Spring controller context to return plain text from a controller method. This annotation we will only need to use for a short while, before we start to work with templates. Spring Boot’s default action when responding to a controller method is to return a template. Since we aren’t doing that yet however, we need to tell the framework to return plain text by adding the @ResponseBody annotation.\nLet’s put it all together:\n@Controller public class HelloSpringController { // responds to get requests at \"/hello\" @GetMapping(\"hello\") @ResponseBody public String hello() { return \"Hello, Spring!\"; } }Check Your Understanding Question True/False: The @Controller annotation goes above a method to classify it as a controller method.\nTrue\nFalse\nQuestion Which of the following is true about controllers?\nControllers handle the data storage of an MVC app.\nControllers manage what the user of an MVC application sees.\nControllers relay the messages between data and views in an MVC application.\nControllers determine what information can be submitted in an online form.",
    "description": "The first of the MVC elements we’ll work on implementing are the controllers. Recall that controllers are like the traffic cops of our application. They handle the requests made from users interacting with the application’s view and update model data accordingly. Conversely, changes to model data are sent to the view via controller methods.\nControllers and Static Responses - Video Note: The starter code for this video is found in the starter branch of the hello-spring repo.",
    "tags": [],
    "title": "Simple Controllers",
    "uri": "/controllers-and-routing/reading/simple-controllers/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "Take a look at the homepage for WebElements . The content includes text, images, a navigation bar, a search box, linked menu options at the bottom of the page, and 118 carefully colored boxes with links—one for each element on the periodic table. All of this content is very deliberately arranged and styled.\nImagine your boss tasks you with creating this website. Setting up the HTML tags for the navigation bar would be straightforward, but what about the element boxes? You would need to make 118 similar structures, but with different text, links, and colors. Trying to make the table structure work would be tedious at best, and excruciatingly difficult at worst.\nAlso, what if a new element gets discovered, or some of the data for the elements changes? Updating the text, colors, layout, etc. means adjusting those items in the HTML. Also, if that information appears in other areas of the website, then you need to modify that code as well.\nWhew! Changing the website rapidly becomes problematic, especially since it contains lots of data and consists of multiple pages. This is where templates come in to play. They help automate the tasks required to build and maintain a website.\nTemplates are Frameworks A template provides the general structure for a web page. Templates outline for us and Spring where different elements get placed on the page. Any page made with a template includes its elements and follows its rules. If we add content to the template or modify it in some way, all pages made from that template will reflect the changes.\nLet’s see how using a template makes our lives easier.\nNo Template The code below displays a simple list. It defines the location for the heading and each \u003cli\u003e element, in addition to a couple of fun links. The CSS file (not shown) specifies the font, text size, colors, etc.\n\u003cbody\u003e \u003ch1\u003eJava Types\u003c/h1\u003e \u003cdiv class=\"coffeeList\"\u003e \u003col\u003e \u003cli\u003eFrench Roast\u003c/li\u003e \u003cli\u003eEspresso\u003c/li\u003e \u003cli\u003eKopi Luwak\u003c/li\u003e \u003cli\u003eInstant\u003c/li\u003e \u003c/ol\u003e \u003c/div\u003e \u003chr\u003e \u003cdiv class=\"links\"\u003e \u003ch2\u003eLinks\u003c/h2\u003e \u003ca href=\"https://www.launchcode.org/\"\u003eLaunchCode\u003c/a\u003e \u003cbr\u003e \u003ca href=\"https://en.wikipedia.org/wiki/Coffee\"\u003eCoffee\u003c/a\u003e \u003c/div\u003e \u003c/body\u003eWe could drastically improve the appearance and content of the page by playing around with the tags, classes, styles and text. However, any change we want to make needs to be coded directly into the HTML and CSS files, and this quickly becomes inefficient.\nA Better Way Recall that a template represents a view in the MVC world. It sets up a structure to display the data delivered by the controller, and the template guides where that information goes. This provides much more flexibility than hard-coding, since data can change based on a user’s actions.\n\u003cbody\u003e \u003ch1 {templateInstructions}\u003e\u003c/h1\u003e \u003cdiv class=\"coffeeList\"\u003e \u003cul\u003e \u003cli {templateInstructions}\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003chr\u003e \u003cdiv class=\"links\"\u003e \u003ch2\u003eLinks\u003c/h2\u003e \u003ca {templateInstructions}\u003e\u003c/a\u003e \u003c/div\u003e \u003c/body\u003eThis HTML looks similar to the previous example, but it replaces some of the code with instructions.\n{templateInstructions} refers to instructions and data passed into the template by the controller. These will automatically create HTML tags in order to display or update the information.\nBy using a template to build the website, changing the list involves altering something as simple as an ArrayList or object. After changing that data, the template does the tedious work of modifying the HTML.\nTemplates Support Dynamic Content Besides making it easier to organize and display content, templates also allow us to create a dynamic page. This means that its appearance changes to fit new information. For example, we can define a grid for displaying photos in rows of 4 across the page. Whether the images are of giraffes, tractors, or balloons does not matter. The template sets the layout, and the code feeds in the data. If more photos are found, extra rows are produced on the page, but each row shows 4 images.\nIn the last lesson, you built a simple website that displayed a welcome message and responded to changing values for a user’s name. You did NOT apply a template for this page, and it is possible to create an interactive site without one. However, as your projects grow in size, templates make it MUCH easier to maintain your work.\nTip Use templates when building a web-based project.\nTemplates Provide Structure, Not Content Templates allow us to decide how to display data in the view, even if we do not know exactly what that data will be. Information pulled from forms, APIs, or user input will be formatted to fit within our design.\nIn the figure, the black outlines represent different areas defined by the template—spaces for lists, images, links, etc. As the controller feeds data into the template, the appearance of the page changes.\nNote If the template expects data for a list, but the controller does not provide the information, that part of the screen remains empty.\nCheck Your Understanding Question Why should we use a template to design a web page rather than just coding the entire site with HTML and CSS?",
    "description": "Take a look at the homepage for WebElements . The content includes text, images, a navigation bar, a search box, linked menu options at the bottom of the page, and 118 carefully colored boxes with links—one for each element on the periodic table. All of this content is very deliberately arranged and styled.\nImagine your boss tasks you with creating this website. Setting up the HTML tags for the navigation bar would be straightforward, but what about the element boxes?",
    "tags": [],
    "title": "Templates",
    "uri": "/thymeleaf-views/reading/templates/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST \u003e Reading",
    "content": "An API, or application programming interface, is a set of rules that allow one application to communicate with another application.\nWeb APIs are how applications communicate with other applications over a network. Throughout the remainder of this chapter, we will explore web APIs and a pattern for organizing them called REST.\nREST is an application design pattern, not unlike MVC.\nREST, however, relies on an abstract concept called application state that we’ll cover in more detail on the following pages. Here, we dive into what differentiates all web APIs from MVC applications.\nMVC Without the V Web APIs are actually similar to MVC web applications but for one major distinction: web APIs are not concerned with the presentation of data. A web API encompasses the model and controller aspects of MVC, but is not responsible for the view layer. In a web API, the view, or presentation of data, is decoupled from the model and controller that manage and transfer data. This separation leads to the development of two different applications, a client (front-end) and a web API (back-end).\nThe separation between client and web API provides the following benefits:\nClient applications can be developed to operate on a range of platforms (web, mobile, CLI, GUI, etc). Client and web API applications can be developed by different, specialized programming teams. Client and web API applications can be hosted on separate infrastructure. Note Client applications involve User Interface (UI) and User Experience (UX) development.\nClient Interacts With Data Despite being separated from each other, the client application still relies on interactions with application data through the web API. A front-end client must ultimately present data to an end-user. This means the client must request a representation of the data from the web API. After the client receives the representation, it is parsed, styled and rendered to the user.\nNote A web API interacts with, or is consumed by, a client application. This process involves transferring data representations and instructions like creating, reading, updating and deleting.\nResponsibilities of a Web API The chief responsibility of a web API is to exchange representations of data with a corresponding client application. APIs are also gatekeepers, maintaining rules about how end-users may interact with application data.\nData Delivery Think about how a view works in MVC.\nData is injected into a template file, That template is rendered in HTML in the browser when a controller action method is invoked, The data is sent back to the user We call this approach server-side rendering. A client application and web API work in a similar way. However, instead of injecting the data into a template on the server, data is transferred over the network through AJAX requests made by the client.\nWhen a client application receives data, it injects that data into its HTML using JavaScript. This all occurs from within a browser. This approach is called client-side rendering because the web API only sends data, the HTML is assembled on the user’s end.\nExample Consider requesting the /events path of your MVC project. The response is an HTML presentation of the data. In other words, the data is already included in the presentation.\nMVC: GET /events -\u003e HTML with data\nIn a web API analog, an /events path would return just the underlying data.\nWeb API: GET /events -\u003e just data\nIt is then the client application’s responsibility to integrate the received data into its presentation.\nManagement of Data A web API manages data by modeling objects that line up with the underlying business data. This is actually the same process we saw in MVC. Our models are class files that drive the interactions in our codebase. Web APIs often take advantage of ORMs just like MVC applications do.\nIf you have underlying classes that map to a database, you can easily make data available for use within a web API codebase.\nTransference of Data Beyond managing data, a web API also handles transferring data. A client application will make a request for some data. Our web API must contain controller files that can handle the requests. As a part of handling the request, the controller file must understand the request, access the requested data, package the data in an accepted format, and send the package as a response to the client application.\nHere’s an overview of the steps to transfer data between a web API and client application:\nA request for data comes from a client application to the API. A controller file in the API catches the request. The controller determines if the request is valid. The controller transfers data from the database to an object, via the ORM. The controller transforms the object into a package the client application can work with. The controller responds to the client with the packaged data. Representation of Data Presentation vs Representation As mentioned above, the client application presents the data to the end-user. However, the client relies on consuming a representation of data from the web API. Presentation is the rendered combination of data and visual styling intended for end-users.\nThe client application needs to know what format the data is in so that it can be transformed into a human readable presentation (HTML/CSS). A web API packages data into a format the client application accepts.\nThis format is called the representation of the data. The client application team and the web API team must agree to the underlying data format. A best practice is to use a universal representation widely accepted by client applications.\nUniversal Representation It is necessary to adopt a universal representation because web APIs and client applications may be written in two different programming languages. Your web API may be written in Java/Spring but the client application may be written using JavaScript and React.\nWhile there are many languages and frameworks available in web development, they all support the creation and parsing of JSON. JSON is a standard in web development because it is simple to process in any language, compatible with HTTP, and seamlessly represents the structure of data objects.\nJSON JSON is currently a universal representation of data accepted by client applications. This means our web API packages data requested by a client application as JSON. The web API also transfers this JSON in its communication with a client application.\nLet’s revisit the last two steps from our Web API work flow The controller transforms the object into a JSON representation. The controller responds to the client with the JSON representation. Tip XML is another popular data format. It is now used less commonly than JSON for web API-to-client communications.\nLet’s look at how exactly a client application makes a request and how a web API responds.\nHTTP as The Language of Web APIs HTTP is the protocol used for communication between a web API and a client application. Web APIs communicate over a network. The most common protocol of the internet is HTTP, so it comes as no surprise that HTTP is the language of web APIs. Similarly, our MVC applications use HTTP as the protocol for an end-user to access the application. HTTP also facilitates the communication between a client application and a web API.\nTip We will refer to web APIs as APIs going forward, since the web prefix is implied.\nHere’s a refresher on the basics of HTTP :\nIs a stateless request/response protocol. Requests and responses may include HTTP bodies. Responses always contain a three digit HTTP status code. Requests and responses always include HTTP headers. We call HTTP a stateless protocol. State can be a complex concept that refers to a number of things. We’ll explore some aspects of it in more depth on the next page.\nIn the context of HTTP, think of state as information about application data that is transferred via HTTP bodies, HTTP status codes, and HTTP headers.\nBodies An HTTP body can contain a large number of different media types, known as MIME types . A MIME type is associated with the HTTP header Content-Type. This header instructs the recipient of the HTTP request/response on what MIME type the HTTP body contains. We’ve seen a Content-Type:text/html HTTP header before.\nExample 1 2 3 4 5 6 7 8 9 10 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eMy Web Page\u003c/title\u003e content \u003c/head\u003e \u003cbody\u003e content \u003c/body\u003e \u003c/html\u003e This is the header for HTML documents and is used throughout the web. APIs send representations of data in the format of JSON requiring the header Content-Type to be application/json. This allows us to pass the state of the data as the HTTP body.\n1 2 3 4 5 6 7 8 { \"title\": \"An Astronaut's Guide to Life on Earth\", \"author\": \"Chris Hadfield\", \"ISBN\": 9780316253017, \"year_published\": 2013, \"subject\": [\"Hadfield, Chris\", \"Astronauts\", \"Biography\"], \"available\": true } The HTTP body may include JSON that represents the data being passed between an API and client application. Remember, not all requests/responses include HTTP bodies.\nStatus Codes The next HTTP component that transfers state is the HTTP status code. The HTTP status code is included as a part of every HTTP response.\nThe status code is the API’s way of telling the client application how their initial request was handled. HTTP response status codes are a part of the HTTP spec and their usage goes beyond API design.\nHowever, many of their codes have been adopted as a standard within API design.\nStatus Code Group Commonly Used Description 2XX 200, 201, 204 request was successful 3XX 301, 302 request was redirected 4XX 400, 401, 403, 404, 405 client error 5XX 500, 502, 504 server error Headers The final HTTP component that transfers state are the HTTP headers. Any number of headers can be included in a request or response. We saw the Content-Type header above. This is the header that informs the API (request header) or client application (response header) of the format of the data included in the body.\nTip A client can specify which Content-Type they want to receive in the API response using the Accept request header.\nAPI Design The design of an API is a contract that defines how the client and API interact with data. The API is responsible for upholding the data management and transfer behaviors of the contract. The client application is responsible for consuming (via AJAX requests) an API according to the contract.\nAs long as both sides of the interface (the client and API logic) uphold the contract, then front and back-end teams can operate independently. This provides the following freedoms:\nFront-end developers can choose, or change, the internal styling, libraries, frameworks and design patterns. Back-end developers can choose, or change, the internal server language, libraries, frameworks and design patterns. Both sides can choose, or change, their external hosting infrastructure at any time without affecting the other. Both sides can make and deploy changes to their code bases at any time, without needing to coordinate with, or wait for, the other. Only when a change must be made to either the client AJAX requests or API behavior do the two teams need to communicate and agree upon a new contract. Up next, we discuss how following the REST pattern of API design offers consistency and simplicity in application development.\nCheck Your Understanding Question True or False: Web API programmers must be knowledgeable in HTML/CSS/Javascript to create a client application.\nQuestion Match the class of HTTP response codes to the approximate definition:\n2XX, 3XX, 4XX, 5XX\nRequest is valid, but server cannot receive and accept it.\nRequest received and accepted.\nDue to the request containing an error, it cannot be received.\nAnother action needs to be done to fulfill request.",
    "description": "An API, or application programming interface, is a set of rules that allow one application to communicate with another application.\nWeb APIs are how applications communicate with other applications over a network. Throughout the remainder of this chapter, we will explore web APIs and a pattern for organizing them called REST.\nREST is an application design pattern, not unlike MVC.\nREST, however, relies on an abstract concept called application state that we’ll cover in more detail on the following pages.",
    "tags": [],
    "title": "Web APIs",
    "uri": "/web-api-rest/reading/web-api/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "The first relationship we implement will be between the Event and EventCategory classes. We will allow multiple events to be in the same category, but each event will only have one category. Thus, this will be a many-to-one relationship.\nBefore diving in, let’s reduce repetition in our persistent classes, that is, let’s DRY out our code.\nCreating an AbstractEntity - Video Note The starter code for this video is found at the event-category branch of the CodingEventsJava repo. The final code presented in this video is found on the abstract-entity branch . As always, code along to the videos on your own coding-events project.\nCreating an AbstractEntity - Text The steps needed to implement AbstractEntity are outlined in studio in the previous chapter.\nSetting Up the Relationship - Video We are now ready to create a relationship between Event and EventCategory.\nNote The starter code for this video is found at the abstract-entity branch of the CodingEventsJava repo. The final code presented in this video is found on the many-to-one branch . As always, code along to the videos on your own codingevents project.\nSetting Up the Relationship - Text Our many-to-one relationship is established in the Event class; each event will have one category, and there may be many events in a given category.\nCurrently, similar functionality is enabled via the EventType field of Event. However, EventType is an enum, which means that new values can not be added without changing the code and re-compiling. Using the persistent EventCategory class to organize events will be a much more flexible and user-friendly approach.\nReplacing EventType With EventCategory In the Event class, replace the type field with a new private field of type EventCategory:\nprivate EventCategory eventCategory;This will introduce compiler errors wherever type is referenced. We will fix these shortly.\nFirst, however, update Event so that:\nIts main constructor (i.e. NOT the no-arg constructor) takes a parameter of type EventCategory and uses it to initialize eventCategory. It has a getter/setter pair for eventCategory. The eventCategory field has the @NotNull validation annotation, along with an appropriate message. This establishes a relationship between the two classes, but that relationship is not yet persistent. To configure Hibernate to keep track of this relationship in the database, we add the @ManyToOne annotation to eventCategory.\n@ManyToOne @NotNull(message = \"Category is required\") private EventCategory eventCategory;This annotation informs Hibernate that there can be many events for each category, but only one category per event.\nBefore we can start up the app and test our changes, we need to remove the code that references the deleted type field. A quick way to find these references is to find EventType in the Project pane of IntelliJ, right-click, and select Find Usages. This will open a pane listing each location where EventType occurs in our project, whether that is an object of that type or a direct reference to the class itself.\nThe first occurrence is in EventController.displayCreateEventForm:\nmodel.addAttribute(\"types\", EventType.values());This line passes a collection of all of the values of EventType into the view, to be rendered in the form used to create new events.\nSince we are now using EventCategory to group events, our code should instead be passing in all of the category objects in our app. To fetch category objects, we need an instance of EventCategoryRepository in our controller. Add an @Autowired instance to the top of the controller:\n@Autowired private EventCategoryRepository eventCategoryRepository;Now, use the repository to fetch all saved categories:\nmodel.addAttribute(\"categories\", eventCategoryRepository.findAll());This line replaces the line references EventType.values(). Notice that we have relabeled this attribute \"categories\" to be more consistent. This also requires updating the events/create.html template:\n27 28 29 30 31 32 33 34 35 36 37 \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eCategory \u003cselect th:field=\"${event.eventCategory}\"\u003e \u003coption th:each=\"eventCategory : ${categories}\" th:value=\"${eventCategory.id}\" th:text=\"${eventCategory.name}\" \u003e\u003c/option\u003e \u003c/select\u003e \u003cp class=\"error\" th:errors=\"${event.eventCategory}\"\u003e\u003c/p\u003e \u003c/label\u003e \u003c/div\u003e This new template code includes several changes:\nThe select is now bound to the field eventCategory. The loop references categories and has an updated iterator variable name, eventCategory. The value of the select is now eventCategory.id. This allows model binding to occur upon form submission. Spring Boot will determine the category object to assign to the new event object by referencing the id. The text for each option is now eventCategory.name. The error message display now references the new field, event.eventCategory. The remaining usages of EventType refer to:\nAn Event constructor parameter. The getter/setter pair for type in Event. An import statement in EventController. The EventType class itself. Removing this unneeded code resolves all remaining compiler errors.\nThe events/index.html template needs to be updated as well, since it still contains a reference to the type field of Event:\n\u003ctd th:text=\"${event.type}\"\u003e\u003c/td\u003eThis usage wasn’t found by IntelliJ because templates do not receive compile-time type checking like classes do. The updated version looks like this:\n\u003ctd th:text=\"${event.eventCategory.name}\"\u003e\u003c/td\u003eTesting and Database Updates Before starting up the application, let’s look at our event table:\nNotice that the type column remains, even though we have deleted the type field from the Event class. The next time we start up the application, Hibernate will attempt to update the schema to match the structure of our updated model class.\nTip Notice that existing events will not have a category, which violates our new @NotNull validation rule. The easiest way to handle this is to delete all rows in event.\nTo delete all events, truncate the event table in MySQL Workbench. (To truncate a SQL table is simply to delete all its rows.) To do this, select the table in the Schemas pane, right-click, and select Truncate Table…\nStart up the application and refresh the view in MySQL Workbench.\nNotice that there is a new column, event_category_id. This new column has type int and is a foreign key column to the event_category table. References to objects in Java are translated into foreign-key references by Hibernate.\nNote You may find it odd that the type column is still present, even after restarting. Hibernate will not drop columns from a table even if that field is removed from the corresponding class.\nHibernate will generally avoid deleting your data, since you may want to keep it around (even if just in the form of a backup). You can simply drop this column yourself.\nTip If your table was not updating upon restarting, make sure you have spring.jpa.hibernate.ddl-auto set to update in application.properties.\nIf we create some new events, we can see precisely how event rows are related to event_category rows.\nNotice that our events have event_category_id values of 12 and 13 (these values may differ slightly in your application). These are foreign keys into the event_category table. For example, in the tables above, the event row with id equal to 14 is related to the event_category row with id equal to 12. This database relationship corresponds to the relationship between objects that was created by Spring Boot when we submitted the form.\nWith this many-to-one relationship in place, we next look at how to establish a persistent one-to-many relationship.\nCheck Your Understanding Question What is the annotation that allows @AbstractEntity to handle logic related to IDs/primary keys of subclasses, yet not be mapped to a database table.\nQuestion You are working on a Spring application tracking elected officials. Your model class, Senator has a many-to-one relationship with another model class, State. To properly configure this relationship in the Hibernate context, what must be present?\nIn Senator, a state field, annotated with @OneToMany In Senator, a state field, annotated with @ManyToOne In State, a senator field, annotated with @OneToMany In State, a senator field, annotated with @ManyToOne ",
    "description": "The first relationship we implement will be between the Event and EventCategory classes. We will allow multiple events to be in the same category, but each event will only have one category. Thus, this will be a many-to-one relationship.\nBefore diving in, let’s reduce repetition in our persistent classes, that is, let’s DRY out our code.\nCreating an AbstractEntity - Video Note The starter code for this video is found at the event-category branch of the CodingEventsJava repo.",
    "tags": [],
    "title": "Creating a Many-to-One Relationship",
    "uri": "/orm-relationships/reading/many-to-one/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping",
    "content": "Now that we have gotten very familiar with our coding-events application, let’s design some additional features. As you work on your coding-events application, you may have been inspired by Meetup ! One of the cool features that Meetup has is that people can sign up for accounts. They can use their Meetup accounts to follow the events they are most interested in and keep track of their calendar of events. To add similar features to coding-events, you need to add a Person class. For the exercises, answer the following questions about what your Person class would look like.\nNote You do not have to code anything to complete these exercises! This is mainly focused on using our design skills to add a new feature to your application.\nYou need to add a Person class to hold necessary info about users of our app. What fields and methods would this class hold? Would you need to add any additional classes to Person to make the app work? If so, what classes would be necessary? What kinds of relationships would Person have to the other classes you already created, such as the Event class? As you dream up answers to these questions, write the answers down in a note or piece of paper. You are now going to write up some documentation for your app!\nAdd a README.md to your repository by navigating to the repository page on your GitHub profile. At the bottom of the page, there is a blue banner asking you to add a README.md. Click the button to do so! You should write three sections. The first should describe the purpose of the app. The second should describe the current state of the app. The third and final section should describe the future improvements you want to make to the app including your notes about the Person class. Check your solution Here is an example of how the README may turn out:\nOur Person class might hold the following fields:\nid (int) - the unique user ID firstName (String) - the user’s first name lastName (String) - the user’s last name email (String) - the user’s email, which will also function as their username password (String) - the user’s password The class would need getters for all of these fields. It could have setters for all fields except id (since it shouldn’t change).\nThe Person class might also have the following references:\nPersonProfile - a class to gather up all of the profile information about the user List\u003cEvents\u003e eventsAttending - to store events the user wants to attend List\u003cEvents\u003e eventsOwned - a different list, to store the events the user has created Person would have a many-to-many relationship with Event via List\u003cEvents\u003e eventsAttending. It would have a one-to-many relationship with Event via List\u003cEvents\u003e eventsOwned.",
    "description": "Now that we have gotten very familiar with our coding-events application, let’s design some additional features. As you work on your coding-events application, you may have been inspired by Meetup ! One of the cool features that Meetup has is that people can sign up for accounts. They can use their Meetup accounts to follow the events they are most interested in and keep track of their calendar of events. To add similar features to coding-events, you need to add a Person class.",
    "tags": [],
    "title": "Exercises: The Early Bird Gets the ORM!",
    "uri": "/orm-relationships/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 11: Rules to the Exceptions",
    "content": "To get started, open up java-web-dev-projects on your machine. The starter code is in the exercises package inside org.launchcode.\nDivide By Zero! The professor you TA for, Professor Jackson, shared with you the code she uses to auto-grade students’ work. She and the other TAs have encountered some problems with the code in the past when they enter the total possible point value for an assignment. Occasionally, they accidentally enter 0 for the total number of possible points and the program encounters a fatal error when trying to divide by 0.\nTo help out with this issue, complete a method called Divide() in Main. The Divide() method takes in two parameters: x and y.\nYour method should return the result of x/y.\nHowever, if y is zero, you should throw an exception. Try to use an ArithmeticException and put your try/catch block in Divide() to test out your error-handling skills. If an exception is caught, make sure to print out a helpful message.\nTest Student Labs After mentioning to Professor Jackson that you would like to get some more practice with exceptions, she offered to let you write some grading software! Before she gives you full control over auto-grading students’ work, she asked if you could write a method called CheckFileExtension(). The CheckFileExtension() method takes in one parameter: fileName.\nCheckFileExtension() should return an integer representing the number of points a student receives for properly submitting a file in Java. If a student’s submitted file ends in .java, they get 1 point. If a student’s submitted file doesn’t end in .java, they get 0 points. If the file submitted is null or an empty string, an exception should be thrown and you should give the student -1 points. What kind of exception is up to you, including to a custom exception!\nIn Main(), Professor Jackson has provided a hashmap of students and the names of their submitted files for you to test out your work. If an exception is caught, make sure to print out the error message.",
    "description": "To get started, open up java-web-dev-projects on your machine. The starter code is in the exercises package inside org.launchcode.\nDivide By Zero! The professor you TA for, Professor Jackson, shared with you the code she uses to auto-grade students’ work. She and the other TAs have encountered some problems with the code in the past when they enter the total possible point value for an assignment. Occasionally, they accidentally enter 0 for the total number of possible points and the program encounters a fatal error when trying to divide by 0.",
    "tags": [],
    "title": "Exercises: Exceptions",
    "uri": "/exceptions/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation",
    "content": "Let’s practice adding more fields onto our event objects and validating them. Create a new branch from your own display-errors branch. Here’s the display-errors branch on CodingEventsJava if you need to get up to speed.\nBelow, we describe some new fields for you to add to the Event class. For each field, consider the following factors:\nWhat will you call your field? Will you need accessors for this field? What type of input should be added to capture the field’s information from the user? Refer to the documentation page to find an appropriate annotation to fit the constraints. What should the error message convey to the user? What, if anything, will you need to update on the controller to account for the new field? Event information to add:\nAdd a field to collect information about where the event will take place. This field should not be null or blank.\nCheck your solution @NotBlank(message=\"Location cannot be left blank.\") private String location; Add a field to collect information about whether an attendee must register for the event or not. For the purposes of validation practice, make this field only able to be marked as true.\nAdd a field to collect information about the number of attendees for the event. Valid values for this field should be any number over zero.\nCheck your solution @Positive(message=\"Number of attendees must be one or more.\") private int numberOfAttendees; Browse the validation annotations to find one to use on another new field of your choosing.",
    "description": "Let’s practice adding more fields onto our event objects and validating them. Create a new branch from your own display-errors branch. Here’s the display-errors branch on CodingEventsJava if you need to get up to speed.\nBelow, we describe some new fields for you to add to the Event class. For each field, consider the following factors:\nWhat will you call your field? Will you need accessors for this field? What type of input should be added to capture the field’s information from the user?",
    "tags": [],
    "title": "Exercises: Model Validation",
    "uri": "/spring-model-validation/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation \u003e Reading",
    "content": "Within the model of a Java web application, we can define validation rules using annotations from the jakarta.validation.constraints package. This package provides a variety of annotations that are useful in common circumstances, and which can be applied to model fields.\nCommon Annotations We’ll use only a few of these annotations, but you can find a full list in the package documentation .\nAnnotation Description Syntax @Size Specifies minimum and/or maximum length for a string. @Size(min = 3, max = 12) @Min Specifies the minimum value of a numeric field. @Min(0) @Max Specifies the maximum value of a numeric field. @Max(365) @Email Specifies that a string field should conform to email formatting standards. @Email @NotNull Specifies that a field may not be null. @NotNull @NotBlank Specifies that a string field contains at least one non-whitespace character. @NotBlank Example To apply the validation rules of the example on the previous page to the fields of a User model class, we can use @Size and @NotBlank.\n@NotBlank @Size(min = 3, max = 12) private String username; @NotBlank @Size(min = 6) private String password; Defining Validation Messages Each of these annotations takes an optional message parameter that allows you to define a user-friendly description to be used when validation fails.\nExample @NotBlank(message = \"Username is required\") @Size(min = 3, max = 12, message = \"Username must be between 3 and 12 characters long\") private String username; @NotBlank(message = \"Password is required\") @Size(min = 6, message = \"Sorry, but the given password is too short. Passwords must be at least 6 characters long.\") private String password; We will see how to ensure these messages are properly displayed in the next section on validating models.\nApplying Validation Annotations - Video Note The starter code for this video is found at the model-binding branch of the CodingEventsJava repo. The final code presented in this video is found on the add-validation-annotations branch . As always, code along to the videos on your own codingevents project.\nApplying Validation Annotations - Text To configure validation on the model-side, we begin by adding validation annotations to each field to which we want to apply constraints.\nFor our Event class, we add @Size and @NotBlank to the name field, and just @Size to the description field.\n16 17 18 19 20 21 @NotBlank(message = \"Name is required.\") @Size(min = 3, max = 50, message = \"Name must be between 3 and 50 characters\") private String name; @Size(max = 500, message = \"Description too long!\") private String description; The min and max parameters for @Size specify the minimum and maximum number of allowed characters, respectively. Omitting either of these means that no min or max will be applied for the field. For our description field, leaving off min effectively makes this field optional.\nEach of our annotations also receives a message parameter, which provides a user-friendly message to display to the user if the particular validation rule fails. We will see how to display these in a view a bit later.\nNext, we add a new field to store a contact email for each event. This is a String named contactEmail. Validating email addresses by directly applying each of the rules that an email must satisfy is extremely difficult. Thankfully, there is an @Email validation annotation that we can apply to our new field.\nAfter adding this new field to our constructor, and generating a getter and setter, our class is done for the moment.\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 public class Event { private int id; private static int nextId = 1; @NotBlank @Size(min = 3, max = 50, message = \"Name must be between 3 and 50 characters\") private String name; @Size(max = 500, message = \"Description too long!\") private String description; @Email(message = \"Invalid email. Try again.\") private String contactEmail; public Event(String name, String description, String contactEmail) { this.name = name; this.description = description; this.contactEmail = contactEmail; this.id = nextId; nextId++; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public String getContactEmail() { return contactEmail; } public void setContactEmail(String contactEmail) { this.contactEmail = contactEmail; } public int getId() { return id; } @Override public String toString() { return name; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Event event = (Event) o; return id == event.id; } @Override public int hashCode() { return Objects.hash(id); } } Tip The full list of Java validation annotations is in the documentation for jakarta.validation.constraints.\nBefore we can start up our application, we need to add a new column to the events/index template to make contactEmail visible.\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u003ctable class=\"table table-striped\"\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eID\u003c/th\u003e \u003cth\u003eName\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003cth\u003eContact Email\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctr th:each=\"event : ${events}\"\u003e \u003ctd th:text=\"${event.id}\"\u003e\u003c/td\u003e \u003ctd th:text=\"${event.name}\"\u003e\u003c/td\u003e \u003ctd th:text=\"${event.description}\"\u003e\u003c/td\u003e \u003ctd th:text=\"${event.contactEmail}\"\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e Now we can start up our application and test. Submitting an empty form at /events/create still results in an event being created, which may not be what you were expecting.\nRather than a bug, this is expected behavior. Recall that validation involves both the model and controller, but we have not modified the controller in any way. Validation annotations simply define the validation rules that should be used to check data. The responsibility of checking the data before saving a new event lies with the controller.\nIn the next section, we’ll modify the controller to properly check for valid data.\nCheck Your Understanding Question True or False: When using @Size you must provide both min and max arguments.\nQuestion True or False: Adding validation annotations to a model ensures that bad data is not saved.",
    "description": "Within the model of a Java web application, we can define validation rules using annotations from the jakarta.validation.constraints package. This package provides a variety of annotations that are useful in common circumstances, and which can be applied to model fields.\nCommon Annotations We’ll use only a few of these annotations, but you can find a full list in the package documentation .\nAnnotation Description Syntax @Size Specifies minimum and/or maximum length for a string.",
    "tags": [],
    "title": "Validation Annotations",
    "uri": "/spring-model-validation/reading/validation-annotations/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 12: Tools in Intellij \u003e Reading",
    "content": " Watch this video to learn the basics of the debugging tools available in IntelliJ. If you want to follow along, Chris is working with ArrayListGradebook from the Control Flow and Collections chapter and the HelloMethods and Message from Classes and Objects, Part 2 chapter . You should have already downloaded this code from java-web-dev-projects.\nNote The video is using an older version of IntelliJ.\nThe overall functionality of the debugging pane is still there, however, you may have to explore the location of buttons.\nWe recommend hovering over each icon and looking at the names of each.\nIntelliJ has documentation and videos exploring their debugger if you are curious.\nSteps to Find and Diagnose Logical Bugs Set a breakpoint where you want to pause the execution of the code. This will provide a more detailed look at what the program is doing at this point. Right-click in the text editing window to add a breakpoint to your code. Run your program in Debug mode. Inspect the values of your variables in the Debugger Pane. If needed, use the Add/Watch button to watch a specific expression as your program executes. You can also set a conditional breakpoint to pause the execution of the code when a certain condition is a method. Control the Flow of Execution Step-over button executes a given line then steps to the next executable line Step-into button allows you to review a called method and see what is going to line within the method Step-out-of button allows you to move out of the method you stepped into and resume stepping through the main code Variables Pane allows you to examine how variables are manipulated within your code. Also allows you to identify specific Watch expressions Frames Pane tracks any method calls and threads in your code line by line. Best used with breakpoints. Advantage of Debugger Over Printing to the Console The debugger lets you look at all the values in your program instead of just guessing which values you want to track via logging to the console.\nCheck Your Understanding Question What is a breakpoint?\nA point in our code where the debugger will stop running and provide information about the current state. A point in our code that we anticipate will result in an exception or error. A point in our code where we include a print statement to see what’s going on. A point in our code where we want to throw the computer out of a window because nothing works. ",
    "description": "Watch this video to learn the basics of the debugging tools available in IntelliJ. If you want to follow along, Chris is working with ArrayListGradebook from the Control Flow and Collections chapter and the HelloMethods and Message from Classes and Objects, Part 2 chapter . You should have already downloaded this code from java-web-dev-projects.\nNote The video is using an older version of IntelliJ.\nThe overall functionality of the debugging pane is still there, however, you may have to explore the location of buttons.",
    "tags": [],
    "title": "Debugging in IntelliJ",
    "uri": "/tools-in-intellij/reading/debugging/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 9: Spring Into MVC \u003e Reading",
    "content": "Spring Boot is a framework used to build Java web applications that implement the MVC pattern. For more about Spring, check out Spring IO .\nAs you code along with the videos, you will be working on your own project. Should you want to review a step or double-check your code, fork LaunchCode’s hello-spring-demo repository to see what the code looked like at each stage. The repository is up on Github . The starter branch contains the code after creation and also shows the starting point for the next chapter.\nWe suggest you create and checkout a new branch in your hello-spring repository for each video lesson. This will help you return to earlier states of your application to review your work, and is a convenient opportunity to practice your git workflow.\nInitialize a Spring Boot Project - Video Note In the video, Chris changes some Gradle configurations to use Java version 13 and Gradle version 6 for his project. However, this course uses Java version 17, which is compatible with most versions of Gradle beyond 7.x.x.\nInitialize a Spring Boot Project - Text Go to start.spring.io .\nFor Project, select Gradle - Groovy Project.\nFor Language, select Java.\nFor Spring Boot, select the most recent non-SNAPSHOT release.\nFor Project Metadata/Group, enter org.launchcode.\nNote You can use whatever package name you want here. The convention is topleveldomain.domainname. In other words, the reverse of what you would see in a URL.\nFor Project Metadata/Artifact, enter hello-spring.\nNote This will also be the Name of your project. It will be added to the Package name as well.\nFor Project Metadata/Packaging, select Jar.\nFor Project Metadata/Java, select 17.\nFor Dependencies, search for and add the following: Spring Web, and Spring Boot DevTools.\nNote For some projects in this book, you’ll also need to add ThymeLeaf and Validation as dependencies.\nClick Generate to create a .zip file of the project starter code.\nSpring in IntelliJ Move the downloaded, unzipped folder from your downloads folder into another location such as ClassWork or your home directory. Start IntelliJ. Select Open and browse to where you put the downloaded project. Unzip the project and select to import the top-level folder of the new Spring project. Tip Below are some troubleshooting tips we’ve found to be helpful. If these are not relevant to you and you experience issues, reach out to course staff for more support.\nAfter you select to open the Spring project, if you encounter an alert that the selected folder is not empty, choose the option to overwrite it.\nIf you see a Gradle build popup, click Import Gradle Project. This popup is fairly small and usually located in the lower right corner of the window. After selecting import, you may be prompted again and should click the Use auto-import box. Leave other boxes as default.\nYou may see a pop-up in the lower left-hand corner in your Event Log that reads: Unindexed remote maven repositories found.\nSelect Open repositories list in the Event Log message. This will open the Preferences (or Settings for Windows users) window to Build, Execution, Deployment \u003e Build Tools \u003e Maven \u003e Repositories . Select the Maven repository (https://repo1.maven.org/maven2 ) and click Update on the side. Please note that this update may last an hour or more. The Spring Project Structure The Spring Initializr gives us a number of helpful files and directories to get our Spring project up and running.\nWithin the src directory, you’ll find a familiar setup with both a main and test directory. Inside of main will be a java folder to house your packages and classes. Inside the java folder is a HelloSpringApplication. Opening this for the first time, you’ll likely see some import errors that can be resolved by clicking on the context menu to add the corresponding library to the classpath. Expanding the main method shows you the line that allows the application to run. We’ll run the app in the section below but won’t be working with much else with the main method in this course.\nYou’ll also find that there is a resources folder in main. resources is meant to hold your non-java code.\nOutside of src, a .gitignore contains the basic items of our project that Spring expects to not be version controlled. These are files created by the IDE, the compiled code in the .build directory, and the gradle .jar and directory.\nGradle Gradle is a Java tool that handles much of the work related to building and deploying software applications in Java. Your Spring project contains a file called build.gradle. As with most new tools, you do not need to know everything that this file does. For now, the takeaway is that Gradle manages the external dependencies in our project.\nDo you remember specifying the dependencies of the Spring project? Scroll down to the bottom of your build.gradle file and you will see these items specified in a structure called dependencies.\ndependencies { implementation 'org.springframework.boot:spring-boot-starter-web' developmentOnly 'org.springframework.boot:spring-boot-devtools' testImplementation 'org.springframework.boot:spring-boot-starter-test' }Gradle fetches these external packages from another location on the Internet so that we can use them in our project locally. That location is called the Maven central repository. The Maven central repository is a decentralized place for developers to post their code for others to use.\nBefore Running a Spring Project Before running your project, we need to check the configuration of a few items.\nIn build.gradle, locate an item called sourceCompatibility. If it’s value is not equal to 17, change it and save the file.\nIn the gradle directory, open the subdirectory, wrapper, and then the file gradle-wrapper.properties inside of it. Ensure that the distributionUrl includes a gradle version of at least 7.0.\nOpen the test class, HelloSpringApplicationTests located in src/test/java/org.launchcode.hellospring. Run the single test. If you experience a JDK error, click on the Gradle Settings icon in the right-hand gradle pane and ensure that the Gradle JVM is using Java 17.\nRunning a Spring Project To run the application, click on the Gradle icon on the side of your IntelliJ window. If you don’t see the Gradle side bar, click the panel icon in the bottom left corner of your window and select Gradle.\nOnce the Gradle panel is opened, go into Tasks. Here you’ll find the various tasks that Gradle can do for your project. Inside Tasks, open application and double-click bootRun. This will run our Spring Boot application.\nOnce the bootRun task is executed, you should see a new panel with running output about Tomcat.\nKeep an eye out for a message that resembles:\nStarted HelloSpringApplication in 1.739 seconds Note If you do not see this message at all after a while, check that you are looking at the correct pane by toggling between the different views with the options to the left of your output window.\nWhile this message will change depending on the application you are running, this message indicates that the Spring Boot started up successfully. You’ll see an error message or a stack trace if there is an issue with your project preventing it from starting.\nYou’ll also notice a message in the output:\nTomcat started on port(s): 8080 ... Tomcat is the embedded web server within your Spring application. So this tells us that Tomcat is listening for requests on local port 8080. You can then visit the corresponding web page at localhost:8080. Right now, you’ll see an error page, but we’ll fix that soon. Now go ahead and stop the application by hitting the red square on the left side of the Run pane.\nTip There is also a stop button up at the top right of the IntelliJ window.\nCheck Your Understanding Question What is the name of the task to start a Spring Boot application?\nGradle bootRun run Maven Question True/False: All custom code in a Spring Boot application is located in the main method.",
    "description": "Spring Boot is a framework used to build Java web applications that implement the MVC pattern. For more about Spring, check out Spring IO .\nAs you code along with the videos, you will be working on your own project. Should you want to review a step or double-check your code, fork LaunchCode’s hello-spring-demo repository to see what the code looked like at each stage. The repository is up on Github .",
    "tags": [],
    "title": "Initialize Spring",
    "uri": "/spring-intro/reading/initialize/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 9: Spring Into MVC",
    "content": " Design Patterns, MVC, and Spring, Oh My! Initialize Spring ",
    "description": " Design Patterns, MVC, and Spring, Oh My! Initialize Spring ",
    "tags": [],
    "title": "Reading",
    "uri": "/spring-intro/reading/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 6: Unit Testing",
    "content": "Work on these exercises in the IntelliJ car-exercises project in java-web-dev-projects/unit-testing/exercises. You will update your CarTest.java file by adding more test cases.\ntestGasTankAfterDriving() Add a test for the third TODO, “gasTankLevel is accurate after driving within tank range”.\nYour test must use the Car method drive()\ntest_car.drive(50); With a value of 50 miles passed into drive(), we expect test_car to have a gasTankLevel of 9.\nassertEquals(9, test_car.getGasTankLevel(), .001); Check your solution @Test public void testGasTankAfterDriving() { test_car.drive(50); assertEquals(9, test_car.getGasTankLevel(),.001); } testGasTankAfterExceedingTankRange() Add a test for the fourth TODO, “gasTankLevel is accurate after attempting to drive past tank range”.\nYou’re on your own for this one. You’ll need to simulate the Car traveling farther than it’s gasTankLevel allows. Check your solution @Test public void testGasTankAfterExceedingTankRange() { test_car.drive(501); assertEquals(test_car.getGasTankLevel(), 0, .001); } testGasOverfillException() The test for our last TODO is a little different. We are going to perform an action on our car object, and we are expecting the object to throw an error. In this case, we are going to attempt to add gas to our car that exceeds the gas tank size.\nFirst, we’ll add some code to our test to tell JUnit to expect an exception.\n//TODO: can't have more gas than tank size, expect an exception @Test() public void testGasOverfillException() { assertthrows(IllegalArgumentException.class, () -\u003e ); }This lets JUnit know that this test should pass if an IllegalArgumentException is thrown at any point during this test.\nUpdate the Car class to include an addGas() method.\npublic void addGas(double gas) { this.setGasTankLevel(gas + this.getGasTankLevel()); } Back in CarTest, implement the new addGas() method and what should happen if the exception is thrown after the -\u003e syntax using this code: test_car.addGas(5), \"Shouldn't get here, car cannot have more gas in tank than the size of the tank\". The string will be displayed if the test fails.\nRun the test. It should fail! In the output is an unexpected exception. This test was expecting an IllegalArgumentException, but it got an AssertionError exception. This caused the test to fail.\nWe need to refactor Car to throw an exception when too much gas is added to the tank. Find the setGasTankLevel method and modify it:\npublic void setGasTankLevel(double gasTankLevel) { if (gasTankLevel \u003e this.getGasTankSize()) { throw new IllegalArgumentException(\"Can't exceed tank size\"); } this.gasTankLevel = gasTankLevel; } Now, run the test - it should pass!\nCheck your solution @Test public void testGasOverfillException() { assertThrows(IllegalArgumentException.class, () -\u003e test_car.addGas(5), \"Shouldn't get here, car cannot have more gas in tank than the size of the tank\" ); } ",
    "description": "Work on these exercises in the IntelliJ car-exercises project in java-web-dev-projects/unit-testing/exercises. You will update your CarTest.java file by adding more test cases.\ntestGasTankAfterDriving() Add a test for the third TODO, “gasTankLevel is accurate after driving within tank range”.\nYour test must use the Car method drive()\ntest_car.drive(50); With a value of 50 miles passed into drive(), we expect test_car to have a gasTankLevel of 9.\nassertEquals(9, test_car.getGasTankLevel(), .001); Check your solution @Test public void testGasTankAfterDriving() { test_car.",
    "tags": [],
    "title": "Exercises: Unit Testing",
    "uri": "/unit-testing/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 6: Unit Testing \u003e Reading",
    "content": "JUnit is a library that provides the classes, methods, and assertions for writing and executing unit tests in Java. In this course, we use JUnit 5.\nJava Annotations On the topic of unit testing, the annotation @Test is used to indicate that a public void method should be treated as a test case.\nIn Java, annotations are formalized bits of information about a program. They operate somewhere between actual code syntax and a comment on the code. Annotations do not directly affect the code they annotate, but they do supply information to the compiler. Annotations are indicated with an @ symbol. We will provide an example in the walkthrough below.\nTesting Setup Whenever you have set up a new project in IntelliJ, you may have noticed that in addition to main, there is a test directory. Before you start adding tests, you need to check that JUnit is already set up and ready to go.\nOpen up build.gradle.\nWithin dependencies, if JUnit is already configured, you will see something similar to the following:\ntestImplementation(platform(\"org.junit:junit-bom:5.9.1\")) testImplementation(\"org.junit.jupiter:junit-jupiter\") If you don’t see anything in dependencies, right-click directly on dependencies. In the resulting menu, select Generate, then Add Dependency.\nAt the bottom of the IntelliJ screen, search for org.junit.jupiter:junit-jupiter. Select “JUnit Jupiter Aggregator” and click Add.\nNote There are a lot of different versions of JUnit as people contribute their own code. Make sure that you have selected “JUnit Jupiter Aggregator”.\nYou may need to wait a moment for IntelliJ to reload with JUnit added to your project. Now you are ready to test!\nWe call external libraries, like JUnit, dependencies. A dependency is a separately developed program or piece of code that another program or piece of code uses to carry it out its function. Our Java tests will depend on JUnit code. In the future, as you build your own Java projects, you will likely use different dependencies.\nmain/Car and test/CarTest Within unit-testing/chapter-example, open the car-example project in IntelliJ. Inside, you’ll see a main directory and test directory. Open the Car class within main and look around. Here, we provide a class Car with basic information about a make, model, gas level, and mileage as well as getters, setters, and a few other methods.\nIn the same directory, you’ll find a Main class with a main method that prints the make and model of a given Car object. Run this class to verify it works. Now, open test/CarTest. It’s empty, save for a few TODOs. Let’s tackle the first TODO to make a new empty test. Starting with an empty test lets us validate that we can use JUnit in our current environment.\n@Test Create the following empty test underneath the first TODO. As usual, be sure write this code rather than copy/paste it:\n1 2 3 4 5 //TODO: add emptyTest so we can configure our runtime environment @Test public void emptyTest() { assertEquals(10,10,.001); } Once written, you likely need to add these import statements at the top of your file:\n1 2 import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.*; Note In some cases, IntelliJ may sense which testing library and method you want to use and add the import statements as you type. If this is the case, just make sure they are the correct paths. Aren’t IDEs wonderful?\nAs we mention above, @Test annotates the method to signal it as a test case. We need to add the appropriate import statement in order to take advantage of this annotation.\nOur empty test is aptly named emptyTest(), a description of its role. This test does not follow the AAA rule from our testing best practices, as it jumps straight to asserting. Nor is it relevant, for that matter.\nAgain, the IDE comes in handy, inserting the names of each of our parameters, “expected:”, “actual:”, and “delta:”. This empty test is simply asserting an expected value of 10 to equal an actual value of 10, with an accepted .001 variance.\nNote The third argument, called delta, is the amount of allowed difference between the expected and actual values. If the difference between the two values is within that range, then the test still passes. This argument is optional for some comparisons and required for others. One scenario in which it is required is when comparing doubles.\nWhy is it required? Well, that’s kind of a long story. Some number types are floating-point numbers . Due to the nature of their storage, these types carry with them a certain degree of inaccuracy . In brief, the delta argument ensures we can still reasonably compare two doubles.\nOf course, 10 equals 10. But let’s run it so we know our test runner works. Click the green arrow to the left of public class CarTest to run the test. Once run, you’ll see a new output panel with a green check mark indicating the test passed and a message stating the test passed. We now know how the test runner behaves when a test passes and begin the real work of unit testing the Car class.\nUnder your second TODO, write a test to verify that the constructor sets the gasTankLevel property.\n1 2 3 4 5 6 //TODO: constructor sets gasTankLevel properly @Test public void testInitialGasTank() { Car test_car = new Car(\"Toyota\", \"Prius\", 10, 50); assertEquals(10, test_car.getGasTankLevel(), .001); } Here, we give the test a descriptive name, testInitialGasTank(), initialize a new Car object, and test that the constructor correctly handles the gasTankLevel property. Run CarTest to see that both tests pass.\nTip If you want to run only one test, click the green arrow next to the test method’s name.\n@BeforeEach @BeforeEach is another annotation we can use to help in test cases. The @BeforeEach annotation can be used to set up some data or a condition that you want to have for every test in a given class. In the case of CarTest, it would be nice to not need to create a new Car instance for each test we write.\nIn your testInitialGasTank() method, remove the line initiating test_car. Above your first test, add the following @BeforeEach method:\n1 2 3 4 5 6 Car test_car; @BeforeEach public void createCarObject() { test_car = new Car(\"Toyota\", \"Prius\", 10, 50); } Did IntelliJ prompt you to import @BeforeEach? Did it import the annotation as you were writing the method? If not, add it:\nimport org.junit.jupiter.api.BeforeEach;Now, run the test file and ensure your test still passes.\n@AfterEach @AfterEach, conversely, defines a set of conditions to be met after each test in a suite is run.\nNote A good or frequent use case for @AfterEach would be if you needed to test some code that requires access to a database. Here, you could open the database connection with a @BeforeEach method and close the connection in an @AfterEach method.\nCommon Assertion Methods In addition to the very commonly used assertEquals() method you see above, here are a few other methods you should have in your unit testing playbook.\nAssertion Description assertEquals(expected, actual, optional_delta) Asserts that two values, expected and actual, are equal to each other (optionally, within a given range of difference) assertFalse(condition) Asserts that a given condition is false assertTrue(condition) Asserts that a given condition is true assertNotNull(object) Asserts that a given object is not null Check Your Understanding Question Write another version of testInitialGasTank() using assertFalse(), comparing the value to 0.\nQuestion Write another version of testInitialGasTank() using assertTrue().",
    "description": "JUnit is a library that provides the classes, methods, and assertions for writing and executing unit tests in Java. In this course, we use JUnit 5.\nJava Annotations On the topic of unit testing, the annotation @Test is used to indicate that a public void method should be treated as a test case.\nIn Java, annotations are formalized bits of information about a program. They operate somewhere between actual code syntax and a comment on the code.",
    "tags": [],
    "title": "JUnit",
    "uri": "/unit-testing/reading/junit/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections",
    "content": " Work on these exercises in the java-web-dev-projects repo,creating a new class for each item. You may call these classes whatever you like, but remember to use the proper Java naming conventions.\nNavigate inside control-flow-and-collections within java-web-dev-projects and create a new folder called exercises. Create a new IntelliJ project within your new exercises directory called collections-exercises. Now you are ready to start creating new classes and practice using different collections!\nArray Practice Create and initialize an array with the following values in a single line: 1, 1, 2, 3, 5, 8.\nCheck your solution int[] integerArray = {1, 1, 2, 3, 5, 8}; Loop through the array and print out each value, then modify the loop to only print the odd numbers.\nFor this exercise, use the string “I would not, could not, in a box. I would not, could not with a fox. I will not eat them in a house. I will not eat them with a mouse.” Use the split method to divide the string at each space and store the individual words in an array. If you need to review the method syntax, look back at the string methods table.\nCheck your solution String phrase = \"I would not, could not, in a box. I would not, could not with a fox. I will not eat them in a house. I will not eat them with a mouse.\"; String[] words = phrase.split(\" \"); System.out.println(Arrays.toString(words)); Print the array of words to verify that your code works. The syntax is:\nSystem.out.println(Arrays.toString(arrayName)); Repeat steps 3 and 4, but change the delimiter to split the string into separate sentences.\nCheck your solution String[] sentences = phrase.split(\"\\\\.\"); System.out.println(Arrays.toString(sentences)); Note Some characters, like a period \".\", have special meanings when used with the split method. They cannot be used as-is for the delimiter.\nTo use these characters as the delimiter, we must escape their special meanings. Instead of .split(\".\"), we need to use .split(\"\\\\.\").\nArrayList Practice Write a static method to find the sum of all the even numbers in an ArrayList. Within main, create a list with at least 10 integers and call your method on the list.\nCheck your solution 1 2 3 4 5 6 7 8 9 public static int sumEven(ArrayList\u003cInteger\u003e arr) { int total = 0; for (int integer : arr) { if (integer % 2 == 0) { total += integer; } } return total; } Write a static method to print out each word in a list that has exactly 5 letters.\nModify your code to prompt the user to enter the word length for the search.\nCheck your solution System.out.println(\"Enter a word length: \"); int numChars = input.nextInt(); BONUS: Instead of creating our own list of words, what if we want to use the string from the Array Practice section? Search “Java convert String to ArrayList” online to see how to split a string into the more flexible ArrayList collection.\nHashMap Practice Make a program similar to GradebookHashMap that does the following:\nIt takes in student names and ID numbers (as integers) instead of names and grades. The keys should be the IDs and the values should be the names. Modify the roster printing code accordingly. Check your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 do { System.out.print(\"Student: \"); newStudent = input.nextLine(); if (!newStudent.equals(\"\")) { System.out.print(\"ID: \"); Integer newID = input.nextInt(); classRoster.put(newID, newStudent); input.nextLine(); } } while(!newStudent.equals(\"\")); input.close(); System.out.println(\"\\nClass roster:\"); for (Map.Entry\u003cInteger, String\u003e student : classRoster.entrySet()) { System.out.println(student.getValue() + \"'s ID: \" + student.getKey()); } System.out.println(\"Number of students in roster: \" + classRoster.size()); ",
    "description": "Work on these exercises in the java-web-dev-projects repo,creating a new class for each item. You may call these classes whatever you like, but remember to use the proper Java naming conventions.\nNavigate inside control-flow-and-collections within java-web-dev-projects and create a new folder called exercises. Create a new IntelliJ project within your new exercises directory called collections-exercises. Now you are ready to start creating new classes and practice using different collections!",
    "tags": [],
    "title": "Exercises: Control Flow and Collections",
    "uri": "/control-flow-and-collections/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections \u003e Reading",
    "content": "for Loop In Java we write a definite loop (aka a for loop) as:\n1 2 3 4 5 public static void main(String [] args) { for (int i = 0; i \u003c 10; i++ ) { System.out.println(i); } } Output:\n0 1 2 3 4 5 6 7 8 9 Note You may not be familiar with the expression i++ since it is not found in all languages. The ++ is an increment operator that has the same effect as i += 1. In this example, since the ++ comes after i, we call it a postfix increment operator. There is also a -- decrement operator in Java. For more information, see Increment and Decrement Operators .\nThe Java for loop gives you explicit control over the starting, stopping, and stepping of the loop variable inside the parentheses. You can think of it this way:\n1 2 3 4 5 for (start clause; stop clause; step clause) { statement1 statement2 ... } If you want to start at 100, stop at 0 and count backward by 5, the loop is written as:\n1 2 3 for (int i = 100; i \u003e= 0; i -= 5) { System.out.println(i); } Output:\n100 95 90 ...for-each Loop Java also provides a syntax to iterate over any sequence or collection, such as an Array:\n1 2 3 4 5 6 7 public static void main(String [] args) { int nums[] = {1, 1, 2, 3, 5, 8, 13, 21}; for (int i : nums) { System.out.println(i); } } Here, the loop variable moves through the items in the Array of integers, nums[]. The syntax here uses a colon symbol, :. This type of loop is known as a for-each loop.\nTip When considering this structure, it can be helpful to read the code sample above to yourself as “For each integer in Array nums…”.\nThis loop version also works with a String, where we can convert the String to an Array of characters:\n1 2 3 4 5 String msg = \"Hello World\"; for (char c : msg.toCharArray()) { System.out.println(c); } As you see, to iterate through a String in this way, Java requires an extra String method, .toCharArray(), to convert the String to an Array of characters.\nwhile Loop Java also supports the while loop, or indefinite loop. A while loop in Java:\n1 2 3 4 5 6 public static void main(String [] args) { int i = 0; while (i \u003c 3) { i++; } } do-while Loop Java adds an additional, if seldom used, variation of the while loop called the do-while loop. The do-while loop is very similar to while except that the condition is evaluated at the end of the loop rather than the beginning. This ensures that a loop will be executed at least one time. Some programmers prefer this loop in some situations because it avoids an additional assignment prior to the loop.\nFor example:\n1 2 3 4 5 public static void main(String [] args) { do { System.out.println(\"Hello, World\"); } while (false); } Output:\nHello, World Above, the message prints despite the condition never being met.\nBreak Statements in Loops There are instances where you may want to terminate a loop if a given condition is met. In these instances, the break statement comes in handy. For example, say you want to loop through an Array of integers to search for a given value. Once that number is found, you want to quit the loop. You can do the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class testBreak { public static void main(String [] args) { int[] someInts = {1, 10, 2, 3, 5, 8, 10}; int searchTerm = 10; for (int oneInt : someInts) { if (oneInt == searchTerm) { System.out.println(\"Found it!\"); break; } } } } In the code above, instead of the for loop iterating through all the integers in the array, it will stop after it finds the first matching instance. So once it finds the first 10 in the array, it prints “Found it!” and then terminates the loop. If the break statement weren’t there, the loop would continue and when it found the second 10, it would print “Found it!” a second time.\nNote that the break statement terminates the innermost loop that it is contained within. So if you have nested loops and use a break statement within the innermost loop, then it will only terminate that loop and not the outer one. If a break is present in the outer loop, it — and any other block nested within it — is terminated when the break runs.\nContinue Statements in Loops The continue statement is similar to, but importantly different from, the break statement. Like break, it interrupts the normal flow of control of the loop. But unlike break, the continue statement only terminates the current iteration of the loop. So the loop will continue to run from the top (as long as the boolean expression that controls the loop is still true) after a continue statement. Here is an example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class testContinue { public static void main(String [] args) { int[] someInts = {1, 10, 2, 3, 5, 8, 10}; int searchTerm = 10; for (int oneInt : someInts) { if (oneInt == searchTerm) { System.out.println(\"Found it!\"); continue; } System.out.println(\"Not here\"); } } } The above program will print “Not here” on every iteration of the for loop except where the number has been found. So the output looks like this:\nNot here Found it! Not here Not here Not here Not here Found it! Because of the continue statement, the final print statement in the for loop is skipped. If the continue statement weren’t there, the output would look like this instead (notice the extra “Not here” printouts):\nNot here Found it! Not here Not here Not here Not here Not here Found it! Not here Check Your Understanding Question 1 2 3 4 5 char[] chars = {'p', 'l', 'r', 's', 't'}; for (\u003cloop-statement\u003e) { System.out.println(i); } What does the missing \u003cloop-statement\u003e need to be to print each item in chars?\nchar i : chars char i : chars[] char i in chars char i in chars[] Question 1 2 3 do { System.out.println(\"Hello world!\"); } while (3 \u003c 2); How many times does the message print and why?\n0 — The while condition is never true. 1 — The print statement is evaluated before the conditional. infinite times — 3 is less than 2, and the condition is never changed in the loop. ",
    "description": "for Loop In Java we write a definite loop (aka a for loop) as:\n1 2 3 4 5 public static void main(String [] args) { for (int i = 0; i \u003c 10; i++ ) { System.out.println(i); } } Output:\n0 1 2 3 4 5 6 7 8 9 Note You may not be familiar with the expression i++ since it is not found in all languages. The ++ is an increment operator that has the same effect as i += 1.",
    "tags": [],
    "title": "Loops",
    "uri": "/control-flow-and-collections/reading/loops/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": "Exercises As a new Java coder, it might take you some time to recognize the usefulness of interfaces. At first glance, these tools do not seem to provide much benefit over extending a base class, adding instance methods to a class, or overriding a method like toString.\nTo help overcome this, let’s consider a common occurrence—sorting an ArrayList of objects.\nIf the list contains String or numerical entries, then sorting the list is trivial :\nCollections.sort(arrayListName);However, if the elements are custom objects (like Cat), then sorting the list becomes more complicated. This is because the objects may contain multiple fields, any of which could be used as a sorting option. For Cat objects, this could include name, age, or mass.\nGetting Started Work on these exercises in the IntelliJ java-web-dev-projects. You will find the starter code in the exercises package of the interfaces directory. Go ahead and open the folder and take a quick look at the class files.\nYou will practice implementing interfaces by playing around with a small ice cream store. It consists of a refrigerated display Case, which contains a collection of ice cream Flavor objects and a selection of Cone objects.\nTip Did you notice the abstract Ingredient class? This gets extended into Flavor and Cone to help streamline the code.\n1. Sorting Flavors by Name To display a menu for your customers, you need to sort the ice cream flavors alphabetically by their name field. Fortunately, the Comparator interface helps you solve the sorting-objects-by-field problem.\nCreate a Sorting Class Create an new class called FlavorComparator and have it implement the Comparator interface:\npublic class FlavorComparator implements Comparator\u003cFlavor\u003e Notice that IntelliJ flags a couple of errors that you need to fix:\nImport java.util.Comparator. This removes the flag on Comparator. Hover over the line again and select implement methods. Choose the compare option. This adds an @Override method that compares two Flavor objects and always returns 0. Always returning 0 results in no sorting, so replace line 8 with:\nreturn o1.getName().compareTo(o2.getName());This returns an integer (negative, positive, or zero) depending on whether Flavor object o1 or o2 comes first, alphabetically.\nCheck your solution public class FlavorComparator implements Comparator\u003cFlavor\u003e { @Override public int compare(Flavor flavor1, Flavor flavor2) { return flavor1.getName().compareTo(flavor2.getName()); } } Sorting the flavors ArrayList In Main, we declare menu that contains everything in the Case as well as specific flavors and cones collections.\n6 7 8 9 10 11 public static void main(String[] args){ Case menu = new Case(); ArrayList\u003cFlavor\u003e flavors = menu.getFlavors(); ArrayList\u003cCone\u003e cones = menu.getCones(); } To sort the flavors list, first create a new FlavorComparator object.\n6 7 8 9 10 11 public static void main(String[] args){ Case menu = new Case(); ArrayList\u003cFlavor\u003e flavors = menu.getFlavors(); ArrayList\u003cCone\u003e cones = menu.getCones(); Comparator comparator = new FlavorComparator(); } Next, call the sort method on flavors and pass the comparator object as the argument.\n6 7 8 9 10 11 12 13 public static void main(String[] args){ Case menu = new Case(); ArrayList\u003cFlavor\u003e flavors = menu.getFlavors(); ArrayList\u003cCone\u003e cones = menu.getCones(); Comparator comparator = new FlavorComparator(); flavors.sort(comparator); } Iterating through the flavors list before and after the sort shows the results. (The output below displays just the name fields).\nBefore: After: Vanilla Chocolate Chocolate Red Velvet Red Velvet Rocky Road Rocky Road Strawberry Sorbet Strawberry Sorbet Vanilla Note that Main does NOT have to implement the Comparator interface. This only needs to happen in the class that actually uses the compare method.\nTip Instead of declaring and initializing the comparator object, we could combine steps 1 and 2 by using a single statement:\nflavors.sort(new FlavorComparator()); Sorting Cones by Cost Now let’s sort our cones list by cost, from least expensive to most expensive.\nCreate the new class ConeComparator.\nFollow the example above to implement the Comparator interface and evaluate Cone objects by cost.\nIn Main, sort the cones list, then print the elements to the screen to verify the results.\nBefore: After: Waffle: $1.25 Bowl: $0.05 Sugar: $0.75 Wafer: $0.50 Wafer: $0.50 Sugar: $0.75 Bowl: $0.05 Waffle: $1.25 Check your solution Check your solution 1 2 3 4 5 6 7 8 9 10 11 12 public class ConeComparator implements Comparator\u003cCone\u003e { @Override public int compare(Cone cone1, Cone cone2) { if (cone1.getCost() - cone2.getCost() \u003c 0){ return -1; } else if (cone1.getCost() - cone2.getCost() \u003e 0) { return 1; } else { return 0; } } } Troubleshooting Did you get this error?\nThis happens because according to the interface, compare MUST return an integer value, but the cost fields are double type.\nTo fix this, use an if/else if/else block to evaluate o1.getCost() - o2.getCost(). Return a positive integer, negative integer, or 0 depending on the result.\nBonus Exercises Modify FlavorComparator to sort Flavor objects by the number of allergens, from highest to lowest.\nCreate a Topping class that extends Ingredient. Add toppings to the Case constructor, then choose how to sort a toppings array in Main.\nNext Steps In these exercises, you practiced implementing existing interfaces. In the studio activity, you will design and implement your own.",
    "description": "Exercises As a new Java coder, it might take you some time to recognize the usefulness of interfaces. At first glance, these tools do not seem to provide much benefit over extending a base class, adding instance methods to a class, or overriding a method like toString.\nTo help overcome this, let’s consider a common occurrence—sorting an ArrayList of objects.\nIf the list contains String or numerical entries, then sorting the list is trivial :",
    "tags": [],
    "title": "Exercises: Interfaces and Polymorphism",
    "uri": "/interfaces/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "An interface is a formal construction within Java. Interfaces allow us to create a set of behaviors that a class must fulfill. A Java interface may contain:\nConstants (that is, static final fields) Method signatures Static methods Default methods Creating an Interface Method Signatures One really useful aspect of using an interface is the ability to specify method signatures. A method signature includes the name, parameters, and return type of a method, but no body.\nAs part of our cat application, let’s create a method signature, eat, as part of an interface, Feedable.\nExample 1 2 3 4 5 6 public interface Feedable { void eat(); } In the code above, notice the following:\nThat we need to use the interface keyword to define our interface, Feedable. eat only has a signature. We are NOT allowed to provide a body for methods defined in interfaces. eat also does not have an access modifier. Interface members are always public, and while we may use the public modifier, it’s unnecessary. An interface method may NOT have an access modifier that is more restrictive than public. The Feedable interface itself is declared public, which means any other class may use it. We may also leave off public, making the interface package-private, or usable only within the same package. The name is indicative of the behavior that the interface is intended to describe. While this is only a convention, most interfaces have names that are adjectives. Whatever you do, use meaningful names! Static Methods A static method in an interface can contain code in the body. However, a static method cannot contain any references to instance properties in other classes. This means that our static methods should only deal with universal behaviors that are NOT dependent on instance properties, but may be dependent on constants.\nDefault Methods A default method has a body and is a fully-formed method. It is preceded with the default keyword, and it may be overridden by classes implementing the interface.\n1 2 3 4 5 6 7 8 9 public interface MyInterface { void someMethod(); default void someOtherMethod() { // ...code goes here... } } The intended purpose of default methods is to allow programmers to add a method to an interface that has already been released, while not forcing those already using the interface to add new code to their classes. You should avoid using default methods in all situations other than the one described here.\nImplementing an Interface The purpose of an interface is to define a contract of behaviors that classes uphold. In doing so, we say that they “implement the interface”. The syntax for implementation is similar to that for inheritance. Here’s how we can use the Feedable interface in defining our Cat class.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 public class Cat implements Feedable { @Override public void eat() { // method implementation } // ...rest of the class definition... } Since we’ve declared that Cat implements Feedable, we have to provide an implementation for the eat method, with the signature as specified in the interface definition. Note that we use @Override, just as we do when overriding an inherited method in a subclass. Like that situation, using @Override when implementing methods defined in an interface will enable the compiler to check that your method signature does indeed match that of the interface.\nNote 1 2 3 4 public class MyClass extends MySubclass implements MyInterface { // ...code... } As with classes, interfaces define a type that can be used when declaring fields, parameters, and local variables. This allows us to relax the requirements on our code elsewhere, thus making it more extensible and adaptable. If an application is extensible, it is easier for programmers for new capabilities to be added later on. For example, here’s how we might modify our CatOwner class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class CatOwner { private Feedable pet; public CatOwner(Feedable pet) { this.pet = pet; } public void feedTheCat() { // ...code to prepare the cat's meal... pet.eat(); } } Note that we’ve declared the property pet to be of type Feedable. This class assumes that the only behavior of pet that we’ll need within the class is the ability to eat. But if that’s all we need, then we should relax the requirements on the pet property as much as possible. In fact, there’s nothing specific about cats in this class, so we might make our code a step more abstract and flexible by doing the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class PetOwner { private Feedable pet; public PetOwner(Feedable pet) { this.pet = pet; } public void feedThePet() { // ...code to prepare the pet's meal... pet.eat(); } } public class CatOwner extends PetOwner { // code that requires Cat-specific behavior } We’ve created a PetOwner class that encapsulates the behavior for any pet (any Feedable, actually), and have CatOwner extend PetOwner. This allows other classes to extend PetOwner to make, say, a DogOwner that knows how to play fetch with their pet, or a HorseOwner that knows how to ride their pet. It also reduces the dependency of the feedThePet method on the specific type of pet, since it doesn’t need to care.\nTo use this new class design, we can revise the sample code from above as follows:\n1 2 3 4 HouseCat suki = new HouseCat(\"Suki\", 12); CatOwner Annie = new CatOwner(suki); Annie.feedThePet(); While the code usage here remains unchanged except for changing the method name from feedTheCat to the more generic feedThePet, the opportunities for using the classes we’ve built are much wider since the defined classes are no longer dependent on the specific Cat class. Also notice that we’ve used the object suki in a polymorphic way, creating it as a HouseCat, but using it as a Feedable within the CatOwner class.\nNote Like inheritance, interfaces enable polymorphic usage of objects. We can create an object and then use it in different contexts based on the interfaces that it implements.\nInterfaces may not be created like objects are, with new. You may implement an interface, or declare variables and parameters as interface types. You can not, however, create an instance of an interface.\nBenefits of Using Interfaces Once you get used to interfaces, you’ll begin to think more abstractly about which behaviors your code requires rather than which classes your code requires. This means you’ll be able to “code to interfaces” (an OOP principle) instead of coding to classes, and your code will become more flexible and extensible.\nHere are a few benefits of using interfaces:\nYou can only extend one class, but you may implement many interfaces.\nYou can extend a class and implement an interface at the same time.\nBy declaring variables and parameters as interface types, you make your code useful for a much wider variety of situations.\nWhen you declare properties and return types to be interface types, you decouple code using your classes from the actual class types you use. This means that you are free to change the specific implementation of your classes without affecting those using them.\nRemember that you don’t need to start creating interfaces to use their power! As we will cover later in the chapter, when working with collections, we can declare variables and parameters to be interface types if we only need to use specific behaviors such as ordering or iteration.\nCheck Your Understanding Question Choose the appropriate option to fill in the blanks.\nA class can extend _______ class(s) and implement ________ interface(s).\none, one one, more than one more than one, one more than one, more than one Question True/False: An interface can contain a static variable, a final variable, and a static final variable.\nQuestion What keywords are missing from the following interface?\n1 2 3 4 5 6 public Temperature { double final ABSOLUTE_ZERO = -273.15; double convertTemp(); } class interface static private ",
    "description": "An interface is a formal construction within Java. Interfaces allow us to create a set of behaviors that a class must fulfill. A Java interface may contain:\nConstants (that is, static final fields) Method signatures Static methods Default methods Creating an Interface Method Signatures One really useful aspect of using an interface is the ability to specify method signatures. A method signature includes the name, parameters, and return type of a method, but no body.",
    "tags": [],
    "title": "Interfaces",
    "uri": "/interfaces/reading/interfaces/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading",
    "content": "We explored configuring data within classes with fields and properties. Now let’s turn our attention back to class behavior (methods).\nQuick Method Review In the last chapter , we learned that:\nA method belongs to a class and performs an action.\nMethods cannot stand on their own—they must be part of a class.\nTo call a method on an object, use dot notation:\nobjectName.methodName(arguments); Access modifiers apply to methods:\nprivate methods as those that are NOT useful outside of the class but contribute internally to helping the class behave as desired or expected.\npublic methods contain code that other classes need to use when they implement the class containing those methods. Make methods public only when you expect other classes to use them, and when you are committed to maintaining those methods for other programs.\nLet’s take a closer look at two different types of methods—both of which we have used in earlier examples.\nInstance Methods As we learned in the last chapter, instance methods define the behaviors that are unique or specialized to each class. Every object created from a class will carry a copy of these methods.\nInstance methods depend on the data stored in an individual object. If two objects call the same method, the results will vary when the objects contain different data.\nLet’s add a couple more instance methods to our Student class.\nWhat are the behaviors that our Student class should have? To start, it makes sense that when a student takes a class and earns a grade, their data should be updated accordingly. Additionally, it would be nice to easily identify the grade level of a student—freshman, sophomore, junior, or senior.\nThe framework for these new methods is shown in the Student class below, but each method is missing some code. Filling in that code is left for you to do in the chapter exercises.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public class Student { private static int nextStudentId = 1; private String name; private int studentId; private int numberOfCredits; private double gpa; public Student(String name, int studentId, int numberOfCredits, double gpa) { this.name = name; this.studentId = studentId; this.numberOfCredits = numberOfCredits; this.gpa = gpa; } public Student(String name, int studentId) { this(name, studentId, 0, 0); } public Student(String name) { this(name, nextStudentId); nextStudentId++; } public String studentInfo() { return (this.name + \" has a GPA of: \" + this.gpa); } public void addGrade(int courseCredits, double grade) { // Update the appropriate fields: numberOfCredits, gpa } public String getGradeLevel() { // Determine the grade level of the student based on numberOfCredits } /* getters and setters omitted */ } Tip When creating your classes, think about the behaviors that you want to make available, as well as the access level of those methods.\nStatic Methods We’ve already used static methods quite a bit in this course, all the way back to our first Java method:\npublic static void main(String[] args) {}Now let’s examine them in the context of what we’ve recently learned about classes.\nJust like static fields, static methods belong to the class as a whole, and not to any of the specific instances of the class. Thus, they are sometimes also called class methods. A static method is essentially the opposite of an instance method, since the two cases are mutually exclusive. Instance methods rely on each object’s specific data, while static methods must NOT rely on data from a specific object.\nWe call a static method by preceding it with the class name and using dot-notation. Here’s an example that we looked at previously .\nExample HelloMethods.java\n1 2 3 4 5 6 7 8 public class HelloMethods { public static void main(String[] args) { String message = Message.getMessage(\"fr\"); System.out.println(message); } } Message.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class Message { public static String getMessage(String lang) { if (lang.equals(\"sp\")) { return \"¡Hola, Mundo!\"; } else if (lang.equals(\"fr\")) { return \"Bonjour, le monde!\"; } else { return \"Hello, World!\"; } } } The call occurs in line 4: Message.getMessage(\"fr\"). We call the static getMessage without needing an instance of the Message class. Instead, we use the name of the class itself.\nWarning It is technically allowed to call a static method using an instance of a class: myObject.someStaticMethod(). However, best practice recommends using the class name instead: ClassName.someStaticMethod(). This makes it clear to other coders that you are calling a static method.\nA method should be static when it does NOT refer to any instance fields of the containing class (it may refer to static fields, however). These methods tend to be utility-like (e.g. carrying out a calculation, or using or fetching some external resource).\nAccessing Static vs Instance Fields One common error new Java coders encounter reads something like non-static variable cannot be referenced from a static context. This occurs when a static method tries to call an instance variable.\nWhy can’t we do this? Static methods can be called from anywhere (depending on their access modifier), and they do NOT require us to create an object for a particular class. However, these methods must be independent of any values unique to a particular object.\nFor example, if we have a Circle class, then we can define and call a static area method without creating a new object: Circle.area(radius). Since the area of a circle is just, PI*radius*radius, we can pass in the argument when we call the method. The method does not depend on any value stored within a specific Circle object.\nNow let’s assume we define a Car class with an instance variable for color. The value of this field will NOT be the same for every Car object we create. Thus, trying to call a static method like Car.printColor() results in an error. Since there is no single value for color that applies to every object, trying to access it from outside of the class does not work. To print the color of a Car object, we must call the method on that specific object: myCar.printColor().\nInstance fields can only be called by instance methods.\nNote While static methods cannot access instance variables, an instance method CAN access a static variable. Why?\nCheck Your Understanding Question Assume that we add two methods to a Pet class—public String makeNoise() and public static void increaseAge(). Which of the following statements is true?\nThe makeNoise() method can be accessed outside of the Pet class, while the increaseAge() method cannot.\nEach Pet object carries a copy of the makeNoise() method but NOT a copy of the increaseAge() method.\nThe increaseAge() method can be accessed outside of the Pet class, while the makeNoise() method cannot.\nEach Pet object carries a copy of the increaseAge() method but NOT a copy of the makeNoise() method.\nQuestion Explain why it IS possible for an instance method to access a static field.",
    "description": "We explored configuring data within classes with fields and properties. Now let’s turn our attention back to class behavior (methods).\nQuick Method Review In the last chapter , we learned that:\nA method belongs to a class and performs an action.\nMethods cannot stand on their own—they must be part of a class.\nTo call a method on an object, use dot notation:\nobjectName.methodName(arguments); Access modifiers apply to methods:\nprivate methods as those that are NOT useful outside of the class but contribute internally to helping the class behave as desired or expected.",
    "tags": [],
    "title": "Instance and Static Methods",
    "uri": "/classes-part-2/reading/instance-and-static-methods/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Major Concepts By the end of this lesson, you should be able to do the following:\nSet up a Java development environment and execute Java programs Understand Java’s data type system Understand the differences between dynamic and static types Understand the differences between primitive and non-primitive types Write simple Java programs Key Terminology Data Types dynamically typed statically typed type system boxing unboxing autoboxing Some Java Practice encapsulate import Scanner package // / * ... */ More Data Types objects class reference variables methods static methods Content Links Reading Exercises: Data Types Studio: Area of a Circle Next Steps ",
    "description": "Major Concepts By the end of this lesson, you should be able to do the following:\nSet up a Java development environment and execute Java programs Understand Java’s data type system Understand the differences between dynamic and static types Understand the differences between primitive and non-primitive types Write simple Java programs Key Terminology Data Types dynamically typed statically typed type system boxing unboxing autoboxing Some Java Practice encapsulate import Scanner package // / * .",
    "tags": [],
    "title": "Chapter 2: Data Types",
    "uri": "/data-types/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #2: Tech Jobs OO",
    "content": "Sally needs you to build up the remaining classes. In each case, refer to the Employer class for hints on how to structure your code.\nThe Location Class Open the Location.java file. Note that the getters, setters, and custom methods for this class are done, as is the constructor for initializing the id field.\nSally left you a TODO comment with instructions for coding a second constructor:\nIt should call the first constructor to initialize the id field. It must also initialize the value field for a new Location object. The CoreCompetency Class Open the class file. In this case, the constructors and custom methods are ready. Sally needs you to complete the somewhat tedious task of writing the getters and setters for the id and value fields, but NOT for nextID.\nFortunately, IntelliJ has a tool to help with this:\nRight-click in the editor pane and select Generate. Select the Getter and Setter option. Select the value option, then click OK. you should now see the getters and setters. Since the unique value of id is set with the constructors, we only need to add a getter for this field. Select Generate again and use the Getter option for id. Note Want to use fewer clicks? You could always Generate getters and setters for both id and value, and then delete the setID method.\nBe careful, though. If you forget to remove setID, then users can change the id value, which may cause problems in the program.\nThe PositionType Class Open the class file. This time the constructors, getters, and setters are done. Sally’s comments direct you to where you need to add the custom methods.\nCode a toString method that just returns the value of a PositionType object. Use the Generate option again to add the equals and hashCode methods. Refer to the Classes and Objects Part 2 IntelliJ Generator Shortcut section if you need a quick review. Assume that two PositionType objects are equal when their id fields match. Tip Now would be a good time to save, commit, and push your work up to GitHub.\nNext ",
    "description": "Sally needs you to build up the remaining classes. In each case, refer to the Employer class for hints on how to structure your code.\nThe Location Class Open the Location.java file. Note that the getters, setters, and custom methods for this class are done, as is the constructor for initializing the id field.\nSally left you a TODO comment with instructions for coding a second constructor:\nIt should call the first constructor to initialize the id field.",
    "tags": [],
    "title": "Task 2: Create the Support Classes",
    "uri": "/assignments/techjobs-oo/task2/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #3: Tech Jobs (MVC Edition)",
    "content": "Complete the List Views Open the list-jobs.html template. Currently, the page just establishes the navigation bar and page title. You need to add code that will present relevant job information.\nDisplay List of Jobs This page needs to show full job listings—ID, employer, location, etc.\nIn list-jobs.html, create a loop to display each job passed in from the controller. The job data should be presented in tables, with each job in its own table. Be sure to check in ListController to find the variable names available to the template.\nAdding the CSS class \"job-listing\" to a table provides some nice styling, courtesy of Carly’s work!\nConstruct a table for each job, with one job field per row, referring to the demo app if you need a visual on how to display the job listings.\nBe sure to test your code by running the program and clicking links from different categories on the /list page.\na. Clicking the Web - Back End link yields 6 jobs. b. iOS yields 4 jobs. c. New York yields 1 job. d. Etc.\nAdd View All Link Open the list.html template. This file builds the table to display all of the links for the different Job fields. However, the link for the All column is missing.\nYou can fix this several different ways, but two options are presented below. Note that you only need to implement ONE option, not both.\nModify tableChoices in ListController to include another key/value pair. Check the method that renders the template to help identify the name to use for the key. Modify list.html to fill in the empty table cell with the necessary link. Check ListController to help identify the data to pass in for the query parameters. Be sure to test your code by clicking your new View All link in the table. There are 98 jobs in the data file.",
    "description": "Complete the List Views Open the list-jobs.html template. Currently, the page just establishes the navigation bar and page title. You need to add code that will present relevant job information.\nDisplay List of Jobs This page needs to show full job listings—ID, employer, location, etc.\nIn list-jobs.html, create a loop to display each job passed in from the controller. The job data should be presented in tables, with each job in its own table.",
    "tags": [],
    "title": "Task 2: Complete List Views",
    "uri": "/assignments/techjobs-mvc/list-views/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes",
    "content": "Classes and Objects Work on these exercises in the classes-part-one directory in java-web-dev-projects.\nNote If you have not already cloned the java-web-dev-projects project repository you can find it here: Java Web Dev Projects Repository Open up the file, Student.java, and add all of the necessary getters and setters. Think about the access level each field and method should have, and try reducing the access level of at least one setter to less than public. Check Your Solution public void setName(String name) { this.name = name; } public void setStudentId(int studentId) { this.studentId = studentId; } public void setGpa(double gpa) { this.gpa = gpa; } private void setNumberOfCredits(int numberOfCredits) { this.numberOfCredits = numberOfCredits; } public String getName() { return name; } public int getStudentId() { return studentId; } public int getNumberOfCredits() { return numberOfCredits; } public double getGpa() { return gpa; } Instantiate the Student class within the StudentPractice class using yourself as the student. For the numberOfCredits give yourself 1 for this class and a GPA of 4.0 because you are a Java superstar! Check Your Solution Student student = new Student(\"Your Name\", 12345, 1, 4.0); Within the same package, create a class Course with at least three fields. Before diving into IntelliJ, try using pen and paper to work through what these might be. At least one of your fields should be an ArrayList or HashMap, and you should use your Student class. Check Your Solution public class Course { private String topic; private Teacher instructor; private ArrayList\u003cStudent\u003e enrolledStudents; } Within the same package, create a class Teacher that has four fields: firstName, lastName, subject, and yearsTeaching. Add getters and setters to the class and add the access level to each field and method in the class. When adding your getters and setters, think about what we read about in the section on Encapsulation.\nWhat access modifier restricts access the most for what we need?\nIf it is a field, could we restrict the access to private and use getters and setters?\nIf we do set fields to private, what access level do we have to give our getters and setters?",
    "description": "Classes and Objects Work on these exercises in the classes-part-one directory in java-web-dev-projects.\nNote If you have not already cloned the java-web-dev-projects project repository you can find it here: Java Web Dev Projects Repository Open up the file, Student.java, and add all of the necessary getters and setters. Think about the access level each field and method should have, and try reducing the access level of at least one setter to less than public.",
    "tags": [],
    "title": "Exercises",
    "uri": "/classes/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "Access Modifiers For fields in classes, the access level determines who can get or set the value of the field. For methods, the access level determines who can call the method. The access level of a class member is determined by an access modifier.\nWe’ve encountered access modifiers so far in our code. In our examples, you frequently see the keyword, public. public makes the field or method to be accessible by anyone working with our code. Another common access modifier is private, which restricts access to fields or methods so they can only be used within the class. Two additional access modifiers are available in Java, though they are used much less often than public and private.\nExample Let’s take another look at our HelloWorld class from the last section, but with one small change.\n1 2 3 4 5 6 7 8 9 public class HelloWorld { String message = \"Hello World\"; void sayHello() { System.out.println(message); } } In this HelloWorld class, we omit the public access modifier in lines 3 and 5. Doing this implicitly gives the message field and the sayHello method default access.\nWe should avoid giving everything default access when creating classes in Java and instead think carefully about what level of access each field and method should have.\nThe table below details whether or not information can be accessed at different levels based on the access modifier. For example, a field with the private access modifier can be accessed within the class, but cannot be accessed outside the class at the world-level. In Java, world-level is the level of the whole application and contains all of the packages and classes. While we will discuss later how to decide which access modifier to use for different scenarios, you should save this table now as reference for those conversations.\nModifier Class Package World public Yes Yes Yes protected Yes Yes No (no modifier, aka package-private or default) Yes Yes No private Yes No No Note If you would like to learn more about access modifiers, you should check out the Oracle documentation on the subject.\nLet’s take a look at our HelloWorld class again and add some access modifiers.\nExample public class HelloWorld { private String message = \"Hello World\"; public void sayHello() { System.out.println(message); } } Since message only needs to be used by sayHello, we declare it to be private. Since we want sayHello to be usable by anybody else, we declare it to be public.\nNote In Java, you should always use the most restrictive access modifier possible. Minimizing access to class members allows code to be refactored more easily in the future, and hides details of how you implement your classes from others.\nThis makes your code more modular and modifiable. Each public member that you expose is another field or property that can be referenced directly elsewhere in any program using your class. Thus, changing any such field in your code could potentially break any code referencing such members. The fewer public members, the more you can change your code without breaking stuff elsewhere.\nNote If you want to learn more about controlling access to members of a class, check out this information from Oracle .\nCheck Your Understanding Question For this question, refer to the code block below.\npublic class Greeting { String name = \"Jess\"; public void sayHello() { System.out.println(\"Hello \" + this.name + \"!\"); } }What access modifier would you give name?\nno access modifier public private protected ",
    "description": "Access Modifiers For fields in classes, the access level determines who can get or set the value of the field. For methods, the access level determines who can call the method. The access level of a class member is determined by an access modifier.\nWe’ve encountered access modifiers so far in our code. In our examples, you frequently see the keyword, public. public makes the field or method to be accessible by anyone working with our code.",
    "tags": [],
    "title": "Modifiers in Java",
    "uri": "/classes/reading/modifiers/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments",
    "content": "Introduction Congratulations! Based on your hard work and strong coding skills, you have been brought on as an apprentice to the LaunchCode Tech Team. You will be paired with a mentor to help you get comfortable and continue learning.\nThe Company Team at LaunchCode works with employer partners to match qualified programmers with apprenticeships. They asked for a new tool to be built to help them easily manage data for currently available jobs. Over the next few weeks, you will help them build this application alongside mentors from the Tech Team.\nThis first project will be a simple proof-of-concept prototype. It won’t be pretty or have lots of features, but it will give you a chance to work through some initial concepts and get feedback from LaunchCode staff.\nYour mentor on this project is Blake.\nLearning Objectives In this project, you will show that you can:\nRead and understand code written by others. Use core Java syntax (methods, variables, loops, conditionals). Utilize ArrayList and HashMap collection types. Work with console I/O via the Scanner class. Work with data types and arrays. TechJobs (Console Edition) The app you must help design is a simple console (i.e. command-line) prototype of the new TechJobs app. It will allow LaunchCode staff to browse and search listings of open jobs by employer partners.\nThe prototype process gives everybody a chance to work out some initial ideas without investing a ton of time into developing a finished product. Once everybody likes the prototype, the Tech Team will begin work toward a full-fledged application.\nYour Assignment Blake created a console application and started to fill in some features. His code allows users to search job listings by one of several fields. It can also display lists of all of the values of a given field in the system (e.g. all employers, or all locations).\nBlake has now handed the task off to you. You must add a couple of features and then get feedback from the Company Team.\nAfter you work through the tasks Blake has laid out for you, tackle one or more of the bonus missions .\nGetting Started Note You may need to enable actions within your github repository if you have not done so already. Please refer back to the instructions on how to do so in the Running the Autograding Tests through Github Actions section of Assignment 0\nIn Canvas, Graded Assignment #1: TechJobs Console contains a GitHub starter code repo link. Fork the repository to your personal profile, copy the repo’s URL for cloning, and open up IntelliJ. and then set up the project in IntelliJ. Refer back to the setup instructions from assignment 0 for more details.\nBefore diving in and starting to code, make sure you understand what the code you’ve been given does. Since you’re starting with a functioning—albeit unfinished—program, go ahead and run it to get an idea of how it works. To do this, right-click on the main method in the TechJobs class and select Run TechJobs.main().\nWarning The application will run until you force it to quit, re-prompting time after time. To kill it, press the red “stop” icon in the Run pane or enter x from the initial prompt. We’ll learn precisely how the program manages to work this way below.\nLet’s explore the code by starting with the source of the data our program is providing access to.",
    "description": "Introduction Congratulations! Based on your hard work and strong coding skills, you have been brought on as an apprentice to the LaunchCode Tech Team. You will be paired with a mentor to help you get comfortable and continue learning.\nThe Company Team at LaunchCode works with employer partners to match qualified programmers with apprenticeships. They asked for a new tool to be built to help them easily manage data for currently available jobs.",
    "tags": [],
    "title": "Assignment #1: Tech Jobs Console",
    "uri": "/assignments/techjobs-console/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #4: Tech Jobs Persistent",
    "content": " Start MySQL Workbench and create a new schema named techjobs. Tip Remember to double click on the schema name in the file tree to make it the default schema.\nIn the administration tab, create a new user, techjobs with the same settings as described in the lesson tutorial. This user should have the password techjobs as well. Update build.gradle with the necessary dependencies. At this point, you should be able to run the tests. Run the tests in TestTaskOne to verify your gradle dependencies. Update src/resources/application.properties with the correct info. This will include setting spring.datasource.url to the address of your database connection, as well as the username and password for a user you have created. Refer to the tip below for the other properties you must add to complete your database setup. Tip You can double check your setup against what you’ve already done for your coding events repo. You can copy these property assignments from your coding events repo, only needing to change the database address and username/password values.\nTip If when starting your application, you encounter an error similar to\ncom.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value 'CDT' is unrecognized …then add ?useLegacyDatetimeCode=false\u0026serverTimezone=America/Chicago to the end of your spring.datasource.url value.\nTest It with SQL When your database is properly configured, you should have no compiler errors when starting the application. Execute bootRun and check the compiler output to make sure this is the case. If everything runs, you will be able to view your app locally in the browser at http://localhost:8080 (unless of course you have changed the server port).\nIn your MySQL workbench, open a new query tab to check your database connection. SQL TASK: At this point, you will have one table, job. In queries.sql under “Part 1”, list the columns and their data types in the table as a SQL comment. Your running application still has limited functionality. You won’t yet be able to add a job with the Add Job form. You also won’t yet be able to view the list of jobs or search for jobs - but this is mostly because you have no job data. Move on to Part 2 below to start adding these functionalities.",
    "description": "Start MySQL Workbench and create a new schema named techjobs. Tip Remember to double click on the schema name in the file tree to make it the default schema.\nIn the administration tab, create a new user, techjobs with the same settings as described in the lesson tutorial. This user should have the password techjobs as well. Update build.gradle with the necessary dependencies. At this point, you should be able to run the tests.",
    "tags": [],
    "title": "Task 1: Connect a Database to a Spring App",
    "uri": "/assignments/techjobs-persistent/part-one/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #1: Tech Jobs Console",
    "content": "When trying out the program, and later when reading the code, you hopefully noticed that there’s some work to do in the printJobs method. As it stands, it currently just prints a message: \"printJobs is not implemented yet\".\nComplete this method. It should print out jobs in this precise format:\n***** position type: Data Scientist / Business Intelligence name: Sr. IT Analyst (Data/BI) employer: Bull Moose Industries location: Saint Louis core competency: Statistical Analysis ***** ***** position type: Web - Back End name: Ruby specialist employer: LaunchCode location: Saint Louis core competency: Javascript ***** For the autograding script to correctly grade your code, you’ll need to match this format exactly. In particular, note the number of asterisks surrounding each listing, and the blank line between listings.\nIf there are no results, it should print No Results in the following format:\nSearch term: Example Search Term with No Results No Results View jobs by (type 'x' to quit): 0 - Search 1 - List Again, you should use this exact message.\nTip To do this, you’ll need to iterate over an ArrayList of jobs. Each job is itself a HashMap. While you can get each of the items out of the HashMap using the known keys (employer, location, etc.), think instead about creating a nested loop to loop over each HashMap. If a new field is added to the job records, this approach will print out the new field without any updates to printJobs.\nTest this method before moving on to your next step:\nSave your changes. Select Run from the Run menu and choose to run the TechJobs class (or if you have recently run it, just select the green arrow in the top right corner of the screen). Select “1” to list the jobs, and then “0” to list them all. Make sure the printout matches the styling above. Test that it prints a descriptive message if no jobs are found by selecting “0” to search and then “3” to search for a location. Then enter a location that is not in the data (e.g. “Cancun”). Your message should be displayed. ",
    "description": "When trying out the program, and later when reading the code, you hopefully noticed that there’s some work to do in the printJobs method. As it stands, it currently just prints a message: \"printJobs is not implemented yet\".\nComplete this method. It should print out jobs in this precise format:\n***** position type: Data Scientist / Business Intelligence name: Sr. IT Analyst (Data/BI) employer: Bull Moose Industries location: Saint Louis core competency: Statistical Analysis ***** ***** position type: Web - Back End name: Ruby specialist employer: LaunchCode location: Saint Louis core competency: Javascript ***** For the autograding script to correctly grade your code, you’ll need to match this format exactly.",
    "tags": [],
    "title": "Task 1: Implement printJobs()",
    "uri": "/assignments/techjobs-console/task-one/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "Now that we have connected our Java application to a MySQL database, we need to set up our Java classes and interfaces.\nIn the previous lessons, we learned about performing CRUD operations on a database and its tables. One of the reasons we use ORM is so that now we can write Java code in our application to manage our relational database.\nPersistent Classes Our JPA needs to know what Java class is going to be converted to a table in the MySQL database. A Java class that models a persistent data store is called a persistent class or entity class.\n@Entity denotes an entity class. Entity classes look very similar to any other Java class, except entity classes have two constructors. The first constructor creates an instance of the class. The second one is protected and has no arguments and/or no return statement. While you must set up this second constructor, it will only be used by the JPA to create a new instance.\nSince an entity class determines the structure of a table in our relational database, you can add fields to the class to create ids and primary keys. @Id is an annotation that denotes that an integer id field is to be used as an id in the corresponding table in the database. @GeneratedValue is used in conjunction with the @Id annotation to create a primary key for the entity.\nExample In the case of the previous example, we want to make our ContactInfo class an entity class.\n@Entity public class ContactInfo { @Id @GeneratedValue private int id; private String name; private String email; public ContactInfo(String n, String e) { this.name = n; this.email = e; } public ContactInfo() {} }This class declaration makes use of @Id and @GeneratedValue for the id field. Every time we instantiate a new object of the ContactInfo class, the object will have an id that translates to the primary key of the contactinfo table. We also have two constructors: the first is what we will use to instantiate an object for Frank, and the second is what the JPA uses to instantiate an object.\nRepositories While entity classes determine the structure of a table in our relational database, a repository gets at the data in the table. Repositories are not models and are stored in a separate folder from models. Repositories are also interfaces, not classes. We use the @Repository annotation to denote a repository.\nWhen we create repository interfaces, we are not going to be extending a particular class. Instead, we will be extending CrudRepository. Extending the CrudRepository interface gives us access to methods to perform all of the CRUD operations that we made happen in SQL.\nNote CrudRepository has a number of different methods. You might want to bookmark the documentation for later reference about the different methods.\nExample To get at the data in the contactinfo table, we need to create a ContactInfoRepository interface.\n@Repository public interface ContactInfoRepository extends CrudRepository\u003cContactInfo, Integer\u003e { }This code creates a repository called ContactInfoRepository so we can fetch data from the contactinfo table.\nOn the next page, we will cover how to use a controller and CrudRepository methods to get info in and out of the tables of our relational database.\nCreating Persistent Models - Video The following video explains how we can add an entity class and a repository to our codingevents application. The accompanying text is a quick rundown of what happens in the video. To get started, create a branch off of your db-config branch.\nNote The starter code for this video is found at the db-config branch of the CodingEventsJava repo.\nThe final code presented in this video is found on the persistent-model branch . As always, code along to the videos on your own codingevents project.\nRemember when switching branches to update your application.properties file to reflect your schema and authentication settings.\nCreating Persistent Models - Text In summary, now that we have connected MySQL and codingevents, let’s update our Event to a persistent model class and add a CRUD repository.\nUpdate the Event class with the following annotations for persistence.\nCreate the following fields for Event:\nid name description contactemail type For Events, create all of the getters and setters for these fields and both constructors.\nAfter updating Event, we can add a repository to data called EventRepository. EventRepository extends CrudRepository. We will add more methods and info to make use of EventRepository soon.\nCheck Your Understanding Question Entity classes are _________ and repositories are ____________.\nclasses, interfaces interfaces, classes classes, classes interfaces, interfaces ",
    "description": "Now that we have connected our Java application to a MySQL database, we need to set up our Java classes and interfaces.\nIn the previous lessons, we learned about performing CRUD operations on a database and its tables. One of the reasons we use ORM is so that now we can write Java code in our application to manage our relational database.\nPersistent Classes Our JPA needs to know what Java class is going to be converted to a table in the MySQL database.",
    "tags": [],
    "title": "Accessing Data",
    "uri": "/intro-orm-mapping/reading/accessing-data/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "Controllers with Parameters Now that you know the basics of a controller method, we can start to add some more variables into the mix. Some controller methods can take in parameters in the form of query strings or sections of the URL path. Passing this URL data to the controller is one step closer to more flexible web applications.\nA route is the mechanism by which a request path gets assigned to a controller within our application. We’ll explore routes and how data is transferred from a webpage with a given route to a specific controller.\nQuery Strings are URL Data A brief refresher: query strings are additional bits of information tacked onto the ends of URLs. They contain data in key-value pairs.\nwww.galaxyglossary.net?aKey=aValue\u0026anotherKey=anotherValue\u0026thirdKey=thirdValue Note Do HTTP requests and responses feel unfamiliar? Do you remember what a query string is? If you’re feeling rusty on these topics, it’s a good idea to brush up now, as routing requires a foundational understanding of HTTP data transfer.\nHere’s our introduction to HTTP for reviewing the concepts.\nControllers and Query Parameters - Video Note The starter code for this video is found in the static-responses branch of the hello-spring repo. The final code presented in this video is found on the query-parameters branch . Be sure to code along to the videos on your own hello-spring project.\n@RequestParam We can pass @RequestParam as an argument of a controller method. This annotation as an argument lets the handler method know about a given query string based on its own argument.\n// Responds to get requests at /hello?coder=LaunchCoder @GetMapping(\"hello\") @ResponseBody public String hello(@RequestParam String coder) { return \"Hello, \" + coder + \"!\"; }The controller method looks for the query string in the URL that matches its parameter, coder, and puts the paired value of that coder key into the response text.\nControllers and Path Parameters - Video Note The starter code for this video is found in the query-parameters branch of the hello-spring repo. The final code presented in this video is found on the path-variables branch . Please code along to the videos on your own hello-spring project.\n@PathVariable Another way to handle data with a controller is by accessing the data via a segment of the URL. This is done with @PathVariable. @PathVariable takes an argument that, if matching a portion of the URL, will deliver this data into the handler.\n// Responds to get requests at /hello/LaunchCode @GetMapping(\"hello/{name}\") @ResponseBody public String helloAgain(@PathVariable String name) { return \"Hello, \" + name + \"!\"; }Above, name is a placeholder, indicating where in the URL segment to look for the @PathVariable. From the comment, we know that the actual value is LaunchCode, but this can easily be changed. If we changed the value of this URL segment to /hello/Ada, then this controller would respond with Hello, Ada when a GET request is made.\nNote Also know that you can redirect a user by removing the @ResponseBody annotation from the controller and returning \"redirect:/DESIREDPATH\".\nCheck Your Understanding Question Your application is served at myfavoriteplanets.net. What is the path that this controller maps to?\n@GetMapping(\"venus\") @ResponseBody public String venusSurface(@RequestParam String terrestrial) { if (terrestrial == true) { return \"Venus is rocky.\" } else { return \"Venus is gaseous.\" } } myfavoriteplanets.net/venus?terrestrial=true\nnet.myfavoriteplanets/venus?terrestrial=true\nmyfavoriteplanets/venus?terrestrial=true\nmyfavoriteplanets/venus/terrestrial\nQuestion Your application is served at myfavoriteplanets.net. What URL do you need to hit so that the response is: “Akatsuki currently orbits Venus.”?\n@GetMapping(\"venus/{orbiter}\") @ResponseBody public String venusOrbiter(@PathVariable String orbiter) { return orbiter + \" currently orbits Venus.\" } myfavoriteplanets.net/venus/{Akatsuki}\nmyfavoriteplanets.net/venus/orbiter=Akatsuki\nmyfavoriteplanets.net/venus/Akatsuki\nmyfavoriteplanets.net/venus/name=Akatsuki",
    "description": "Controllers with Parameters Now that you know the basics of a controller method, we can start to add some more variables into the mix. Some controller methods can take in parameters in the form of query strings or sections of the URL path. Passing this URL data to the controller is one step closer to more flexible web applications.\nA route is the mechanism by which a request path gets assigned to a controller within our application.",
    "tags": [],
    "title": "Controllers with Parameters",
    "uri": "/controllers-and-routing/reading/controllers-with-parameters/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "In the next several pages, we will be making updates to codingevents to demonstrate model creation, how models relate to data, and the practice of model binding. The first of these steps is to move data handling out of our controller classes and into a model class. As we discussed on the previous page, the controller class is not responsible for holding data.\nIn codingevents, we’ll remove the ArrayList data from EventController and create a proper Java class to deal with event items. We’ll then update our controller methods to take advantage of the new model and its properties, rather than the strings stored in the list. Lastly, because the controller is updating, the template variables it relies upon will also need to change to reflect the model properties.\nCreate a Model Class - Video Note The starter code for this video is found at the add-bootstrap branch of CodingEventsJava repository. The final code presented in this video is found on the create-model branch . As always, code along with the videos on your own codingevents project.\nCreate a Model Class - Text Like controllers, model classes are conventionally located in a models package. Structurally, model classes most closely resemble the kinds of classes we practiced making at the start of this course, before introducing Spring Boot. In other words, models are plain old Java objects, or POJOs.\nTo create a model to shape event data, we include a field for name. Of course, we’ll also like at least one constructor and some getters and setters.\nIn models/Event.java:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class Event { private String name; public Event(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return name; } } Now that we’re working to move the data handling out from the controller classes and into a class of its own, we’ll need to update the POST handler that creates new events. Update the .add() method inside of processCreateEventForm to add a new Event instance:\n1 2 3 4 5 @PostMapping(\"create\") public String processCreateEventForm(@RequestParam String eventName) { events.add(new Event(eventName)); return \"redirect:/events\"; } And you’ll notice, we’re adding a different type of data to the ArrayList, so we’ll have to update that too:\nprivate static List\u003cEvent\u003e events = new ArrayList\u003c\u003e();Back in the events/index.html template, update the HTML to use the Event object’s fields, rather than simply strings.\n\u003ctd th:text=\"${event.name}\"\u003e\u003c/td\u003e Note The syntax event.fieldName runs a getter method behind the scenes in order to access a field.\nAdd a Model Property - Video Note The starter code for this video is found at the create-model branch of the codingevents-demo repo. The final code presented in this video is found on the add-property branch . As always, code along to the videos on your own codingevents project.\nAdd a Model Property - Text To round out the Event class, we’ll add a description field to showcase what our events are all about.\nUpdates to models/Event.java:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public class Event { private String name; private String description; public Event(String name, String description) { this.name = name; this.description = description; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @Override public String toString() { return name; } } Now that our data is object-oriented, it’s quick and easy to add a new property affiliated with an event. If after this, we decide to add a date or location field, we would simply follow the pattern established. Before, with events stored as name strings, we would have had more changes to make in order to add other information fields to the shape of the data.\nUpdate both the events/create.html and events/index.html templates to create an event object with a description field and to display that description along with the event’s name.\nevents/create.html:\n1 2 3 4 \u003clabel\u003e Description \u003cinput type=\"text\" name=\"eventDescription\" class=\"form-control\"\u003e \u003c/label\u003e events/index.html:\n\u003ctd th:text=\"${event.description}\"\u003e\u003c/td\u003eLastly, add a parameter to the processCreateEventForm to handle the form submission and pass the description value into the creation of the Event object.\nEventController:\n1 2 3 4 5 @PostMapping(\"create\") public String processCreateEventForm(@RequestParam String eventName, @RequestParam String eventDescription) { events.add(new Event(eventName, eventDescription)); return \"redirect:\"; } Check Your Understanding Question True/False: Model code is framework independent.",
    "description": "In the next several pages, we will be making updates to codingevents to demonstrate model creation, how models relate to data, and the practice of model binding. The first of these steps is to move data handling out of our controller classes and into a model class. As we discussed on the previous page, the controller class is not responsible for holding data.\nIn codingevents, we’ll remove the ArrayList data from EventController and create a proper Java class to deal with event items.",
    "tags": [],
    "title": "Create a Model",
    "uri": "/models-and-model-binding/reading/create-model/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "Using templates is a useful way to reduce the effort required to create and maintain a web-based project. Before you can dive into using templates, however, you need to take care of a little groundwork first.\nThymeleaf In combination with Java and Spring Boot, we will use a library called Thymeleaf. This set of tools helps simplify the creation of flexible, reusable templates for standalone projects and web-based applications.\nMore information can be found on the introduction page of the Thymeleaf website.\nThymeleaf, Naturally The developers behind Thymeleaf emphasize the idea of natural templates. This means that templates constructed with Thymeleaf look and operate just like regular HTML code. You can open any template in a browser and view it just like a static HTML file.\nAny logic we add to a template occurs inside the tags, which preserves the ability to open the file and display it correctly. This helps us as we consider the best layout for presenting data on the screen.\nThymeleaf Dependency In this chapter, you will construct some small practice projects to help you learn how to implement Thymeleaf templates. To use the library, however, you need to provide IntelliJ with some information to make the IDE recognize Thymeleaf syntax and commands. You need to include in the proper dependencies, and there are two common ways to accomplish this.\nDuring Setup for a New Project When you create a new Gradle project on the start.spring.io website, search for and select the Thymeleaf dependency. For the practice projects you build in this class, be sure to add the Spring Web and Spring Boot DevTools dependencies as well.\nIn IntelliJ, opening up the build.gradle file of the new project shows the dependencies you selected:\n1 2 3 4 5 6 7 8 dependencies { implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'org.springframework.boot:spring-boot-starter-web' developmentOnly 'org.springframework.boot:spring-boot-devtools' testImplementation('org.springframework.boot:spring-boot-starter-test') { exclude group: 'org.junit.vintage', module: 'junit-vintage-engine' } } Lines 2 - 4 establish links to the thymeleaf, spring-boot-starter-web, and spring-boot-devtools libraries, respectively.\nAdd to an Existing Project If you have an existing project that does not currently use Thymeleaf, you can add the functionality by updating the build.gradle file.\nThe build.gradle file in the src directory.\nIn the dependencies block, just paste in the implementation statement seen in line 23 above. Also, be sure to include the Spring Boot libraries if the old project is missing those as well.\nStart a Practice Project Open up your hello-spring project in IntelliJ and code along with the following video.\nNote We’re assuming you’ve completed these Controllers and Routing Exercises on your own hello-spring application and committed your changes to a branch reserved for the exercises. No matter where you are with those exercises, be sure that your own hello-spring application roughly matches the hello-spring forms branch so that you can follow along with the video lessons in this chapter. If you are using git branches to track your work, you can simply return to the branch you were on before starting the video walkthrough on this page .\nWarning The videos in this chapter walk you through building small web-based projects. Do NOT skip this practice, because the end of chapter exercises pick up where the tutorials end.\nIn addition, the following video explores the use of file templates. Windows and Linux users may have a different experience than that shown in the video. For more information on locating / using file templates please visit the following link: JetBrains file and code templates Note The starter code for this video is found at the forms branch of hello-spring-demo. The final code presented in this video is found on the views-static branch.\nThe sections below outline the main ideas presented in the video. However, the text is NOT a substitute for completing the work described in the clip.\nTemplate Location In IntelliJ, create a templates folder inside the resources directory. All of your templates should be put in the templates folder. As you saw in the video, Thymeleaf streamlines finding required files by using resources/templates as the default location.\nAdd a Template To create a new template, right-click on the templates folder and select New –\u003e HTML file. Give your template a descriptive name, and note that IntelliJ provides some boilerplate code:\n1 2 3 4 5 6 7 8 9 10 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003ctitle\u003eTitle\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003c/body\u003e \u003c/html\u003e To tie in the Thymeleaf information, you need to add a URL inside the html tag on line 2:\n\u003chtml lang=\"en\" xmlns:th=\"https://www.thymeleaf.org/\"\u003eThe xmlns:th attribute pulls in information from thymeleaf.org about the keywords and methods that we will use with Thymeleaf. This allows IntelliJ to properly apply syntax highlighting and error reporting.\nA side effect of the xmlns:th attribute is that it implements stricter requirements for closing HTML tags. In HTML5, we can get away with leaving out the / character in standalone tags like \u003cinput\u003e. However, with the xml format in Thymeleaf, we must include the character.\nFor example, we need to update line 4 in the boilerplate HTML code to close the meta tag:\n\u003cmeta charset=\"UTF-8\" /\u003e \u003c!-- Note the closing '/' character --\u003eThymeleaf Template As described in the video, you can save yourself some time by creating your own boilerplate code for a Thymeleaf template. This will save you from having to make the edits described above every time you add a new base html file.\nRight-click on the templates folder (or any other directory), and select New –\u003e Edit File Templates. Tip Alternatively, you can edit your File Templates by clicking File –\u003e Settings –\u003e Editor –\u003e File and Code Templates for Windows and Linux and IntelliJ IDEA –\u003e Settings –\u003e Editor –\u003e File and Code Templates for macOS.\nIn the window that pops up, click the “+” icon to add a new file. Name your template, set the extension as html, then edit the starter code. This will be the boilerplate HTML that appears anytime you select your custom template. For Thymeleaf, the code should at least close the meta tag and include the xmlns attribute. If you find yourself routinely using other code in your Thymeleaf files, you can return to this window and edit the HTML as needed. Don’t forget to save your changes.\nTo use your custom Thymeleaf template, right-click on the templates folder and select New –\u003e TemplateName. ",
    "description": "Using templates is a useful way to reduce the effort required to create and maintain a web-based project. Before you can dive into using templates, however, you need to take care of a little groundwork first.\nThymeleaf In combination with Java and Spring Boot, we will use a library called Thymeleaf. This set of tools helps simplify the creation of flexible, reusable templates for standalone projects and web-based applications.\nMore information can be found on the introduction page of the Thymeleaf website.",
    "tags": [],
    "title": "Creating Templates",
    "uri": "/thymeleaf-views/reading/creating-templates/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 16: Enums \u003e Reading",
    "content": "One application of enum types is to represent categories of objects. We will take this approach in our coding-events application to categorize events based on their type, such as conference or meetup.\nEnum Types in Models - Video Note The starter code for this video is found at the display-errors branch of the CodingEventsJava repo. The final code presented in this video is found on the enums branch . As always, code along to the videos on your own codingevents project.\nAs mentioned in the previous chapter , your display-errors constructor might contain a small quirk. If your constructor assigns non-sequential id values, this is still OK!\nEnum Types in Models - Text Create an Enum Class In your models package within codingevents, create a new class called EventType. Before you finish entering the name of your file, select the Enum option from the list of types.\nBecause enum values are constants, we use naming-conventions and write them in all caps. Each value is demarcated with a comma and the list is completed with a semicolon.\nEventType:\n1 2 3 4 5 6 7 8 public enum EventType { CONFERENCE, MEETUP, WORKSHOP, SOCIAL; } Add an Enum Field Enums can store additional information affiliated with each value in fields. Enum fields are treated like fields on any other type. Again, because enum values are constants, fields should be final variables, since they will not change.\nTo add a displayName field to EventType, we declare the field, add a constructor, and tack on a getter method:\n1 2 3 4 5 6 7 8 9 private final String displayName; EventType(String displayName) { this.displayName = displayName; } public String getDisplayName() { return displayName; } To define the display name for each of the EventType values, we can call the constructor we just wrote like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public enum EventType { CONFERENCE(\"Conference\"), MEETUP(\"Meetup\"), WORKSHOP(\"Workshop\"), SOCIAL(\"Social\"); private final String displayName; EventType(String displayName) { this.displayName = displayName; } public String getDisplayName() { return displayName; } } Add an Enum Property to a Model Class Other objects can have enum type properties. To add an EventType property to our model Event, we create a type field in Event amongst the other fields declared:\n// other Event field declarations private EventType type; // Event methodsWe’ll want to also add this field to the Event constructor, as well as a getter and setter method:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 private EventType type; public Event(String name, String description, String contactEmail, EventType type) { this(); this.name = name; this.description = description; this.contactEmail = contactEmail; this.type = type; } public EventType getType() { return type; } public void setType(EventType type) { this.type = type; } Pass Enum Values Through the Controller codingevents uses model binding to create an Event object. So like any other field on the model, the controller does not necessarily need to know about the addition of Event.type in order to create an Event instance from a form. However, we want the user to choose from the pre-defined event type values when creating their event. To do this, we’ll use the controller method displayCreateEventForm to pass those values into the view.\nIn EventController:\n1 2 3 4 5 6 7 @GetMapping(\"create\") public String displayCreateEventForm(Model model) { model.addAttribute(\"title\", \"Create Event\"); model.addAttribute(new Event()); model.addAttribute(\"types\", EventType.values()); return \"events/create\"; } .values() is a built-in static method that returns an array of values defined in the given enum, in the order in which they have been declared.\nWith the template variable types now defined, we can use our EventType values in the view.\nUse Enum Value in a Select Element The list of constants returned from EventType lends itself well to a select-type form input. We’ll update our form so that a user will have the option to choose one of the provided event types from a dropdown menu.\nIn templates/events/create.html:\n1 2 3 4 5 6 7 8 9 10 \u003cdiv class=\"form-group\"\u003e \u003clabel\u003e Type \u003cselect th:field=\"${event.type}\"\u003e \u003coption th:each=\"type : ${types}\" th:value=\"${type}\" th:text=\"${type.displayName}\" \u003e\u003c/option\u003e \u003c/select\u003e \u003c/label\u003e \u003c/div\u003e As with the other form inputs on the page, the th:field attribute determines the name and id attributes for the select tag. We make an option tag for each of the EventType values, making use of the types variable we passed in from the controller in the previous step . We set the value attribute for the model data to be the EventType value using th:value. And the type name shown to the user of the form as the displayName of the type, using th:text.\nUse Enum Properties to Display Information Once an event is created, to display its type field in the table of all events, we’ll modify templates/events/index.html to include another column:\n\u003c!-- other table headers --\u003e \u003cth\u003eType\u003c/th\u003e \u003c!-- other event data --\u003e \u003ctd th:text=\"${event.type.displayName}\"\u003c/td\u003eIn this case, the type displayed is the value of the event object’s type field, so the controller method responsible for rendering this view does not need a types variable passed in. To show the more user-friendly view of the type value, we use the .displayName field of EventType.\nCheck Your Understanding Question When we add a field to the EventType enum from codingevents, what is the strongest reason why we don’t we write a setter method for that field?\nEnum classes cannot contain setter methods Final variables cannot be reassigned Enum fields cannot be reassigned We don’t use a setter method in the rest of the application Question In coding-events, say we change our template variable name in EventController.displayCreateEventForm so that EventType.values() is now assigned to a variable, categories. Which of the template expressions in the following code block from create.html, if any, should be changed to reflect this update? Select all that apply.\n1 2 3 4 5 6 7 8 9 10 \u003cdiv class=\"form-group\"\u003e \u003clabel\u003e Type \u003cselect th:field=\"${event.type}\"\u003e \u003coption th:each=\"type : ${types}\" th:value=\"${type}\" th:text=\"${type.displayName}\" \u003e\u003c/option\u003e \u003c/select\u003e \u003c/label\u003e \u003c/div\u003e In line 3, ${event.type} should be changed to ${event.category} In line 4, type : ${types} should be changed to category : ${categories} In line 5, ${type} should be changed to ${category} In line 6, ${type.displayName} should be changed to ${category.displayName} ",
    "description": "One application of enum types is to represent categories of objects. We will take this approach in our coding-events application to categorize events based on their type, such as conference or meetup.\nEnum Types in Models - Video Note The starter code for this video is found at the display-errors branch of the CodingEventsJava repo. The final code presented in this video is found on the enums branch . As always, code along to the videos on your own codingevents project.",
    "tags": [],
    "title": "Enums in Model Classes",
    "uri": "/enums/reading/enums-model-classes/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 10: Controllers and Routing",
    "content": "While reading the chapter, you created a basic Hello, World application using Spring Boot called hello-spring. Open that project up in IntelliJ, and get ready to add some features!\nNote Before you start these exercises, take a look at the hello-spring class-annotations branch to make sure your own application matches ours.\nCreate and checkout a branch for your exercises solution. Name it something useful, such as controller-exercises.\nModify your HelloController class to display a form on a GET request that asks the user for both their name and the language they would like to be greeted in. It should look something like this:\nThe resulting form submission should return and display the message, “Bonjour Chris”.\nNote The language is presented in a dropdown, more formally known as a select element. For more information about the select element and how it works, read the MDN documentation .\nWhen the user submits the form (via a POST request), they should be greeted in the selected language. Your new feature should:\nInclude at least 5 languages, with English being the default. If you don’t speak 5 languages yourself, ask your friend the Internet . Include a new public static method, createMessage, in the HelloController that takes a name as well as a language string. Based on the language string, you’ll display the proper greeting. Check Your Solution When the user submits the form (via a POST request), they should be greeted in the selected language. Your new feature should:\nInclude at least 5 languages, with English being the default. If you don’t speak 5 languages yourself, ask your friend the Internet . Include a new public static method, createMessage, in the HelloController that takes a name as well as a language string. Based on the language string, you’ll display the proper greeting. @RequestMapping(value=\"hello\", method = RequestMethod.POST) @ResponseBody public String helloPost(@RequestParam String name, @RequestParam String language) { if (name == null) { name = \"World\"; } return createMessage(name, language); // For a bonus mission, students can change this response text to look nicer. // This is subjective, but students should be modifying the HTML of the response string. } public static String createMessage(String n, String l) { String greeting = \"\"; if (l.equals(\"english\")) { greeting = \"Hello\"; } else if (l.equals(\"french\")) { greeting = \"Bonjour\"; } else if (l.equals(\"italian\")) { greeting = \"Bonjourno\"; } else if (l.equals(\"spanish\")) { greeting = \"Hola\"; } else if (l.equals(\"german\")) { greeting = \"Hallo\"; } return greeting + \" \" + n; } Commit your changes!\nBonus Mission Instead of returning the greeting as plain text, add a bit of HTML to the response string so that the displayed message looks a bit nicer. ",
    "description": "While reading the chapter, you created a basic Hello, World application using Spring Boot called hello-spring. Open that project up in IntelliJ, and get ready to add some features!\nNote Before you start these exercises, take a look at the hello-spring class-annotations branch to make sure your own application matches ours.\nCreate and checkout a branch for your exercises solution. Name it something useful, such as controller-exercises.\nModify your HelloController class to display a form on a GET request that asks the user for both their name and the language they would like to be greeted in.",
    "tags": [],
    "title": "Exercises",
    "uri": "/controllers-and-routing/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 14: Models and Model Binding",
    "content": "Add functionality to edit event objects in your codingevents application. These exercises assume that you have added all of the code from this section of the book and your application resembles the model-binding branch of CodingEventsJava .\nCreate a new branch from here with a descriptive name, such as edit-events. The edit form will resemble the form used to create an event.\nTip As you work through these steps, test your code along the way! With each change you apply to your code, ask yourself what you expect to see when the application is run. You may not find that all of the steps result in observable changes, though. Use IntelliJ’s debugger and read your error messages if you run into issues after applying any of the changes.\nCreate the two handler methods listed below in EventController. We’ll add code to these in a moment, so just put the method outline in place for now. Create a method to display an edit form with this signature:\npublic String displayEditForm(Model model, @PathVariable int eventId) { // controller code will go here } Create a method to process the form with this signature:\npublic String processEditForm(int eventId, String name, String description) { // controller code will go here } Check your solution @GetMapping(\"edit/{eventId}\") public String displayEditForm(Model model, @PathVariable int eventId){ }@PostMapping(\"edit\") public String processEditForm(int eventId, String name, String description) { } Add the necessary annotations to these methods for them to both live at the path /events/edit. Judging by the names of the handlers, which should handle GET requests and which should handle POST requests? Remember, we’ve configured @RequestMapping with a URL segment on the controller class already. You’ll need to configure the route for displayEditForm to include the path variable eventId, so that paths like /events/edit/3 will work. Create an edit.html view template in resources/templates/events.\nCopy the code from create.html into edit.html.\nYou’ll want to update the text of the submit button to reflect the edit functionality. Back in the displayEditForm handler, round out the controller method. Use an EventData method to find the event object with the given eventId.\nPut the event object in the model with .addAttribute().\nReturn the appropriate template string.\nCheck your solution 1 2 3 4 5 6 7 8 @GetMapping(\"edit/{eventId}\") public String displayEditForm(Model model, @PathVariable int eventId){ Event eventToEdit = EventData.getById(eventId); model.addAttribute(\"event\", eventToEdit); String title = \"Edit Event \" + eventToEdit.getName() + \" (id=\" + eventToEdit.getId() + \")\"; model.addAttribute(\"title\", title ); return \"events/edit\"; } Within the form fields in edit.html, Get the name and description from the event that was passed in via the model and set them as the values of the form fields. Add th:action=\"@{/events/edit}\" to the form tag. Add another input to hold the id of the event being edited. This should be hidden from the user:\n\u003cinput type=\"hidden\" th:value=\"${event.id}\" name=\"eventId\" /\u003e Back in the displayEditForm handler, add a title to model that reads “Edit Event NAME (id=ID)” where NAME and ID are replaced by the values for the given event.\nIn processEditForm,\nQuery EventData for the event being edited with the given id parameter.\nUpdate the name and description of the event with the appropriate model setter methods.\nRedirect the user to /events (the event listing page).\nCheck your solution 1 2 3 4 5 6 7 @PostMapping(\"edit\") public String processEditForm(int eventId, String name, String description) { Event eventToEdit = EventData.getById(eventId); eventToEdit.setName(name); eventToEdit.setDescription(description); return \"redirect:/events\"; } To access event editing, the user will need an edit option in the list of event data. In resources/templates/events/index.html, add a link in a new table column to edit the event:\n\u003ctd\u003e \u003ca th:href=\"@{/events/edit/{id}(id=${event.id})}\"\u003eEdit\u003c/a\u003e \u003c/td\u003e ",
    "description": "Add functionality to edit event objects in your codingevents application. These exercises assume that you have added all of the code from this section of the book and your application resembles the model-binding branch of CodingEventsJava .\nCreate a new branch from here with a descriptive name, such as edit-events. The edit form will resemble the form used to create an event.\nTip As you work through these steps, test your code along the way!",
    "tags": [],
    "title": "Exercises: Edit Model Classes",
    "uri": "/models-and-model-binding/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 16: Enums",
    "content": " Fork and clone EnumerablePlanets .\nUse the Get from Version Control option to open the project in IntelliJ.\nIn the project, create a data package.\nCreate a new public enum called Planets.\n1 2 3 4 5 6 7 public enum Planets { // list the planets here. // Mercury, Venus, Earth, Mars, Jupiter, // Saturn, Uranus, Neptune // Don't forget to capitalization convention and enum // syntax to separate value and end the list } Before adding any other fields to Planets, go to PlanetController and update the index handler to pass in a Model class argument (e.g. Model model).\nCheck Your Solution @GetMapping() public String displayIndex(Model model) { model.addAttribute(\"planets\", Planets.values()); return \"index\"; } Use .addAttribute to add the planet values to the model.\nIn templates/index, create a list element and use the template variable you have just defined in the controller to list all of the planet values on the page.\nCheck Your Solution \u003col\u003e \u003cli th:each=\"planet : ${planets}\" th:text=\"${planet}\"\u003e\u003c/li\u003e \u003c/ol\u003e Add a name field to the planets.\nCreate a name property to display a non-capitalized version of each of the planet names. Add a constructor with the name field and a getter for the field. Update the template to display the planet names.\nCheck Your Solution \u003col\u003e \u003cli th:each=\"planet : ${planets}\" th:text=\"${planet.name}\"\u003e\u003c/li\u003e \u003c/ol\u003e Back in the Planets enum, add a new field called yearLength.\nThe value of each yearLength should be the number of earth days of a year on the given planet.\nNumber of earth days on each planet: Mercury: 88 Venus: 225 Earth: 365 Mars: 687 Jupiter: 4333 Saturn: 10759 Uranus: 30687 Neptune: 60200 Update the constructor and add a getter for this field.\nChange the index template to display a table of each planet name and its year in earth days.\nIn templates/index, create a table element and add the appropriate bootstrap class. The table can be styled to your liking. Add a message to let the users know what data you are displaying with the yearLength field. Check Your Solution \u003ctable th:each=\"planet : ${planets}\" class=\"table table-striped\"\u003e \u003cthead \u003e \u003ctr\u003e \u003cth th:text=\"${planet.name}\"\u003e \u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctr\u003e \u003ctd th:text=\"${planet.yearLength} + ' Earth days in one year.'\"\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e If you wish, add another field to Planets. You can find plenty of information on NASAs web site .\nUpdate the enum with the new field, including changing the constructor and adding a getter method. Add the field to display in the table, with a message if helpful to convey the information or units of measure. ",
    "description": "Fork and clone EnumerablePlanets .\nUse the Get from Version Control option to open the project in IntelliJ.\nIn the project, create a data package.\nCreate a new public enum called Planets.\n1 2 3 4 5 6 7 public enum Planets { // list the planets here. // Mercury, Venus, Earth, Mars, Jupiter, // Saturn, Uranus, Neptune // Don't forget to capitalization convention and enum // syntax to separate value and end the list } Before adding any other fields to Planets, go to PlanetController and update the index handler to pass in a Model class argument (e.",
    "tags": [],
    "title": "Exercises: Enum Practice",
    "uri": "/enums/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance",
    "content": "Work on these exercises within IntelliJ using the java-web-dev-projects project you already created. Add a new package called technology to your exercises directory.\nClass design: Create a new class called Computer. Before you add any more code, know that you will need to add two additional classes: Laptop and SmartPhone. Before you start coding anything inside these classes, diagram how the three classes are going to be related to each other. Remember to add properties and methods to your diagram!\nFor a parent class add 3 properties, 2 methods, and a constructor.\nFor a child class add at least 1 additional property and 1 additional method.\nClass implementation: Implement your design and test it in a Program.java class.\nTry to add three JUnit tests per class! Abstract class design: Consider the group of classes that you designed. Suppose you had a web program that used these classes, and you needed to assign a unique ID to every object created from one of these classes within the application. Therefore, each such class should have an Id property, and no two objects created from any of the classes may have the same value for Id. Create an abstract class, AbstractEntity, that contains the behavior for assigning and accessing such a unique ID for each class that extends it. Add this class to your program above, and add AbstractEntity to the class hierarchy in the correct place. ",
    "description": "Work on these exercises within IntelliJ using the java-web-dev-projects project you already created. Add a new package called technology to your exercises directory.\nClass design: Create a new class called Computer. Before you add any more code, know that you will need to add two additional classes: Laptop and SmartPhone. Before you start coding anything inside these classes, diagram how the three classes are going to be related to each other.",
    "tags": [],
    "title": "Exercises: Inheritance",
    "uri": "/inheritance/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping",
    "content": "For the exercises, we are going to continue building on our codingevents application. The exercise instructions assume that your code resembles the persistent-controller branch of CodingEventsJava. Create a new branch off of your own persistent-controller code to get started on the exercises.\nNote You will be making one entity class, one repository, and one controller. If you are not sure what these classes and interface should look like, refer back to the sections on persistent models and controllers and repositories .\nThe EventCategory Class First, create a new class called EventCategory in the models directory.\nEventCategory needs to have the following:\nAn id field of type int. A name field of type String. A constructor. The appropriate getters and setters. EventCategory represents data that will be stored in our database, so you need to use the @Entity annotation!\nCheck Your Solution @Entity public class EventCategory { @Id @GeneratedValue private int id; @Size(min=3, message=\"Name must be at least 3 characters long\") private String name; public EventCategory(@Size(min = 3, message = \"Name must be at least 3 characters long\") String name) { this.name = name; } public EventCategory() {} public String getName() { return name; } public void setName(String name) { this.name = name; } public int getId() { return id; } @Override public String toString() { return name; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; EventCategory that = (EventCategory) o; return id == that.id; } @Override public int hashCode() { return Objects.hash(id); } } The EventCategoryRepository Interface Once you have created EventCategory, you need to create the EventCategoryRepository in the data folder. EventCategoryRepository will extend the CrudRepository interface.\nThe EventCategoryController Class Create EventCategoryController in the controllers directory. You can use the @RequestMapping annotation to map to \"eventCategories\". To get our handlers working, we also need a variable of type EventCategoryRepository.\nWe will be creating 3 handlers in our controller:\ndisplayAllCategories renderCreateEventCategoryForm processCreateEventCategoryForm displayAllCategories displayAllCategories needs to do the following:\nUse @GetMapping and return \"eventCategories/index\". Add an attribute for the title that uses \"All Categories\". Add an attribute for the categories that uses all of the values in your EventCategoryRepository variable. Check Your Solution @GetMapping public String displayAllCategories(Model model) { model.addAttribute(\"title\", \"All Categories\"); model.addAttribute(\"categories\", eventCategoryRepository.findAll()); return \"eventCategories/index\"; } renderCreateEventCategoryForm renderCreateEventCategoryForm needs to do the following:\nUse @GetMapping and return \"eventCategories/create\". Add an attribute for the title and assign it \"Create Category\". Add an attribute for a new instance of EventCategory. processCreateEventCategoryForm processCreateEventCategoryForm needs to do the following:\nUse @PostMapping. Use error validation and the Errors object appropriately. If you want to review how to use the Errors object, check out the section on error validation . Add an attribute for the title and assign it \"Create Category\". Add an attribute for a new instance of EventCategory. Either return \"eventCategories/create\" or \"redirect:\". Check Your Solution @PostMapping(\"create\") public String processCreateEventCategoryForm(@Valid @ModelAttribute EventCategory eventCategory, Errors errors, Model model) { if (errors.hasErrors()) { model.addAttribute(\"title\", \"Create Category\"); model.addAttribute(new EventCategory()); return \"eventCategories/create\"; } eventCategoryRepository.save(eventCategory); return \"redirect:\"; } Thymeleaf Templates To finish the exercises, we need to make two new templates.\neventCategories/index, which will contain a table of the event categories.\nCheck Your Solution \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\" xmlns:th=\"http://www.thymeleaf.org/\"\u003e \u003chead th:replace=\"fragments :: head\"\u003e\u003c/head\u003e \u003cbody class=\"container\"\u003e \u003cheader th:replace=\"fragments :: header\"\u003e\u003c/header\u003e \u003ctable class=\"table table-striped\"\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eCategory Name\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctr th:each=\"category : ${categories}\"\u003e \u003ctd th:text=\"${category.name}\"\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e \u003c/body\u003e \u003c/html\u003e eventCategories/create, which will contain a form for adding new event categories.\nThe Final Application Once you are done, launch your app and head to localhost:8080/eventCategories! If you added categories already, you will see any categories already stored in the database. In this case, we added “Meetup” as a category the first time we ran our app to test it.\nIf you click on “Create Category”, you should be directed to localhost:8080/eventCategories/create. We decided to add “Networking” as a category and filled out the form.\nOnce you hit submit, you are redirected back to localhost:8080/eventCategories, and your table now contains the newest event category!",
    "description": "For the exercises, we are going to continue building on our codingevents application. The exercise instructions assume that your code resembles the persistent-controller branch of CodingEventsJava. Create a new branch off of your own persistent-controller code to get started on the exercises.\nNote You will be making one entity class, one repository, and one controller. If you are not sure what these classes and interface should look like, refer back to the sections on persistent models and controllers and repositories .",
    "tags": [],
    "title": "Exercises: OMG the ORM!",
    "uri": "/intro-orm-mapping/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views",
    "content": "In the chapter, we started working on an application for tracking various coding events around town.\nOpen up your codingevents project in IntelliJ.\nGetting Started From your own add-bootstrap branch, create and checkout a new branch called my-views-exercises-solution.\nNote If you need to make sure your code matches ours to start, look at the add-bootstrap branch on CodingEventsJava.\nNow, let’s add descriptions to our events!\nExpanding our Events Schedule In the videos, we learned how to use templates to display the elements in a static list called events. Let’s make our events list a HashMap! This enables us to add descriptions to our events.\nFill your events HashMap with the names and descriptions of 3 coding events around town.\nCheck your solution events.put(\"Menteaship\",\"A fun meetup for connecting with mentors\"); events.put(\"Code With Pride\",\"A fun meetup sponsored by LaunchCode\"); events.put(\"Javascripty\", \"An imaginary meetup for Javascript developers\"); Using th:block and th:each, put together the events and their descriptions in a table as opposed to an unordered list.\nUse fragments to store the address of the new tech hub where all of the programmers are hanging out. Use th:replace in your main template to bring in the address as a third column in your table. You may need to create a new fragments.html.\nCheck your solution \u003ctd th:fragment=\"address\"\u003e1234 5th Street\u003c/td\u003e Add some CSS to style your table to make it easier to read and center it on the page. You may need to create a new styles.css as well. Make sure to connect styles.css to the appropriate template with th:href.\nBonus Missions Update your processCreateEventForm method so that you are able to create a new event using the new HashMap.\nYou will also need to update your events/create template so that a user can enter a description. Try to add one more column to the table with pictures for each coding event. You need to use th:href to pull in pictures in the appropriate template.",
    "description": "In the chapter, we started working on an application for tracking various coding events around town.\nOpen up your codingevents project in IntelliJ.\nGetting Started From your own add-bootstrap branch, create and checkout a new branch called my-views-exercises-solution.\nNote If you need to make sure your code matches ours to start, look at the add-bootstrap branch on CodingEventsJava.\nNow, let’s add descriptions to our events!\nExpanding our Events Schedule In the videos, we learned how to use templates to display the elements in a static list called events.",
    "tags": [],
    "title": "Exercises: Thymeleaf Views",
    "uri": "/thymeleaf-views/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "We’ve created a basic API application here . Before we ask you to fork and clone this, let’s first think conceptually about the kinds of requests a client application could make to this API.\nThe API The api starts by only exposing a single resource, Event, and four endpoints for interacting with it.\nThe Resource The shape of the Event resource describes the general form of its properties and value types:\n1 2 3 4 5 Event { id: integer name: string description: string } In our case, the Event shape is just the properties and types (translated to portable JSON types defined in a Event model class.\n1 2 3 4 5 6 7 8 9 public class Event { public int id; public string name; public string description; ...getters ...setters } An example of a real Event JSON response to a GET request would look like this:\n1 2 3 4 5 { \"id\": 1, \"name\": \"LaunchCode API demo\", \"description\": \"Learn how to use Postman to interact with an API!\" } Notice how this JSON is just a representation of an instance of the Event model class. The data shape has been converted from a Java object representation to a JSON string representation so it can be transported over HTTP. Recall that we perform this conversion, or serialization, so that our API can output data in a portable format that is language-agnostic.\nThe Endpoints This branch of the API has four endpoints:\nGET Coding Events GET a Single Coding Event Create a Coding Event Delete a Coding Event Get Coding Events We’ll ask you to consider some details of how to describe these endpoints.\nRemember, an endpoint is made up of a path (to the resource) and a method (action to take on the resource). Because we only have one resource, each of our endpoints share a common entry-point path of /events. Request and response bodies are all in JSON, or more specifically, they have a Content-Type header value of application/json.\nMaking a GET request to the entry-point of a resource should return a representation of the state of the collection. In our case, this representation is a JSON array with Event elements:\n[ Event { ... }, ... ]If the current state of the collection is empty, then we will just get back an empty JSON array:\n1 [] Question Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? GET a Single Coding Event If you want to view the representation of a single entity, you need to provide information to uniquely identify it in the collection. Since the entry-point represents the collection, it can be followed by an id value in the path to look inside the collection and return just the corresponding entity.\nWhen describing entity endpoints, we use a path variable notation, {variableName}, to symbolize where the value needs to be put in the path.\nIf an entity with the given id is found, we will get a single Event JSON object back. If it is not found, we will receive a response with a 404 status code to indicate the failed lookup.\nQuestion Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? If the request contains an error, what information can we expect to be included in the response? Create a Coding Event Think about what it means to create an entity. You need to provide the required data and the collection it belongs to. When we want to create an Event, we are asking the API to change the state of the collection (the list of entities) so our path must be /events. Recall that the “C” in CRUD stands for “create”. Putting the resource and the action together, we know we need to POST to the /events endpoint. Finally, as part of our request, we will need to send a request body containing the data required to create the entity.\nThe shape of the NewEvent describes the JSON body that the endpoint expects:\nNewCodingEvent { name: string description: string }When making a request, you would need to send a JSON body like this to satisfy the general shape:\n{ \"name\": \"Halloween Hackathon!\", \"description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\" } Note We only provide the user editable fields, not the unique id which the API handles internally when saving to the database.\nRecall that when a POST request is successful, the API should respond with the 201, or Created, HTTP status code. As part of the 2XX HTTP success status codes, it indicates a particular type of successful response with a special header.\nOne of the REST conventions states that when an entity is created, the response should include both this status and the Location header that provides the URL of the new entity:\nLocation=\u003cserver origin\u003e/events/\u003cnew entity id\u003eAs an example:\n1 Location=http://localhost:8080/events/1 You can then issue a GET request to the Location header value and view the new entity.\nIf the request fails because of a client error, then it will respond with a 400 status code and a message about what went wrong.\nQuestion Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? If the request contains an error, what information can we expect to be included in the response? Delete a Coding Event Deleting a Event resource is an operation on a single entity. Just like the endpoint for getting a single entity, this endpoint requires a id path variable. When a resource is deleted, a RESTful API should respond with a 204 status code. Similar to the 201 status, this code indicates a success with no response body or special headers.\nIf you attempt to delete a resource that doesn’t exist (with an incorrect id), then the endpoint will respond with an expected 404 status and message.\nQuestion Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? If the request contains an error, what information can we expect to be included in the response? Install Postman Now that we’ve explored working with those endpoints, we’re almost ready to start running the API and test sending those requests. You’ll need to install Postman to work with this lesson’s studio and practice running these requests.",
    "description": "We’ve created a basic API application here . Before we ask you to fork and clone this, let’s first think conceptually about the kinds of requests a client application could make to this API.\nThe API The api starts by only exposing a single resource, Event, and four endpoints for interacting with it.\nThe Resource The shape of the Event resource describes the general form of its properties and value types:",
    "tags": [],
    "title": "Exercises: Web APIs and REST",
    "uri": "/web-api-rest/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "Simple authentication allows users to log in to a site with a username and password. To implement authentication, we need to be able to verify that a user’s password is correct. However, you should NEVER store passwords in a database. Seriously. Don’t do it. Ever.\nStoring passwords in a database is incredibly insecure. A hacker may break into the database, gaining access to every user account. Or a deviant employee with access to the database may do the same.\nFortunately, it is possible for us to implement simple authentication without storing passwords, by using a technique called password hashing. Password hashing is a particular type of encryption that we will explore throughout the rest of this section.\nTwo-Way Encryption When you think of encryption, you might think of WWII or the Cold War, when the militaries of various countries exchanged secret messages that were unreadable by their enemies. This type of encryption is two-way encryption. A message is encoded with a key before being sent, and when it is received, it is decoded by another key.\nTwo-way encryption (Created by Munkhzaya Ganbold, licensed via CC BY-SA )\nOne-Way Encryption One-way encryption, also known as hashing, encodes a message in a way that makes it nearly impossible to decode. An algorithm implementing a one-way encryption algorithm is a cryptographic hash function (we’ll usually leave off “cryptographic”). For a specific message, the output of a hash function is a hash.\nThe hashing process is essentially just the top half of the diagram above. While it might not be clear yet, hashing allows us to securely store passwords and still be able to validate a user’s submitted password. Precisely how this is done will be explored in a moment. The diagram below shows the general flow of how hashing works to secure the site.\nIt can be difficult to write a good hash function, so thankfully you will never have to. Over the years, some very smart people have created some very good hash functions. However, it is important to understand how the properties of a hash function allow for secure password storage. For our purposes, it is only important that we consider a hash function to have these properties:\nHash Properties Deterministic: If we encode a message with the function at different points in time then we always get the same result. Hard to reverse: It is infeasible to calculate the input value that yields a given hash. Hash values are ALMOST unique: If a and b are two different messages, then is is extremely unlikely that they have the same hash value. By “extremely unlikely” we mean that this is something like a one-in-a-trillion likelihood (for example, there are only about 8 billion people on earth). Similar messages have VERY different hash values: In other words, if we change a message only slightly, the resulting hash value is very different. A function that returned AlXL3M_ws for the message \"LaunchCode\" and AlXL3M_wt for the message \"LaunchCodf\" would not be a suitable hash function. Password Verification With Hashes Our application will select a particular hash function. Let’s call it h. Then, for a message x, the hash value will be the result of calling h with the argument x. Invoked, this looks like h(x). Rather than store passwords in a database, we will store their hash values.\nConsider a fictional user that wants to sign up for our site, Jamie. Jamie likes Taylor Swift, so their desired username is tswizzle_fan and their desired password is lover1989 (not a great password choice, by the way, but we’ve seen worse).\nWhen Jamie registers for an account on our site, we will call our hash function with their password:\nString hash = h(\"lover1989\"); // returns \"bd62d7e13ef465fa705f30de198ba0cb\"Then we store Jamie’s username along with her hashed password in our user table.\nusername passwordHash tswizzle_fan bd62d7e13ef465fa705f30de198ba0cb This is very secure. Even if somebody breaks into the database and finds Jamie’s info, they will not be able to log in. Since we used a hash function, the hacker will have a very hard time turning the hash into a password (see property 2 above).\nWe can still authenticate Jamie, however. When they come to our site to log in, they will submit a username and password. Let’s call the password value submittedPassword. Some basic logic will allow us to determine, with an extremely high rate of probability, whether or not the pair is valid.\nTo check Jamie’s username/password pair, we can do something like this:\n// fetches Jamie's user object from the database User user = getUserByUsername(\"tswizzle_fan\"); // gets the hash value stored on their object String passwordHash = user.getPasswordHash(); // hashes the submitted password String submittedHash = h(submittedPassword); if (passwordHash.equals(submittedHash)) { // the hashes are the same, the passwords can be assumed to be the same } else { // the hashes are different, so the passwords are definitely different }The conditional compares the values of the hash stored in the database with the hash generated from the submitted password. By property 1 , we know that if the hash values are different, then there is no way the passwords are the same. By property 3 , we can safely assume that the passwords are the same.\nHashing Isn’t Perfect Using hash functions to process passwords is not a cure-all. One vulnerability is the possibility for collisions. A collision occurs when two different messages have the same hash value. By property 3 , this is supposed to be rare. However, if a collision is found for a given hash function, then it may be possible to create an algorithm to generate collisions. In other words, given a specific hash value, the algorithm could generate a string with the same hash value.\nThe once-popular MD5 and SHA1 hash algorithms quickly become obsolete (for cryptographic purposes, at least) once collisions were found.\nMost hashing algorithms become more vulnerable as global computing power increases. If a hacker breaks into a database, they will obtain the hashes of all of its users’ passwords. Since only a small handful of hash functions are commonly used, they might simply try millions of strings with each of the more popular hash functions and wait until they find a match.\nNote The widespread use of brute force attacks is why it is always a bad idea to use a password that:\nis ranked as one of the most commonly used passwords utilizes publicly accessible information about you, such as birth date or address uses common words from the dictionary When trying to crack a password hash using brute force, these are the first items a hacker will attempt to use.\nWhich Hash Function Should I Use? You should use bcrypt . This hash function is considered not only the best hash function at the moment, but also likely to be able to stand the test of time. bcrypt uses hashing best practices (such as salts ) along with an algorithm that can be made to run as long as you like. So even as computing power grows, bcrypt will be resistant to brute force techniques.\nCheck Your Understanding Question True/False: One-way encryption does not involve decryption.\nTrue False Question Which of the following best describes hashing?\nHashing is the process of encrypting plaintext so that it is very difficult to obtain the original message. Hashing is more secure than two-way encryption but less useful because it does not decode an encoded message. Hashing cannot confirm that two passwords are the same because the original values are never saved. Hashing smashing. ",
    "description": "Simple authentication allows users to log in to a site with a username and password. To implement authentication, we need to be able to verify that a user’s password is correct. However, you should NEVER store passwords in a database. Seriously. Don’t do it. Ever.\nStoring passwords in a database is incredibly insecure. A hacker may break into the database, gaining access to every user account. Or a deviant employee with access to the database may do the same.",
    "tags": [],
    "title": "Hashing Passwords",
    "uri": "/authentication/reading/hashing-passwords/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Let’s examine an inheritance relationship between two classes, Cat and HouseCat. HouseCat is a class that inherits from Cat. When defined, HouseCat thus receives the data and behaviors of Cat. These inherited traits are things like fields, properties, and methods. Any fields and non-constructor methods in Cat are available to each instance of HouseCat.\nWhen we speak about an inheritance relationship, we say that a HouseCat is a Cat, or extends Cat. Indeed, in order to define a class that inherits from another, we use the extends keyword.\npublic class Cat { // ...code for the Cat class... } public class HouseCat extends Cat { // ...code for the HouseCat class... }We say that HouseCat is a subclass, derived class, or child class of Cat, and we say that Cat is the superclass, base class, or parent class of HouseCat.\nIn Java, a class may extend only one class. Classes may extend each other in turn, however. This creates hierarchies of classes. We often visualize these by drawing each class as a box, with an arrow pointing from the subclass to the base class.\nNote In the above image, class B is an extension of class A.\nThe shaded portion of these boxes can include additional information about each class. We’ll learn about what we might put here in a little bit.\nInheritance is an essential mechanism for sharing data and behavior between related classes. Using it effectively creates organized code with groups of classes that have increasingly specialized behavior.\nWhen this happens, we can visualize the inheritance structure with a slightly more complex diagram.\nYou can see that classes B, C, and D all extend class A. And class E extends class D which itself extends class A. So class E involves an even greater specialization of behavior than class D.\nFields and non-constructor methods are directly available to instances of the subclass, subject to any access modifiers. In general, this means that private and package-private members of a base class are not accessible to a subclass. The exception to this is that package-private members are accessible to subclasses within the same package.\nNote If anything in the last paragraph was fuzzy, this is a good time to review access modifiers in Java.\nCheck Your Understanding Question Which of the following is NOT a term for one class that extends another:\nsubclass\nderived class\nextension class\nchild class\nQuestion A class, Greeting, extends another class, Message. By convention, how would we represent the relationship between these classes in a diagram?\na. two boxes with an arrow pointing from Greeting to Message\nb. two boxes with an arrow pointing from Message to Greeting\nc. two boxes with Greeting positioned inside of Message\nd. two boxes with Greeting positioned directly beneath Message",
    "description": "Let’s examine an inheritance relationship between two classes, Cat and HouseCat. HouseCat is a class that inherits from Cat. When defined, HouseCat thus receives the data and behaviors of Cat. These inherited traits are things like fields, properties, and methods. Any fields and non-constructor methods in Cat are available to each instance of HouseCat.\nWhen we speak about an inheritance relationship, we say that a HouseCat is a Cat, or extends Cat.",
    "tags": [],
    "title": "Inheritance in Java",
    "uri": "/inheritance/reading/inheritance-java/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "Let’s write a simple “Hello, World” program and watch the JDK in action.\nIn the future, we’ll be doing most of our Java coding with the IntelliJ IDE. IntelliJ contains many features to help us write Java properly and easily, including its own compiler. For now though, we’ll use a simpler text editor so we can demonstrate what we get with the JDK.\nIn the text editor of your choice, create and save a file called HelloWorld.java and include the code below:\n1 2 3 4 5 6 7 8 public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World\"); } } Tip If you are not able to save a file with a .java extension using a text editor, try the following:\nOpen a terminal. Use terminal commands to find the directory you wish to save your new file in. Use the following commands to create your .java file: touch HelloWorld.java Return to your text editor and open the file you just created. Paste in the HelloWorld code from the textbook and save the document. You should now be able to run the program in the terminal by following the rest of the instructions. We’ll discuss the syntax of this program soon, but you can likely predict that this program has an expected output of “Hello, World”. To test this hypothesis, open a terminal window and navigate to the parent directory of your new file. Run:\njava HelloWorld.java You should see your greeting printed!\nWarning Whenever using the terminal in this course, use Git Bash as opposed to Windows Command Prompt.\nRecall from the walk-through on the previous page , Java needs to be compiled before executing. Java version 17 has the capability to compile single-file Java programs without explicitly running a command to compile. If our Hello, World program were more complex and contained another file, we would need to first run javac HelloWorld.java, to compile, followed by java HelloWorld.java.",
    "description": "Let’s write a simple “Hello, World” program and watch the JDK in action.\nIn the future, we’ll be doing most of our Java coding with the IntelliJ IDE. IntelliJ contains many features to help us write Java properly and easily, including its own compiler. For now though, we’ll use a simpler text editor so we can demonstrate what we get with the JDK.\nIn the text editor of your choice, create and save a file called HelloWorld.",
    "tags": [],
    "title": "Java in the Terminal",
    "uri": "/intro-and-setup/java-terminal/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST \u003e Reading",
    "content": "REST is an acronym that stands for REpresentational State Transfer. RESTful web services refer to web technologies that use this design pattern. REST, as we’ve mentioned, is an architectural pattern that provides uniformity and predictability to any API that adheres to it.\nThe same benefits are experienced by the API consumer. REST is a set of guiding principles for supporting the organization of an API’s core responsibilities – managing and transferring data. The REST pattern organizes the external interface, or contract, and does not concern itself with the internal implementation of the API.\nAdopting the REST specification into the design of an API provides consistency during development and consumption. Much like following the patterns of MVC allows other developers to easily understand your code, following REST patterns gives other developers the benefit of understanding how your API is structured and behaves. As an added bonus, a REST API also gives the client application a base-line understanding on how to interact with your API.\nTip The topics of state and representation are purposefully abstract in REST so that they can be applied to any API. Don’t get overwhelmed!\nWhat is State? State is transitional application data that can be viewed or changed by external interaction. Though state is abstract, programmers interact with it using CRUD operations.\nImagine viewing, or reading, the state of an application’s data as it transitions through each of the following interactions:\nBefore creating: Empty state After creating: Initial state After updating: New state After deleting: Empty state You can see that the state is defined by how the data exists after its latest interaction.\nNote The concept of state is both the most abstract and most fundamental aspect of REST.\nWhat is a Representation? Representation refers to a depiction of state that is usable in a given context. In the REST context, state must be represented in a way that is portable and compatible with both the client and API.\nJSON is a data format that provides structure, portability and compatibility. For these reasons, JSON is the standard representation used when transferring state between a client application and an API.\nExample The state of a single CodingEvent entity is represented as a single JSON object:\n{ \"Id\": 1, \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls...\", \"Date\": \"2020-10-31\" }Whereas the state of a collection of CodingEvents is represented by a JSON array of objects.\n[ { \"Id\": 1, \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls...\", \"Date\": \"2020-10-31\" }, { \"Id\": 2, \"Title\": \"WWDC\", \"Description\": \"Worldwide Developers Conference\", \"Date\": \"2023-06-5\" } ]Notice that the state here is represented as the collective state of all of the CodingEvents in the collection.\nTip The process of converting an object representation to a JSON representation is called JSON serialization.\nThe inverse process, where JSON is parsed, or converted back to object representation, is called JSON deserialization.\nTransferring a Representation of State In REST, state is transitioned by interactions between a client and an API. Each transition is driven by transferring a JSON object or collection. A RESTful API is designed to be stateless.\nThis has the following implications:\nThe state of data is maintained by the client application and the database that are on either side of the interface. State transitions are signals containing data representations, driven by the client and facilitated by the API. In order to maintain portability between different client and API contexts, we transfer representations of state. These representations can then be converted between the portable representation (JSON) and the representation that fits a given context (a JavaScript or Java object). Remember, state is defined by an application’s latest CRUD operation. Because every interaction is initiated by the client, we consider the client to be in control of state.\nWhat this means is that the client can:\nRead: request the current representation of state Create \u0026 Update: transition to a new state by sending a new representation Delete: transition to an empty state by requesting its removal However, it is up to the API to define the contract, or expose:\nthe types of state, or resources, the client can interact with which (CRUD) interactions are supported for each resource These decisions are what drive the design of the contract.\nResources While state is an abstract concept, a resource is something more tangible. Simply put, a resource is a type of object that an API allows client applications to interact with. Resources are categorized as an individual entity or a collection.\nEntity: a single resource that is uniquely identifiable in a collection.\nCollection: entities of the same resource type treated as a whole.\nWe refer to the state of a resource in terms of a single entity or the shared state of a collection.\nNote Initially, a collection’s state is just empty. If you were to read the collection’s state, it would be represented as an empty JSON array, [].\nIn RESTful design, an individual entity only exists as a part of a collection. A change to the state of an entity inherently changes the state of the collection it is a part of.\nWhen creating an entity, you are operating on the state of the collection that holds it. In order to create it, you must know what collection the entity belongs to.\nWhen reading, updating or deleting an entity, you are directly operating on the state of the entity and indirectly on the state of its collection.\nIn order to fulfill these operations, you need to know:\nwhat collection the entity belongs to how to uniquely identify the entity within the collection This hierarchal relationship between collections and the entities within them is an integral aspect of RESTful design. The contract of a RESTful API defines the shape, or structure, of its resources along with the hierarchal organization of the endpoints used for interacting with them.\nCheck Your Understanding Question True or False: Using HTTP requests, we can perform all four CRUD operations.\nQuestion Reshaping data from object representation to JSON representation is called:\nJSON parsing\nJSON reshaping\nJSON reserialization\nJSON serialization",
    "description": "REST is an acronym that stands for REpresentational State Transfer. RESTful web services refer to web technologies that use this design pattern. REST, as we’ve mentioned, is an architectural pattern that provides uniformity and predictability to any API that adheres to it.\nThe same benefits are experienced by the API consumer. REST is a set of guiding principles for supporting the organization of an API’s core responsibilities – managing and transferring data.",
    "tags": [],
    "title": "What is REST",
    "uri": "/web-api-rest/reading/what-is-rest/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "The previous section established a persistent many-to-one relationship between Event objects and EventCategory objects. This section demonstrates how to create the inverse one-to-many relationship.\nSetting Up the Relationship - Video Note The starter code for this video is found at the many-to-one branch of the CodingEventsJava repo. The final code presented in this video is found on the one-to-many branch . As always, code along to the videos on your own codingevents project.\nSetting Up the Relationship - Text Creating a one-to-many relationship from categories to events means that each EventCategory object will have access to each event that belongs to it. Near the top of EventCategory, add a new field to store these events.\nModel Configuration private final List\u003cEvent\u003e events = new ArrayList\u003c\u003e();The events field will be initialized when an EventCategory object is created. It is marked final to ensure that the collection isn’t deleted or replaced. Since it is final, only a getter is needed; add one near the bottom of the class.\nNote Recall that when a collection is marked final its contents are allowed to change, but the collection object itself may not be changed. In other words, we may add or remove items from the events list, but we may not reassign the value of events.\nTo establish a persistent relationship, we use the @OneToMany annotation on events. This annotation requires a parameter to let Hibernate know how to determine which events belong to a given category object.\n@OneToMany(mappedBy = \"eventCategory\") private final List\u003cEvent\u003e events = new ArrayList\u003c\u003e();By specifying mappedBy = \"eventCategory\", we are telling Hibernate that for a given category object, someCategory, the events collection should be populated by all events for which the eventCategory field is set to someCategory. To determine this, Hibernate will look at the foreign key column on the events table.\nController Updates In order to use this newly established relationship, we need a controller and view that access the events for a given category. We will create a new view that lists events by category. In other words, given a category ID, the view will display a list of all events in the given category.\nThe end result will look like this:\nNotice that this view is extremely similar to our main view listing all events. The only differences are the title and the specific events in the list. Since both title and events are values that we pass into our events/index.html template, we can use the same template for this view as we have been using for the view at route /events.\nTaking this one step further, we will use the same controller as well. This will allow us to have a route, /events that displays all events if no eventId is specified, but displays a filtered list when a valid eventId is provided. Let’s get to work in EventController.\nThe method at the route /events is displayAllEvents. Since this handler will no longer always display all events, we rename it to displayEvents.\nNote We have renamed this method in the repository linked above, but the video skips this step.\nLet’s view the finished handler method and break down the changes one-by-one:\n29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 @GetMapping public String displayEvents(@RequestParam(required = false) Integer categoryId, Model model) { if (categoryId == null) { model.addAttribute(\"title\", \"All Events\"); model.addAttribute(\"events\", eventRepository.findAll()); } else { Optional\u003cEventCategory\u003e result = eventCategoryRepository.findById(categoryId); if (result.isEmpty()) { model.addAttribute(\"title\", \"Invalid Category ID: \" + categoryId); } else { EventCategory category = result.get(); model.addAttribute(\"title\", \"Events in category: \" + category.getName()); model.addAttribute(\"events\", category.getEvents()); } } return \"events/index\"; } Update 1: Optional categoryId Parameter In order to filter events by category, we need the ID of a category to filter by. The handler now has a new parameter:\n@RequestParam(required = false) Integer categoryIdThis allows requests to URLs like /events?categoryId=1. By specifying required = false we are telling Spring that it should call this handler for requests to the path /events even if no such ID is specified. This allows us to preserve our existing behavior that lists all events at /events. If no categoryId is specified in the request, then the categoryId parameter will be null when the handler is called.\nUpdate 2: null Check Much of the method consists of a large if/else if/else block.\nBefore filtering by category, we check for the existence of the categoryId parameter. The first part of the conditional block is:\nif (categoryId == null) { model.addAttribute(\"title\", \"All Events\"); model.addAttribute(\"events\", eventRepository.findAll()); }If no categoryId is passed in, we carry out the same behavior as before, passing all events into the view.\nUpdate 3: Ensuring the Category Object Exists If the conditional check above fails, then we have a non-null categoryId. However, this does not guarantee that an object with the given ID exists in the database. We must manually check for the existence of such an object.\nHere’s our conditional block with the next piece added:\n32 33 34 35 36 37 38 39 40 41 42 if (categoryId == null) { model.addAttribute(\"title\", \"All Events\"); model.addAttribute(\"events\", eventRepository.findAll()); } else { Optional\u003cEventCategory\u003e result = eventCategoryRepository.findById(categoryId); if (result.isEmpty()) { model.addAttribute(\"title\", \"Invalid Category ID: \" + categoryId); } else { // TODO } } Line 36 queries our repository for a category object with the given ID. Notice that the findById method returns not an EventCategory object, but something of type Optional\u003cEventCategory\u003e. Huh?\nReferring to the documentation for the CrudRepository.findById method, we see that it returns an Optional instance. We don’t currently know what the heck that is, but referring to the documentation for Optional describes how to use this class.\nEssentially, by returning an Optional\u003cEventCategory\u003e object, the findById method is taking into account the exact situation we are in, that an object with such an ID may not exist. An Optional object can be thought of as a container for the results of our query. If such an object does exist, we can get it using Optional.get(). Otherwise, Optional.isEmpty() will return true.\nOn lines 37-38 we use this fact to check to see if an EventCategory object was found. If not, we display an error message in the title.\nTip As you wade into vast waters of Java and Spring, you will frequently find yourself needing to use a method or class that you have not encountered before. In such cases, be brave and remember that you don’t have to understand all of the documentation for a method or class in order to use it.\nUpdate 4: Retrieving Events For the Given Category We are finally ready to consider the full conditional:\n32 33 34 35 36 37 38 39 40 41 42 43 44 if (categoryId == null) { model.addAttribute(\"title\", \"All Events\"); model.addAttribute(\"events\", eventRepository.findAll()); } else { Optional\u003cEventCategory\u003e result = eventCategoryRepository.findById(categoryId); if (result.isEmpty()) { model.addAttribute(\"title\", \"Invalid Category ID: \" + categoryId); } else { EventCategory category = result.get(); model.addAttribute(\"title\", \"Events in category: \" + category.getName()); model.addAttribute(\"events\", category.getEvents()); } } Lines 39-42 will only execute if we know for sure that a category with the given ID exists. In this case, we extract the category from the Optional object result using the get() method. Then we create an appropriate title using the category name, and pass the events belonging to the category into the view.\nLine 42 is what we have been building up to this entire time. Our category object now has an events field that is populated using the @OneToMany annotation that we added near the beginning of this section, allowing the inverse relationship to be established.\nNow, not only do events have categories, but categories know which events they contain.\nLinking to Filtered Views With our new controller logic in place, we have one small update to make before we can fully use this new functionality.\nWe need to provide a way for the user to access our new filtered views. In the eventCategories/index.html template, modify the loop within the table to include a link to the filtered view for each category:\n\u003ctr th:each=\"category : ${categories}\"\u003e \u003ctd\u003e\u003ca th:text=\"${category.name}\" th:href=\"'/events?categoryId=' + ${category.id}\"\u003e\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003eThe logic in th:href uses string concatenation to create the appropriate URL for each category.\nWith this code in place, start up our application and test out the new functionality! Be sure to navigate to /eventCategories to see your new links to the filtered views. Also, be sure to test that /events still displays all events.\nCheck Your Understanding Question Which of the following is NOT a CrudRepository method? Check all that apply.\n.findAll() .findById() .value() .get() Question True/False: The nested conditional in displayEvents in the coding-events repo helps curtail an exception making its way to the user.",
    "description": "The previous section established a persistent many-to-one relationship between Event objects and EventCategory objects. This section demonstrates how to create the inverse one-to-many relationship.\nSetting Up the Relationship - Video Note The starter code for this video is found at the many-to-one branch of the CodingEventsJava repo. The final code presented in this video is found on the one-to-many branch . As always, code along to the videos on your own codingevents project.",
    "tags": [],
    "title": "Creating a One-to-Many Relationship",
    "uri": "/orm-relationships/reading/one-to-many/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping",
    "content": "After completing this chapter, you are ready to tackle authentication. If you would like to learn more about Spring and ORM, here are a few resources.\nSpring ORM Example Using Hibernate Spring Documentation ",
    "description": "After completing this chapter, you are ready to tackle authentication. If you would like to learn more about Spring and ORM, here are a few resources.\nSpring ORM Example Using Hibernate Spring Documentation ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/orm-relationships/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 11: Rules to the Exceptions",
    "content": "The next chapter covers tools that we use in IntelliJ, including debugging tools. Here are some of our favorite resources on exceptions if you want to review them before reading on.\nOracle tutorial W3Schools ",
    "description": "The next chapter covers tools that we use in IntelliJ, including debugging tools. Here are some of our favorite resources on exceptions if you want to review them before reading on.\nOracle tutorial W3Schools ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/exceptions/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation",
    "content": "We’ll build on the User Signup studio from last class, adding in model validation.\nGetting Started Open up your spaday application and checkout the user-signup-pt2 branch.\nAdd Validation Annotations Navigate to the User model class. Add validation annotations to ensure these conditions are satisfied:\nUsername, password, and verify are required (they can’t be empty) Username is between 5 and 15 characters Email is optional If provided, the email has the format of a valid email address. The password is at least 6 characters long Using the Model to Render the Form In the UserController, modify the add method that displays the form so that it passes in an empty User object with:\nmodel.addAttribute(new User());This object will be accessible in the template, by name, as user.\nTip Now that you’re passing in an empty User object, you may notice some redundant code in your processAddUserForm controller. Remove the model attribute additions and update the user/add template to make use of the model fields (eg. user.username).\nWhile you’re in the add.html template remove the type=\"email\" designation from the email input. The last studio had you add this type to provide some client-side validation on the email field, but we shouldn’t consider that sufficient. Now that we know how to use model validation to validate an email field, we’ll favor this technique over client-side validation. Even with client-side validation (that is, in the browser), you should always validate data on the server as well. You might want to provide constraints in addition to or beyond what the browser does, and it’s also possible for a clever (or, more often, malicious) user to bypass the browser’s validation. For this studio, we’ll remove the input type to make it easier to test the server-side validation.\nValidating Form Submission Data Now that you have your form set up, go back to UserController and add validation on form submission by adding the @Valid annotation to the User parameter that is bound, along with an additional parameter: Errors errors.\nWarning Remember, you must put this parameter directly after the User parameter in the method definition for it to work properly.\nWithin the processAddUserForm handler, check for errors configured by the validation annotation using errors.hasErrors(). If this returns true, return the user to the form.\nValidating That Passwords Match As we mentioned above, we are not able to use Spring’s validation machinery to validate that the two password fields match given the setup we have here. Checking errors.hasErrors() will only tell us if there are errors in other form data fields.\nLast studio, we added some validation checks to make sure the password fields match. Now we have two validation sections: one for the annotation-configured validation (which checks errors.hasErrors()), and one that checks that the password fields match. Make sure they work in-sync with each other to properly return to the form if any of the validation conditions fail.\nTip You can, in fact, validate that passwords match using annotations by taking a slightly more difficult approach than we’ve done here. We outline how to do so in the Bonus Mission section.\nTest, Test, Test! You made a lot of changes! Be sure to thoroughly test them to make sure everything works as expected.\nBonus Mission Let’s set up our User class so we can validate that the password fields match using annotations.\nAdd a private String verifyPassword field to User, along with getters and setters. Add a new method, private void checkPassword, that compares password and verifyPassword. If neither is null and they don’t match, then set verifyPassword = null. In both setPassword and setVerifyPassword, call checkPassword after setting the given field. Add @NotNull to the verifyPassword field with the error message: “Passwords do not match”. Refactor the controller and add.html template to use the built-in, annotation-based validation instead of the manual password validation that we carried out previously. Be sure to update the verify field and label in the form to use the field on the User class, and to remove String verify from the add method signature. The result of these changes is that when the User object is bound to the request, both password and verifyPassword are set. Spring does this by calling the setters on these fields. The setters call checkPassword, so when the second one is set (whichever that may be), we’ll know that both password and verifyPassword are not null and we’ll compare them. If they don’t match, we manually violate the @NotNull validation on verifyPassword by setting that field to null.",
    "description": "We’ll build on the User Signup studio from last class, adding in model validation.\nGetting Started Open up your spaday application and checkout the user-signup-pt2 branch.\nAdd Validation Annotations Navigate to the User model class. Add validation annotations to ensure these conditions are satisfied:\nUsername, password, and verify are required (they can’t be empty) Username is between 5 and 15 characters Email is optional If provided, the email has the format of a valid email address.",
    "tags": [],
    "title": "Studio: Spa User Validation",
    "uri": "/spring-model-validation/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation \u003e Reading",
    "content": "Validation involves both model and controller components of an MVC application. After we have defined validation rules using annotations on the model, we must also update the controller to ensure that the rules are checked and appropriate action is taken when validation fails.\nValidation Flow Before diving into the details of the code, let’s consider the logical flow of control for validating data in a request. Recall our POST handler from the previous chapter, which used model binding to create new Event objects from form submissions.\n@PostMapping(\"create\") public String processCreateEventForm(@ModelAttribute Event newEvent) { EventData.add(newEvent); return \"redirect:\"; }The flow of this request can be described as follows:\nServer receives POST request Server creates newEvent object using request parameters processCreateEventForm is called with newEvent newEvent is saved A 303 redirect response is returned, redirecting the user to /events The request creates an Event object using data from the incoming request. Regardless of what the data looks like, the new object is saved to the data layer. The user could submit an empty form, with no name or description filled in, and our code would be happy to create an Event and save it. Similarly, a user could submit the full text of the massive novel “War and Peace” as the description. This isn’t great.\nNote Technically, submitting a request containing “War and Peace” would fail with most applications. This is because web servers typically set a limit on the maximum size of a POST request. However, our application code is willing to take requests of any size, at this point.\nSome modest validation rules for a new Event object might be:\nThe name field must contain between 3 and 20 characters, and The description field may be empty, but may contain no more than 500 characters. With these rules in place, conceptually, the flow of our controller code should look more like the following:\nServer receives POST request Server creates newEvent object using request parameters processCreateEventForm is called with newEvent Controller checks for validation errors in the model object. If errors are found, return the user to the form. Otherwise, proceed. newEvent is saved A 303 redirect response is returned, redirecting the user to /events Let’s look at how we can practically do this within Spring Boot.\nHandling Validation Errors - Video Note The starter code for this video is found at the add-validation-annotations branch of the CodingEventsJava repo. The final code presented in this video is found on the validation-errors branch . As always, code along to the videos on your own codingevents project.\nHandling Validation Errors - Text When using model binding, we can use Spring Boot annotations and tools to validate new model objects before they are saved to a data layer or database.\nUsing @Valid Within EventController, the processCreateEventForm handler method uses model binding to receive an Event object that is created using form data. This object is NOT validated automatically, even if validation annotations are present on its fields.\nRecall that both the model and controller play a role in validation. The model’s responsibility is simply to define validation rules. The controller must check that those rules are satisfied.\nThe first step to enable validation in a controller is to add @Valid to a method parameter that is created using model binding.\n@PostMapping(\"create\") public String processCreateEventForm(@ModelAttribute @Valid Event newEvent) { EventData.add(newEvent); return \"redirect:\"; }In lieu of explicit validation error handling (which we will cover below), Spring Boot throws an exception if validation fails for the new object. This means that an object that fails validation will NOT be saved.\nHowever, the user experience for this flow is not great. If a user submits bad data, rather than showing them a complicated stack trace, we would be better off to provide a helpful message and allow them to try again.\nNote Remember, exceptions should be messages to programmers and programs, not end users. Even if an exception occurs, we should avoid displaying it to the user.\nUsing the Errors Object We can prevent a validation exception from being thrown by explicitly handling validation errors. Spring Boot makes an object of type Errors available when a method uses @Valid. As with Model objects, we can access this object by placing it in a method’s parameter list.\n33 34 35 36 37 38 39 40 41 42 43 44 @PostMapping(\"create\") public String processCreateEventForm(@ModelAttribute @Valid Event newEvent, Errors errors, Model model) { if(errors.hasErrors()) { model.addAttribute(\"title\", \"Create Event\"); model.addAttribute(\"errorMsg\", \"Bad data!\"); return \"events/create\"; } EventData.add(newEvent); return \"redirect:\"; } Here, we have added Errors errors to our handler. This object has a boolean method, .hasErrors() that we can use to check for the existence of validation errors. If there are validation errors, we return the form again, along with a simple message for the user. This message can be displayed in the events/create template by adding some code above the form:\n\u003cp th:text=\"${errorMsg}\" style=\"color:red;\"\u003e\u003c/p\u003eNow, when a user submits the form with bad data they will be notified and no exception will be thrown. However, the message “Bad data!” is far from ideal. The next section introduces a technique to display more useful error messages.\nCheck Your Understanding Question Which of the following statements are true?\nA method parameter may have only one annotation. @Valid can only be used in conjunction with model binding. Using @Valid means that a method will never be called with invalid data. Spring Boot can infer validation requirements based on the name of a field. ",
    "description": "Validation involves both model and controller components of an MVC application. After we have defined validation rules using annotations on the model, we must also update the controller to ensure that the rules are checked and appropriate action is taken when validation fails.\nValidation Flow Before diving into the details of the code, let’s consider the logical flow of control for validating data in a request. Recall our POST handler from the previous chapter, which used model binding to create new Event objects from form submissions.",
    "tags": [],
    "title": "Validating Models in a Controller",
    "uri": "/spring-model-validation/reading/validation-controller/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 12: Tools in Intellij",
    "content": "The purpose of this studio is to expand your current debugging strategies. First, as a group, you will discuss your current debugging strategies. Next, you will explore the debugger tools addressed in this chapter.\nThis studio will use a previous studio assignment to explore IntelliJ’s Debugger. On your machine, open up your copy of java-web-dev-projects in IntelliJ and navigate to the project for the interfaces studio.\nPart One: Pre-Debugger Debugging Share with the group one error you encountered when working on your version of the interfaces studio. This could be the result of a typo or a logical error.\nWhat was the error? How did you solve this error? What strategies and tools have you been using so far to debug your code? Could one of the debugging tools help you when addressing this error? Part Two: Debugger Debugging Now, check out the debugging branch of the studio repo. Review the code and then practice using IntelliJ’s debugging tools. To get started, try the following:\nAdd a few breakpoints inside Main.java. Make a note of where you expect the program to break in its execution. Add cd.name as a Watch expression in the Variables Pane of the Debugger. Add a breakpoint inside some of the methods in BaseDisc.java. Anticipate what you expect to see as the last line in the Variables Pane when the debugger stops. Part Three: More Debugger Debugging Take your debugging skills one step further by answering these questions.\nWhen would use a Watch expression? If you run the app and it’s already functioning, what shows up there? Would a conditional breakpoint make sense to use in the context of this app? Try adding a conditional breakpoint and then run your app. What does the Frames Pane tell you as you step through your code? Add dvd.aName as a Watch expression and add a breakpoint. Can you explain the output in the Variables Pane? Part Four: Debugging Beyond This Studio Once you have worked through the studio’s codebase, open up a piece of code you have been struggling with. In what ways, could the debugging tools help you figure out what is going on with the code?",
    "description": "The purpose of this studio is to expand your current debugging strategies. First, as a group, you will discuss your current debugging strategies. Next, you will explore the debugger tools addressed in this chapter.\nThis studio will use a previous studio assignment to explore IntelliJ’s Debugger. On your machine, open up your copy of java-web-dev-projects in IntelliJ and navigate to the project for the interfaces studio.\nPart One: Pre-Debugger Debugging Share with the group one error you encountered when working on your version of the interfaces studio.",
    "tags": [],
    "title": "Studio: If It Ain't Broke, Add a Breakpoint!",
    "uri": "/tools-in-intellij/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 6: Unit Testing",
    "content": "For this studio, you will be writing unit tests to help you find errors in provided code.\nGetting Started Locate the balanced-brackets project in java-web-dev-projects/unit-testing/studio directory.\nOpen the balanced-brackets project in IntelliJ.\nWrite unit tests to find the errors in BalancedBrackets.\nThe tests you write should guide how you revise the source code. Use TDD to first write tests that will work for the desired behavior of BalancedBrackets. When your tests fail, correct the class to pass your tests. The content of your tests is up to you, but you should write at least 12 tests. Tip Here’s a first test to help get you started:\nAssert that brackets in the correct order, \"[]\", return true.\n@Test public void onlyBracketsReturnsTrue() { assertTrue(BalancedBrackets.hasBalancedBrackets(\"[]\")); } Note BalancedBrackets is essentially a wrapper class for a method. And because it’s only method is static, we don’t need to create an instance to test hasBalancedBrackets().\nTip Discuss with your fellow students and TA how the\nclass should behave. What are some examples of input, and what would the desired output be for each input?\nUploading Your Work Push your work to save your solution in your remote repository.",
    "description": "For this studio, you will be writing unit tests to help you find errors in provided code.\nGetting Started Locate the balanced-brackets project in java-web-dev-projects/unit-testing/studio directory.\nOpen the balanced-brackets project in IntelliJ.\nWrite unit tests to find the errors in BalancedBrackets.\nThe tests you write should guide how you revise the source code. Use TDD to first write tests that will work for the desired behavior of BalancedBrackets. When your tests fail, correct the class to pass your tests.",
    "tags": [],
    "title": "Studio: Unit Testing",
    "uri": "/unit-testing/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Upon completing all the material in this chapter, you should be able to do the following:\nUse basic control flow structures Create and work with common collections objects Understand how to choose a collection type for a given problem Key Terminology Here is a list of the key terms you will find throughout the chapter organized by the page upon which they first appear.\nConditionals Operators if statements else clause else if switch case break fallthrough Loops for loop for-each loop while loop do-while loop continue Collections collections Java Collections Framework ArrayList ArrayList generic class generic type ArrayList.add() ArrayList.size() Array bracket notation Content Links Reading Exercises: Control Flow and Collections Studio: Counting Characters Next Steps ",
    "description": "Learning Objectives Upon completing all the material in this chapter, you should be able to do the following:\nUse basic control flow structures Create and work with common collections objects Understand how to choose a collection type for a given problem Key Terminology Here is a list of the key terms you will find throughout the chapter organized by the page upon which they first appear.\nConditionals Operators if statements else clause else if switch case break fallthrough Loops for loop for-each loop while loop do-while loop continue Collections collections Java Collections Framework ArrayList ArrayList generic class generic type ArrayList.",
    "tags": [],
    "title": "Chapter 3: Control Flow and Collections",
    "uri": "/control-flow-and-collections/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections \u003e Reading",
    "content": "Data Structures A data structure lets us hold on to lots of data in a single place. It is a programming construct to aggregate lots of values into one value. Many types of data structures exist in various languages. A few examples are lists, dictionaries, arrays, tuples, etc.\nJava Collections Framework Java provides powerful and flexible structures to store data, known as collections. The Java collections framework refers to the various interfaces the language provides for implementing collection types.\nHere, we’ll discuss a collection called ArrayList and compare it to the Array class. We’ll then introduce a third collection type called HashMap. These three collection types will be sufficient for our basic Java needs. For more, refer to the official Java documentation on collections .\nGradebook, Three Ways We’ll explore collections in Java by looking at different versions of the same program. The program functions as a gradebook, allowing a user (a professor or teacher) to enter the class roster for a course, along with each student’s grade. It then prints the class roster along with the average grade. In each variation of this program, the grading system could be anything numeric, such as a 0.0-4.0 point scale, or a 0-100 percentage scale.\nA test run of the program might yield the following:\nEnter your students (or ENTER to finish): Chris Jesse Sally Grade for Chris: 3.0 Grade for Jesse: 4.0 Grade for Sally: 3.5 Class roster: Chris (3.0) Jesse (4.0) Sally (3.5) Average grade: 3.5 We’ll look at the gradebook using an Arraylist first.\nNote To run the code as you learn about different collections, navigate to the control-flow-and-collections directory in java-web-dev-projects. Within this directory, you will find a chapter-example directory with a working IntelliJ project inside. The student-example project has three classes that show how each of the three collections we are covering in this chapter can be used to make a gradebook application.",
    "description": "Data Structures A data structure lets us hold on to lots of data in a single place. It is a programming construct to aggregate lots of values into one value. Many types of data structures exist in various languages. A few examples are lists, dictionaries, arrays, tuples, etc.\nJava Collections Framework Java provides powerful and flexible structures to store data, known as collections. The Java collections framework refers to the various interfaces the language provides for implementing collection types.",
    "tags": [],
    "title": "Collections",
    "uri": "/control-flow-and-collections/reading/collections/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections",
    "content": "In this studio, you will write a program to count the number of times each character occurs in a string and then print the results to the console.\nFeel free to prompt the user for a string. However, for the sake of simplicity, you might want to start by hard-coding some text and storing it in a variable. For your convenience, here is a quote from the movie Hidden Figures:\nIf the product of two terms is zero then common sense says at least one of the two terms has to be zero to start with. So if you move all the terms over to one side, you can put the quadratics into a form that can be factored allowing that side of the equation to equal zero. Once you’ve done that, it’s pretty straightforward from there.\nTip Remember, you can turn a String object into an array of characters using:\nchar[] charactersInString = myString.toCharArray(); Some Items to Ponder Before Starting Within the control-flow-and-collections directory in java-web-dev-projects, create a new directory called studio. Within the studio directory, create a new IntelliJ project called counting-characters for working on this task.\nThere are multiple ways to approach this task, but one way involves the following steps:\nLoop through the string one character at a time, Store and/or update the count for a given character using an appropriate data structure. Loop through the data structure to print the results (one character and its count per line). Which type of data structure (ArrayList, HashMap, or Array) should you use to store character counts? Any can be made to work, but there is a BEST choice.\nYou’ll need to initialize the counts for the characters in some fashion. It’s probably better to do this as you go through the string instead of doing so before you loop through it. (WHY?)\nIf you need to review how to create a new class, revisit the instructions in Studio: Area of a Circle.\nDon’t forget to check out the Bonus Missions below.\nSample Output For the example string above, your output should look something like:\nI: 1 O: 1 S: 1 ’: 2 : 66 a: 20 b: 2 c: 7 d: 7 e: 32 f: 9 g: 2 h: 13 i: 11 l: 6 ,: 2 m: 8 n: 12 .: 3 o: 31 p: 3 q: 3 r: 18 s: 16 t: 38 u: 8 v: 3 w: 5 y: 5 z: 3 Bonus Missions Try these modifications on your code:\nPrompt the user to enter the string in the command line. Make the character counts case-insensitive. Exclude non-alphabetic characters. Super Bonus Read the string in from a file.\nNote This is a hard one. We won’t talk about reading from files in Java in this course, so be ready for a tough challenge if you accept this mission.",
    "description": "In this studio, you will write a program to count the number of times each character occurs in a string and then print the results to the console.\nFeel free to prompt the user for a string. However, for the sake of simplicity, you might want to start by hard-coding some text and storing it in a variable. For your convenience, here is a quote from the movie Hidden Figures:",
    "tags": [],
    "title": "Studio: Counting Characters",
    "uri": "/control-flow-and-collections/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "We mentioned previously that interfaces share some characteristics with abstract classes. Recall that an abstract class is one declared with the abstract keyword. You may not create an object from an abstract class, and like an interface, an abstract class is allowed to contain methods that only have signatures (that is, they don’t have implementation code).\nThe main differences between interfaces and abstract classes are:\nYou implement an interface, while you extend an abstract class. The net effect of this is that a class may implement interfaces while also extending a class. Note that while you can implement more than one interface, you can only extend one class.\nAbstract classes may contain non-constant fields, while interfaces can only contain constant fields.\nInterfaces may only contain implementation code inside of default or static methods. Therefore, interfaces can’t contain methods that need to be shared by class instances in the same way that abstract classes do. In particular, any method that needs to use an instance property may not be part of an interface, since interfaces don’t have instance properties. Unlike interfaces, abstract classes may have methods which are not static or default and which do have instance properties.\nWe should use abstract classes to collect and specify behavior by related classes, while we should use an interface to specify related behaviors that may be common across unrelated classes.\nExample Let’s go back to our Feedable interface. If we want to add a Dog class to our application, we might implement the Feedable interface for our Dog class. This makes sense as dogs are creatures that we feed. However, as dogs and cats are so different, it is unlikely that they would share many behaviors through the Pet class.\nCheck Your Understanding Question Check all statements that are TRUE about the differences between interfaces and abstract classes.\nYou extend an abstract class, but implement an interface. You can implement many interfaces and many classes. Interfaces cannot contain non-constant fields, but abstract classes can. Methods that use instance properties can be in both interfaces and abstract classes. ",
    "description": "We mentioned previously that interfaces share some characteristics with abstract classes. Recall that an abstract class is one declared with the abstract keyword. You may not create an object from an abstract class, and like an interface, an abstract class is allowed to contain methods that only have signatures (that is, they don’t have implementation code).\nThe main differences between interfaces and abstract classes are:\nYou implement an interface, while you extend an abstract class.",
    "tags": [],
    "title": "Interfaces and Abstract Classes",
    "uri": "/interfaces/reading/abstract-classes/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": "Although they look the same, the old optical discs—CDs and DVDs—are quite different from each other. Let’s use them as the focus for creating a new interface.\nGetting Ready Open the studio folder inside the interfaces directory within java-web-dev-projects.\nDisc Project Overview In this activity, you will pair up to design a new custom interface.\nTake a look at the prepared CD and DVD classes in the starter code—only their signatures are present. You will add fields and methods by extending a base class and implementing your interface. Before you do this, however, you need to consider what code to place in the interface vs. the abstract class vs. each specific class.\nJust like you did with your Restaurant Menu studios, you will begin with pen and paper (or similar tools).\nConsider Generic Behaviors Here are a few behaviors that both CDs and DVDs share:\nThey both spin,\nThey both store data,\nData gets written to the discs by using a laser,\nThe data on the discs can be read by using a laser,\nOnce loaded, they both report information like name, capacity, contents, and disc type.\nWith your partner, add one or two more behaviors to the list. Feel free to do some quick research online if needed. Note that information like storage capacity does NOT belong on this list, since it describes a property (field) rather than a behavior (method).\nFor each behavior, identify if it depends on any type of instance variable. For example, the spinning behavior does not require any field information from the CD or DVD classes.\nThis collecting and sorting of behaviors is the first step toward designing your interface and abstract class. It prompts you to consider behaviors that can be generally applied vs. those that depend on data stored in a specific object.\nConsider Class-Specific Behavior and Data Next, you and your partner need to decide which behaviors go into the interface vs. an abstract class.\nBehaviors added to an interface do NOT have to be identical for every object that implements the interface. The key is that the methods require no object-specific data. The methods can accept parameters, but these should represent generic values like String searchTerm rather than field data like DVD.title.\nFor example, even though CDs and DVDs both spin, they do so at different speeds. Their behavior (spinning) is the same, but the details of that behavior vary. Thus, a method like spinDisc() fits well into an interface.\nFor the other behaviors you and your partner sorted, decide which ones belong in the interface.\nWrite down details about how these behaviors differ for CDs and DVDs. This guides your thinking about how each class should override the methods.\nFor the behaviors that cannot go into the interface, decide if they could be placed in an abstract class or if they need to appear in the separate CD and DVD classes.\nFinally, write down the fields needed to define the properties of a CD or DVD (e.g. storageCapacity). Consider:\nWhich fields are shared by both types of discs, and which ones are unique to each class?\nDo any of the fields represent constants?\nCode the Interface Now that your team has completed the before-coding thinking, it’s time to start building!\nAdd an OpticalDisc file for the interface. Refer back to Creating an Interface if you need a quick review of the syntax.\nDeclare and initialize any constant fields.\nAdd a method signature for each of the behaviors you identified for the interface. For example:\nvoid spinDisc();Good work. Now you need to step back from the interface for a moment and take care of the remaining methods and fields.\nCode the Abstract Class To streamline the field and constructor code for CD and DVD, you need to start with a base class.\nCreate an abstract BaseDisc class and declare the fields used by both CD and DVD.\nCode the shared constructors, getters, setters, and custom methods.\nOK. Now put your code to work.\nComplete the Disc Classes Extend the base class into the CD and DVD classes.\nImplement the interface in each class.\nFill in the @Override code for each of the interface methods.\nTip You can hover over the implements keyword and click the IntelliJ suggestions to generate these method signatures.\nSince these are signatures only, you will need to add specific code to each method.\nAdd getters, setters, and any custom methods needed by each class.\nAdd Method Calls to Main In the main method, declare and initialize a CD and DVD object, then run each of the behaviors you and your partner identified.\nExample 1 2 myCd.spinDisc(); myDvd.spinDisc(); Output\nA CD spins at a rate of 200 - 500 rpm. A DVD spins at a rate of 570 - 1600 rpm. Bonus Missions: Other Discs \u0026 Disks? CDs and DVDs are not the only flat, circular media that have been used to store and return data.\nAdd classes for vinyl records (LPs) and floppy disks.\nDoes your interface apply to all four classes? If so, implement the interface into the LP and floppy classes, and complete the appropriate override methods.\nIf your interface does NOT apply to all of the classes, modify it to do so. (Note: At the very least, you need to rename the interface).\nDoes your abstract class apply to LPs and floppy disks? If so, extend it into the new classes. If not, should you modify it or extend a different abstract class?\nWhat about wheels and Frisbees? These are also spinning disks, but they are not used for data storage.\nAbstract class or interface? Which one can be applied to the Wheel and Frisbee classes?\nDiscuss these questions with your peers, then code one of the classes just for fun.",
    "description": "Although they look the same, the old optical discs—CDs and DVDs—are quite different from each other. Let’s use them as the focus for creating a new interface.\nGetting Ready Open the studio folder inside the interfaces directory within java-web-dev-projects.\nDisc Project Overview In this activity, you will pair up to design a new custom interface.\nTake a look at the prepared CD and DVD classes in the starter code—only their signatures are present.",
    "tags": [],
    "title": "Studio: Spinning the Discs",
    "uri": "/interfaces/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2",
    "content": "Work on these exercises in the IntelliJ java-web-dev-projects/classes-part-two/exercises project. You will update your Student.java file by implementing the addGrade and getGradeLevel methods that were sketched out in the Instance Methods section.\n1. The getGradeLevel Method This method returns the student’s level based on the number of credits they have earned: Freshman (0-29 credits), Sophomore (30-59 credits), Junior (60-89 credits), or Senior (90+ credits).\nCheck your solution public static String getGradeLevel(int credits) { if (credits \u003c= 29){ return \"freshman\"; } else if (credits \u003c= 59){ return \"sophomore\"; } else if (credits \u003c= 89) { return \"junior\"; } else { return \"senior\"; } } 2. The addGrade Method This method accepts two parameters—a number of course credits and a numerical grade (0.0-4.0). With this data, you need to update the student’s GPA.\nGPA Information GPA is computed via the formula:\ngpa = (total quality score) / (total number of credits)\nThe quality score for a class is found by multiplying the letter grade score (0.0-4.0) by the number of credits.\nThe total quality score is the sum of the quality scores for all classes.\nFor example, if a student received an “A” (worth 4 points) in a 3-credit course and a “B” (worth 3 points) in a 4-credit course, their total quality score would be: 4.0 * 3 + 3.0 * 4 = 24. Their GPA would then be 24 / 7 = 3.43.\nDetermine the New GPA To update the student’s GPA:\nCalculate their current total quality score by using the formula gpa * numberOfCredits. Use the new course grade and course credits to update their total quality score. Update the student’s total numberOfCredits. Compute their new GPA. Check your solution 1 2 3 4 5 6 public void addGrade(int courseCredits, double grade) { double totalQualityScore = this.gpa * this.numberOfCredits; totalQualityScore += courseCredits * grade; this.numberOfCredits += courseCredits; this.gpa = totalQualityScore/this.numberOfCredits; } 3. toString and equals Add custom equals() and toString() methods to the Student class.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public String toString() { String studentReport = String.format(\"%s is a %s with %d credits and a GPA of %.2f\", this.name, this.getGradeLevel(this.numberOfCredits), this.getNumberOfCredits(), this.getGpa()); return studentReport; } public boolean equals(Object toBeCompared) { if (toBeCompared == this) { return true; } if (toBeCompared == null) { return false; } if (toBeCompared.getClass() != getClass()) { return false; } Student theStudent = (Student) toBeCompared; return theStudent.getStudentId() == getStudentId(); } Add custom equals() and toString() methods to the Course class which you started in the exercises for the previous chapter .",
    "description": "Work on these exercises in the IntelliJ java-web-dev-projects/classes-part-two/exercises project. You will update your Student.java file by implementing the addGrade and getGradeLevel methods that were sketched out in the Instance Methods section.\n1. The getGradeLevel Method This method returns the student’s level based on the number of credits they have earned: Freshman (0-29 credits), Sophomore (30-59 credits), Junior (60-89 credits), or Senior (90+ credits).\nCheck your solution public static String getGradeLevel(int credits) { if (credits \u003c= 29){ return \"freshman\"; } else if (credits \u003c= 59){ return \"sophomore\"; } else if (credits \u003c= 89) { return \"junior\"; } else { return \"senior\"; } } 2.",
    "tags": [],
    "title": "Exercises: Objects and Classes Part 2",
    "uri": "/classes-part-2/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading",
    "content": "Every class has a few special methods that belong to it, regardless of whether or not we define them. Exactly how every class obtains these methods will be explored in a future lesson. For now, let’s look at two important examples of these methods.\ntoString The toString method returns a string representation of a class. Calling toString on a class that you’ve written will result in something like this:\nExample 1 2 Student person = new Student(\"Violet\"); System.out.println(person.toString()); Console Output:\norg.launchcode.java.demos.classes2.Student@61bbe9ba Here, we called toString on a Student object. The default toString implementation is generally not very useful. Most of the time, you’ll want to write your own toString method to override the default and provide better results.\nHere’s how we might do it for Student to produce a much more friendly message:\nExample 1 2 3 4 5 6 public String toString() { return name + \" (Credits: \" + numberOfCredits + \", GPA: \" + gpa + \")\"; } Student person = new Student(\"Violet\"); System.out.println(person.toString()); Console Output:\nViolet (Credits: 0, GPA: 0.0) In the example, we define the toString method to return a string that reports the class fields name, numberOfCredits, and gpa in a clear manner.\nNote that toString is often implicitly called for you. For example, the output above could have been generated by the following code, which calls toString on person within System.out.println.\n1 2 Student person = new Student(\"Violet\"); System.out.println(person); equals Suppose we have two objects of type Student, say student1 and student2, and we want to determine if they are equal. If we try to compare them using ==, we will likely get a result we did not expect. This is because student1 and student2 are reference variables , which means they hold a reference to, or the address of, the actual Student objects. student1 and student2 evaluate as equal only when they have the same memory address.\nTo state that again: student1 and student2 will be equal (==) only when they refer to, or point at, the exact same object. Consider the example below, which creates two Student objects:\nExample 1 2 3 4 5 6 Student student1 = new Student(\"Maria\", 1234); Student student2 = new Student(\"Maria\", 1234); System.out.println(student1.name + \", \" + student1.id + \": \" + student1); System.out.println(student2.name + \", \" + student2.id + \": \" + student2); System.out.println(student1 == student2); Console Output\nMaria, 1234: org.launchcode.java.demos.classes2.Student@3e3abc88 Maria, 1234: org.launchcode.java.demos.classes2.Student@6ce253f1 false Even though the objects have the exact same keys and values, student1 and student2 point to different memory locations. Therefore, the == check returns false.\nThis is not usually how we want to compare objects. For example, we might want to consider two Student objects equal if they have the same name, email, or student ID.\nThe equals() method determines if one object is equal to another in this sense. We introduced the method when discussing strings, but it also applies to all other classes.\nThe code below shows how to use equals() to compare two students. Note that they have different names but the same student ID, indicating they are actually the same person.\n1 2 3 4 5 6 7 Student bono1 = new Student(\"Paul David Hewson\", 4); Student bono2 = new Student(\"Bono\", 4); if (bono1.equals(bono2)) { System.out.println(bono1.getName() + \" is the same as \" + bono2.getName()); } If we don’t provide our own equals() method, the default option only considers two objects equal if they are the exact same object, which means they point to the same memory address. This is identical to the behavior we see when using the == operator: bono1 == bono2.\nIn the example above we created two different Student objects, so the expression bono1.equals(bono2) evaluates to false. In order to compare two objects based on their properties, rather than their memory references, we need to define our own equals() method.\nThe difference between the comparison carried out by the default equals() method (and by the == operator), and how we would like to compare our classes, is the difference between identity and equality.\nTwo objects are identical if they both point to the same memory address. In essence, they are the same object. If object1 and object2 are identical, then changing one property value in object1 also changes that value for object2. Two objects are equal if the values they store are the same at the time of comparison. student1 and student2 point to different memory addresses, but their values are all the same. Thus, we can consider them equal, even though they are not identical. The default equals() method and the == operator test for identity, whereas we want to test for equality instead. We can do so by overriding the equals() method. We will discuss overriding in more detail later, but for now just recognize that it involves defining different behavior for an existing method.\nTwo things can be considered equal even if they do NOT have all the same values. In the case of the Student class, we might specify that two Student objects are equal if they have the same ID numbers. We would then write a new method definition for equals() as follows:\n1 2 3 4 public boolean equals(Object toBeCompared) { Student theStudent = (Student) toBeCompared; return theStudent.getStudentId() == getStudentId(); } Now if we evaluate bono1.equals(bono2) we will get a result of true, since the student IDs match.\nOne catch of working with equals() is that its input parameter must be of type Object, even if we’re working in a class like Student. The reason why will become more clear in the next lesson, when we introduce the Object class. For now, the practical implication is that we must convert, or cast, the input toBeCompared to be of type Student with the syntax (Student) toBeCompared. Then we compare the converted student’s ID (bono2.id) to that of the current student (bono1.id).\nHere’s a visualization of the concepts of equality and identity:\nEquality When you test for equality, you look at two different objects and compare some aspect of them to each other.\nIdentity When you test for identity, you look at two variables to see if they reference the exact same object.\nCoding a new equals Method You’ll often want to implement equals() yourself. When you do, be sure you understand the best practices around how the method should behave. These are a little more involved compared to coding a new toString method.\nIn fact, the equals() method we defined above isn’t very good by most Java programmers’ standards. Let’s improve it.\nProblem #1 The method argument cannot be converted to a Student instance.\nWhen we attempt to cast the argument toBeCompared to type Student, we’ll get an exception if toBeCompared can’t be properly converted. This happens if something other than a Student object gets passed into equals(). To prevent this from happening, we’ll return false if toBeCompared was not created from the Student class. To check this, we use the getClass method, which is available to every object (similarly to toString).\n1 2 3 4 5 6 7 8 9 public boolean equals(Object toBeCompared) { if (toBeCompared.getClass() != getClass()) { return false; } Student theStudent = (Student) toBeCompared; return theStudent.getStudentId() == getStudentId(); } Lines 3 - 5 ensure that the two objects that we want to compare were created from the same class.\nProblem #2 toBeCompared might be null.\nIf toBeCompared is null then toBeCompared.getClass() throws an exception. This is an easy issue to fix—just compare the object to null. If the comparison evaluates to true, then we know the object is null and equals() should return false.\n1 2 3 4 5 6 7 8 9 10 11 12 13 public boolean equals(Object toBeCompared) { if (toBeCompared == null) { return false; } if (toBeCompared.getClass() != getClass()) { return false; } Student theStudent = (Student) toBeCompared; return theStudent.getStudentId() == getStudentId(); } Line 3 checks toBeCompared for null, preventing an error in line 7. Line 7 checks the class of toBeCompared, preventing an error in line 11.\nProblem #3 The two objects to compare are the same object (identical).\nThis is less of a problem and more of a way to improve our equals() method. If toBeCompared is the same literal object that we are comparing it to, then we can make a quick determination and save a few checks.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public boolean equals(Object toBeCompared) { if (toBeCompared == this) { return true; } if (toBeCompared == null) { return false; } if (toBeCompared.getClass() != getClass()) { return false; } Student theStudent = (Student) toBeCompared; return theStudent.getStudentId() == getStudentId(); } Line 3 checks for identity. If true, then the remaining checks become unnecessary.\nComponents of equals Almost every equals method you write will look similar to the last example above. It will contain the following segments in this order:\nReference check: If the two objects are the same, return true right away. Null check: If the argument is null, return false. Class check: Compare the classes of the two objects to ensure a safe cast. Return false if the classes are different. Cast: Convert the argument to the type of our class, so getters and other methods can be called. Custom comparison: Use custom logic to determine whether or not the two objects should be considered equal. This will usually be a comparison of properties or fields. Characteristics of equals Now that we know how to write an equals() method, let’s look at some characteristics that every such method should have. Following the general outline above makes it easier to ensure that your equals() method has these characteristics.\nReflexivity: For any non-null reference value x, x.equals(x) should return true.\nSymmetry: For any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) also returns true.\nTransitivity: For any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.\nConsistency: As long as x and y do not change x.equals(y) should always return the same result.\nNon-null: For any non-null reference value x, x.equals(null) should return false.\nIf you think back to what your math classes had to say about equality, then these concepts make sense.\nUsing the general approach outlined above to implement equals() will make it easier to meet these characteristics. However, always check your method! Missing one or more characteristics can be disastrous for your Java applications.\nTip Seasoned Java developers will tell you that every time you implement your own version of equals() you should also implement your own version of hashCode(). hashCode() is another special method that every class has. Understanding hashCode() would take us a bit far afield at this point, but we would be remiss to not mention it. If you want to read more, check out this article and this stack overflow .\nTake Away You may not need to write your own equals() method for every class you create. However, as a new Java programmer, remember the following:\nAlways use equals() to compare objects.\nThis is especially true when working with objects of types provided by Java, such as String. A class that is part of Java or a third-party library will have implemented equals() in a way appropriate for the particular class, whereas == will only check to see if two variables refer to the same literal object.\nCheck Your Understanding Question Given the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Pet { private String name; Pet(String name) { this.name = name; } public String getName() { return name; } } String firstPet = \"Fluffy\"; Pet secondPet = new Pet(\"Fluffy\"); Pet thirdPet = new Pet(\"Fluffy\"); Which of the following statements evaluates to true?\nfirstPet == secondPet; secondPet == thirdPet; thirdPet.equals(secondPet); thirdPet.getName().equals(firstPet); thirdPet.equals(firstPet); Question We add the following code inside the Pet class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public boolean equals(Object petToCheck) { if (petToCheck == this) { return true; } if (petToCheck == null) { return false; } if (petToCheck.getClass() != getClass()) { return false; } Pet thePet = (Pet) petToCheck; return thePet.getName() == getName(); } Which of the following statements evaluated to false before, but now evaluates to true?\nfirstPet == secondPet; secondPet == thirdPet; thirdPet.equals(secondPet); thirdPet.getName().equals(firstPet); thirdPet.equals(firstPet); ",
    "description": "Every class has a few special methods that belong to it, regardless of whether or not we define them. Exactly how every class obtains these methods will be explored in a future lesson. For now, let’s look at two important examples of these methods.\ntoString The toString method returns a string representation of a class. Calling toString on a class that you’ve written will result in something like this:\nExample 1 2 Student person = new Student(\"Violet\"); System.",
    "tags": [],
    "title": "Special Methods",
    "uri": "/classes-part-2/reading/special-methods/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 2: Data Types",
    "content": "Getting Started Work on these exercises in the IntelliJ java-web-dev-projects project. Create a new class for each numbered exercise. You may name the classes whatever you like, but use proper Java Naming Conventions and make sure that the file name matches the class name.\nCreating a Package and Classes Here is how to create a new module to store these exercises, and how to create new classes within this package:\nClick on the folder java-web-dev-projects in the Project pane.\nOpen the package datatypes-exercises.\nWithin the datatypes-exercises directory create the following directory structure: src/main/java.\nRight-click (or control-click for some Mac users) on the java folder and select New and then select Package.\nNote You may have to right click on the java directory and mark the directory as “Sources root” in order to create a new package.\nName the new package org.launchcode. Right click on the package and select New and then Java Class.\nName this what you will name your class (for example, in the 1st exercise below, you might name the class InputOutput or Hello). Repeat steps 7 and 8 to create new classes.\nWarning You will be asked whether you want to add this file to Git. Press the “Yes” or “Add” button. This is similar to git init and will allow you to stage your work later.\nYou created the new class! You should see it in the file tree. You can proceed to write code within it. (Don’t forget to write the main method!) The Exercises A. Input/Output Write a new “Hello, World” program to prompt the user for their name and greet them by name.\nFollow steps 7 and 8 above to create a new HelloWorld Class inside of your org.launchcode folder.\nAdd an import statement at the the top of the file to include Scanner:\nimport java.util.Scanner; Declare a variable of type Scanner called input:\nScanner input = new Scanner(System.in); Add a question to ask the user:\nSystem.out.println(\"Hello, what is your name:\"); Create a variable to store the user’s response using the Scanner’s .nextLine() method\nString name = input.nextLine(); Use concatenation to print the greeting:\nSystem.out.println(\"Hello \" + name); Right-click/Control-click the arrow next to your class and run the program.\nCheck your solution package org.launchcode; import java.util.Scanner; public class HelloWorld { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(\"Hello, what is your name:\"); String name = input.nextLine(); System.out.println(\"Hello \" + name); } } B. Numeric Types Write a program to calculate the area of a rectangle and print the answer to the console. You should prompt the user for the dimensions. (What data types should the dimensions be?)\nFollow steps 7 and 8 above to create a new Class inside of your exercises.\nAdd an import statement at the top of your file to use Scanner.\nAdd a Scanner object to handle the user’s input.\nAdd a print line to prompt the user for the length of the rectangle.\nDefine a variable to handle the user’s response. Now is the time to know what type the dimension will be.\nTip You’ll need to use a different Scanner method than what we used in Exercise 1 above.\nRepeat the previous two steps to ask for and store the rectangle’s width.\nUse the length and width values to calculate the rectangle’s area.\nPrint a statement using concatenation to communicate to the user what the area of their rectangle is.\nRun the program to verify your code.\nC. Numeric Types Write a program that asks a user for the number of miles they have driven and the amount of gas they’ve consumed (in gallons), and print their miles-per-gallon.\nCheck your solution import java.util.Scanner; public class Miles { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(\"How many miles have you driven?\"); Double numMiles = input.nextDouble(); System.out.println(\"How much gas did you use? In gallons.\"); Double numGallons = input.nextDouble(); Double mpg = numMiles / numGallons; System.out.println(\"You are running on \" + mpg + \" mpg.\"); } } D. Strings The first sentence of Alice’s Adventures in Wonderland is below. Store this sentence in a string, and then prompt the user for a term to search for within this string. Print whether or not the search term was found. Make the search case-insensitive, so that searching for “alice”, for example, prints true.\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, ‘and what is the use of a book,’ thought Alice ‘without pictures or conversation?’\nNote You may want to write the string above on more than one line in your solution. Java 17 and IntelliJ give you a few options to do so. The easiest, thanks to your IDE, is to press Enter as you type the string. IntelliJ will close the string and concatenate it with the next line to create one longer string.\nE. Strings Extend the previous exercise. Assume the user enters a word that is in the sentence. Print out its index within the string and its length. Next, remove the word from the string and print the sentence again to confirm your code. Remember that strings are immutable, so you will need to reassign the old sentence variable or create a new one to store the updated phrase.\nCheck your solution Integer index = firstSentence.indexOf(searchTerm); Integer length = searchTerm.length(); System.out.println(\"Your search term first appears at index \" + index + \". Your term is \" + length + \" characters long.\"); String modifiedSentence = firstSentence.replace(searchTerm, \"\"); System.out.println(modifiedSentence); ",
    "description": "Getting Started Work on these exercises in the IntelliJ java-web-dev-projects project. Create a new class for each numbered exercise. You may name the classes whatever you like, but use proper Java Naming Conventions and make sure that the file name matches the class name.\nCreating a Package and Classes Here is how to create a new module to store these exercises, and how to create new classes within this package:",
    "tags": [],
    "title": "Exercises: Data Types",
    "uri": "/data-types/exercises/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 2: Data Types \u003e Reading",
    "content": "Arrays In Java, an array is an ordered, fixed-size collection of elements. To comply with static typing, the items stored in an array must all be the same data type. We can create an array of integers or an array of strings, but we may NOT create an array that holds both integers and strings.\nThe syntax for creating an array capable of holding 10 integers is:\nint[] someInts = new int[10];Note the square brackets next to int. This tells Java that we want someInts to store a collection of integers instead of a single number.\nTo create an array of a different size, replace the number 10 in the brackets with the desired size. To create an array holding a different type, replace int (on both sides of the assignment) with the desired type, like double or String.\nIn addition to the example above, we can initialize an array using a literal expression:\nint[] someOtherInts = {1, 1, 2, 3, 5, 8};Here, the size of the array is implied by the number of elements in the literal expression {1, 1, 2, 3, 5, 8}. Also note the use of curly braces { } instead of square brackets [ ].\nTo access array elements, we use square brackets and zero-based indexing.\nint anInt = someOtherInts[4]; // anInt stores the integer 5.Arrays in Java may NOT change size once created. This is limiting and not very practical. Thankfully, Java provides more flexible ways to store data, which we will explore in a later lesson. These objects will allow us to rearrange, add to, or remove data.\nAside from using arrays to build some simple loop examples, we will only use them in special cases. However, they are a core part of Java, so it’s good to know how they work.\nJava Objects In Java, objects are structures that have a state and a set of behaviors. The state of an object includes properties/data that the coder can define and modify. Behaviors are actions that run when requested, and they can be used to evaluate, manipulate, or return data.\nAn array is one example of an object. It contains data, which are the values stored as the individual elements. The behaviors are methods like sort() that perform actions related to the elements in the array.\nThe String data type is also an example of an object. For String language = \"Java\", the data would be the characters. The String manipulation section gives several of the behaviors available to the language object. For example, language.length() returns the value 4, which tells us how many characters are present in the string.\nEvery variable in Java refers to either a primitive data type or to an object.\nClass Types A class is a template for creating objects. In addition to the object types introduced so far, any class in Java also defines a type. We’ll have much more to say about classes and objects, but for now you need to recognize the basic syntax of class types and class creation.\nIf we have a class Cat, we can declare and create an instance of Cat using the new keyword:\nCat myCat = new Cat(); Cat myCat declares the variable myCat and sets it to be of type Cat. = new Cat() initializes the variable with a new Cat object. Any arguments that are required to build the new Cat object must be included within the parentheses. Just like a variable can be declared as a primitive data type like char or double, it can also be declared as a specific class type. Variables that hold objects—like String name = \"Blake\" or myCat—are said to be reference variables. Using this terminology, name is a reference variable of the String class, and myCat is a reference variable of type Cat.\nNote Java uses two general data types—primitive and object. A class type is NOT a new data type. Instead, it is just a specific name applied to the more general object data type.\nint and char are both primitive data types, but the values they can store differ. Similarly, String and Cat are both object types, but they represent different classes.\nReference Variables Reference variables are different from primitive types in an essential way. A reference variable (such as myCat above) does not actually store the object in question. Instead, it stores a reference to the object, which is literally a memory address. We visualize a reference as an arrow pointing to the location of the object in memory.\nConsider this code:\n1 2 3 4 int firstCatAge = 11; int secondCatAge = firstCatAge; Cat myCat = new Cat(); Cat sameCat = myCat; Visually, we can represent these four variables as shown below.\nSince int is a primitive type, the variables firstCatAge and secondCatAge function like separate boxes, each one holding the integer value 11. On the other hand, myCat is a reference variable, since it refers to an object of type Cat. The variable actually stores the memory address of the object, which we visualize as an arrow pointing from the variable box to where the data is stored. Instead of holding the actual Cat data, myCat stores directions for finding the data in memory.\nWhen we assign myCat to another variable, as in Cat sameCat = myCat, we do NOT create a second copy of the object or its data. Instead, we make a second arrow pointing to the same memory location.\nThe distinction between object types and primitives is important, if subtle. As you continue learning Java, you will see that object types are handled differently in essential and important ways.\nStatic Methods If you are familiar with another programming language, then you most likely defined and called functions. As a pure object-oriented programming language, Java also uses functions, but it structures them in a very specific way.\nIn Java, functions may NOT be declared outside of a class. Even a simple function that checks if an integer is even needs to be defined within a class.\nWithin the context of a class, functions are referred to as methods, and we will adopt this terminology from now on.\nWarning Be prepared to receive a vocabulary lesson from veteran Java coders if you accidentally refer to methods as functions.\nWe’ll dive deeper into classes and objects in Java soon enough. For now, we will explore how to write methods. In particular, we’ll use static methods. A static method is one that can be called without creating an instance of the class to which it belongs.\nStatic Method Examples Let’s examine two classes in Java to explore defining and using methods. The first class is defined in the HelloMethods.java file, and it has a main method. The second class is defined in a separate Message.java file, and it contains a getMessage method that we want to call from within main.\nExample HelloMethods.java\n1 2 3 4 5 6 7 8 public class HelloMethods { public static void main(String[] args) { String message = Message.getMessage(\"fr\"); System.out.println(message); } } Message.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class Message { public static String getMessage(String lang) { if (lang.equals(\"sp\")) { return \"¡Hola, Mundo!\"; } else if (lang.equals(\"fr\")) { return \"Bonjour, le monde!\"; } else { return \"Hello, World!\"; } } } We won’t explore every new aspect of this example, but instead focus on the two methods.\nThe main method in the HelloMethods class has the same structure as that of our temperature conversion example .\nTake a look at the Message class. Note that it does NOT have a main method, so it can’t be run on its own. Code within the Message class must be called from elsewhere in order to execute.\nThe Message class contains the getMessage method. Like main, it has the static keyword. Unlike main, getMessage has a return type of String instead of void.\ngetMessage takes a single String parameter, lang.\nSince Java is statically typed, we must declare the data type for each parameter AND the return value.\npublic static returnedDataType methodName(parameterDataType parameterName) { //code }One consequence of this is that a method in Java may NOT have return statements that send back different types of data. Note that lines 6, 8, and 10 in Message.java each return a string. If we try to replace line 10 with return 42;, we would generate a compiler error.\nTo call a static method, we follow a specific syntax. Line 4 in the HelloMethods.java shows this:\nMessage.getMessage(\"fr\");To call a static method we must use the format ClassName.methodName(arguments).\nNote that getMessage is NOT defined within the HelloMethods class. We can do this because getMessage is declared as public. If we wanted to restrict the method from being called by another class, we could instead use the private modifier. We will explore access modifiers in more depth in coming lessons.\nWarning As you have been following along with these examples, you may have noticed that each class file, for example Message.java and HelloMethods.java, is named exactly the same as the class it holds (Message and HelloMethods, respectively).\nIt is a rule in Java that a file containing a class marked public MUST be named the same as that class.\nTry It Open the HelloMethods and Messages files in the java-web-dev-projects project in IntelliJ and experiment with the following:\nFigure out how to alter the HelloMethods code to change the message returned. Add another “Hello, World” language option. Change one public keyword to private to see what happens. Repeat for each occurrence of public. References Arrays (doc.oracle.com) Check Your Understanding Question Which of the following defines a method that takes an integer as a parameter and returns a string value?\npublic static void methodName(String parameterName) public static void methodName(int parameterName) public static int methodName(String parameterName) public static String methodName(int parameterName) Question Assume that we declare the following Java array:\nString[] someWords = new String[5];Which of the following shows a correct initialization for the array?\nsomeWords = {'hello', 'world', '123', 'LaunchCode ROCKS!'} someWords = {\"hello\", \"world\", \"123\", \"LaunchCode ROCKS!\", \"Java\"} someWords = {\"hello\", \"world\", 'a', \"LaunchCode ROCKS!\", \"Java\"} someWords = {\"hello\", \"world\", \"avocado\", \"LaunchCode ROCKS!\"} ",
    "description": "Arrays In Java, an array is an ordered, fixed-size collection of elements. To comply with static typing, the items stored in an array must all be the same data type. We can create an array of integers or an array of strings, but we may NOT create an array that holds both integers and strings.\nThe syntax for creating an array capable of holding 10 integers is:\nint[] someInts = new int[10];Note the square brackets next to int.",
    "tags": [],
    "title": "More Data Types",
    "uri": "/data-types/reading/more-data-types/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 2: Data Types",
    "content": "Get cozy with Java syntax by writing a console program that calculates the area of a circle based on input from the user.\nCreating your class Since you’re still new to Java and IntelliJ, we’ll provide some extra direction for the first studio.\nWithin the datatypes-studio directory create the following directory structure: src/main/java. Create a new package named org.launchcode by right-clicking (or ctrl-clicking for some Mac users) on the java directory and selecting New \u003e Package. Be sure to enter org.launchcode as the full name, or your package won’t be created in the correct location. Note You may have to right click on the java directory and mark the directory as “Sources root” in order to create a new package.\nCreate a new class inside the package by right-clicking/ctrl-clicking on the org.launchcode package/folder and selecting New \u003e Java Class. Name the class Area. Select the option to add the file to Git when the window appears. A. The Area Class Write a class, Area, that prompts the user for the radius of a circle and then calculate its area and print the result.\nTip Recall that the area of a circle is A = pi * r * r where pi is 3.14 and r is the radius.\nUnlike some other languages, Java does not have an exponent operator.\nHere’s an example of how your program should work:\nEnter a radius: 2.5 The area of a circle of radius 2.5 is: 19.625Some questions to ask yourself:\nWhat data type should the radius be? What is the best way to get user input into a variable radius of that type? Warning Be sure to create a main method to place your code within. It’s signature must be:\npublic static void main(String[] args) B. The Circle Class Add a second Java file to your program to delegate the area calculation away from the printing task.\nAdd a new class in your studios.areaofacircle package called Circle.\nCreate a method called getArea inside of Circle that takes a Double radius as its only parameter and returns another Double, the result of the area calculation. Tip public static Double getArea(Double radius) { return 3.14 * radius * radius; } Back in Area, replace your area calculation line with a call to Circle.getArea().\nTip Check out the HelloMethods and Message example from Static Methods for a reference on how to use a class from another file.\nGreat work! Don’t forget to save, stage, and commit your work up to GitHub.\nBonus Missions Add validation to your program. If the user enters a negative number? a non-numeric character? the empty string? Print an error message and quit. You’ll need to peek ahead to learn about conditional syntax in Java .\nExtend your program further by using a while or do-while loop , so that when the user enters a negative number they are re-prompted.",
    "description": "Get cozy with Java syntax by writing a console program that calculates the area of a circle based on input from the user.\nCreating your class Since you’re still new to Java and IntelliJ, we’ll provide some extra direction for the first studio.\nWithin the datatypes-studio directory create the following directory structure: src/main/java. Create a new package named org.launchcode by right-clicking (or ctrl-clicking for some Mac users) on the java directory and selecting New \u003e Package.",
    "tags": [],
    "title": "Studio: Area of a Circle",
    "uri": "/data-types/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments",
    "content": "Assignment #2: Tech Jobs (Object-Oriented Edition) Introduction Your apprenticeship at LaunchCode is going well! Only a few weeks in and you’re regularly making contributions to code that will eventually be used by all LaunchCode staff.\nYour last task was to get the prototype Tech Jobs app in good shape. Now it’s time to advance the underlying structure of the program.\nYour mentor on this project is Sally, one of the developers at LaunchCode. She regularly supports coders who are just getting started with their careers.\nAfter seeing your strong work with your last project, Blake reported that you performed well and learned quickly. Because of your success, he and Sally feel comfortable assigning you to a set of tasks that are a notch up in difficulty.\nSally completed some initial work on the project and left you some TODOs.\nLearning Objectives In this project, you’ll show that you can:\nRead and understand code written by others. Work with objects to encapsulate data and methods. Use the generator in IntelliJ to automate routine tasks. Use unit testing and Test-Driven-Development (TDD) to verify and create new methods. Apply the concept of inheritance to streamline your classes (the DRY idea—Don’t Repeat Yourself). Get the Starter Code Note You may need to enable actions within your github repository if you have not done so already. Please refer back to the instructions on how to do so in the Running the Autogtrading Tests through Github Actions section of Assignment 0\nIn Canvas, Graded Assignment #2: Object-Oriented Edition contains a GitHub starter code repo link. Fork the repository to your personal profile, copy the repo’s URL for cloning, and open up IntelliJ. and then set up the project in IntelliJ. Refer back to the setup instructions from assignment 0 for more details.\nIntroduction Sally has gotten the ball rolling by adding a Job class, along with classes to represent the individual properties of a job: Employer, Location, PositionType, and CoreCompetency. She completed the Employer class, and she left you the task of filling in the others.\nAs the team gets closer to deploying the app—and abandoning the test data they’ve been using—they’ll want an easy way to add and remove jobs via a user interface(UI). Before that, however, you need to finish shifting the project to an object-oriented design.\nWhy Change to Object-Oriented? Working with data stored as strings in HashMaps and ArrayLists isn’t a good long-term solution, for reasons that we point out below.\nThe Job class introduces an object-oriented design to the application. It contains all of the fields you used in the console version of TechJobs: name, employer, location, positionType, coreCompetency. There’s also an id field which will be used to uniquely identify Job objects.\nThe main difference between the object representation of a job and the string-based representation is that the values of employer, location, and the other non-ID fields are no longer strings. Instead, they are classes of their own.\nJob Fields Open the Job class file. You’ll see the following fields (among others):\n10 11 12 13 14 private String name; private Employer employer; private Location location; private PositionType positionType; private CoreCompetency coreCompetency; Of these, only name is a string. Sally created classes to represent each of the other properties. These classes—Employer, Location, CoreCompetency, PositionType—have value and id fields.\nSo, for example, if you had a Job instance, you could get the name of the employer this way:\n// job is an instance of Job String employerName = job.getEmployer().getValue();Additionally, the toString() method of the Employer class is set up to return the value field. Thus, using one of these objects in another string context like System.out.println will print the data stored in value.\n// Prints the name of the employer System.out.println(job.getEmployer());Why do we go to all of this trouble when we could store this job-related data as strings? There are a couple of reasons.\nEliminate Duplication of Data In our app, we have multiple jobs that have the same value in a given field. For example, there are multiple jobs with position type “Web - Full Stack”, and each employer may list several jobs. If we store the values of these fields as strings directly within each Job object, that data would be repeated in several places across the application.\nBy using objects, we can have a single PositionType object with value “Web - Full Stack”. Each job that wants to use that position type holds onto a reference to the given object. Similarly, we can have one Employer object for each employer.\nAside from reducing the amount of raw data / memory that the application uses, this will allow data to be updated more easily and properly. If we need to change the name of an employer (e.g. due to a typo or a name change at the company), we can change it in one place—the single Employer object that represents that company.\nEnable Extension While the four Job properties represented by objects will primarily be used for their string values, it’s easy to imagine adding new properties to address future needs.\nFor example, it would be useful for an Employer object to have an address, a primary contact, and a list of jobs available at that employer.\nFor a Location object, useful information includes a list of zip codes associated with that location, in order to determine the city and state for an employer or job.\nIf we were to store these four new properties as strings within the Job class, extending and modifying this behavior would be much more complicated and difficult moving forward.\nYour Assignment Running the Autograding Tests Before diving into your tasks, review Assignment #0: Hello, World! for details on running the autograding tests for this assignment. This assignment has many more tests than the previous two, so we’ve organized them into separate files.\nEach of the one test files, TestTaskXXXX, contains the tests to grade one of the six tasks outlined in below (there’s no coding work for your first task, so there is no TestTaskOne). Run all of the tests by right-clicking on the org.launchcode.techjobs.oo and selecting Run tests...\nYou should see a large number of failures along with a small number of passing tests. Your job is to get those failures to pass, while not breaking the few tests that already pass.\nWhen you start on one of the tasks below, begin by running only the tests associated with that task. To do so, right-click on the test file and select Run TestTaskXXXX.\nAs you work on the components of the given tasks, continually re-run the tests to see the failing tests gradually turn to passing. When all tests within the file pass, you’re ready to move onto the next task.\nYour tasks The list below provides a general overview of your assigned tasks. Specific details for each part appear in the following sections, so be sure to read them carefully as you solve each problem.\nReview Sally’s code in the Employer class to learn how to assign a unique ID. Add getters, setters, and custom methods as needed to the Location, CoreCompetency, and PositionType classes. Complete the Job class using what you learned in steps 1 and 2. Use unit testing to verify the constructors and equals methods for the Job class. Use TDD to design and code a custom toString method for the Job class. Use inheritance to DRY the code within Employer, Location, CoreCompetency, and PositionType. Next ",
    "description": "Assignment #2: Tech Jobs (Object-Oriented Edition) Introduction Your apprenticeship at LaunchCode is going well! Only a few weeks in and you’re regularly making contributions to code that will eventually be used by all LaunchCode staff.\nYour last task was to get the prototype Tech Jobs app in good shape. Now it’s time to advance the underlying structure of the program.\nYour mentor on this project is Sally, one of the developers at LaunchCode.",
    "tags": [],
    "title": "Assignment #2: Tech Jobs OO",
    "uri": "/assignments/techjobs-oo/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #2: Tech Jobs OO",
    "content": "Now open the Job file. OOF! There are a lot of fields declared and not much else.\nCode a constructor to initialize the id field with a unique value. This constructor should take no parameters.\nCode a second constructor that takes 5 parameters and assigns values to name, employer, location, positionType, and coreCompetency. Also, this constructor should call the first in order to initialize the id field. Make sure the parameters are defined in the specified order.\nGenerate getters and setters for each field EXCEPT nextID and id.\nGenerate a getter for the id field.\nGenerate the equals and hashCode methods. Consider two Job objects equal when their id fields match.\nTip Now would be a good time to save, commit, and push your work up to GitHub.\nNext ",
    "description": "Now open the Job file. OOF! There are a lot of fields declared and not much else.\nCode a constructor to initialize the id field with a unique value. This constructor should take no parameters.\nCode a second constructor that takes 5 parameters and assigns values to name, employer, location, positionType, and coreCompetency. Also, this constructor should call the first in order to initialize the id field. Make sure the parameters are defined in the specified order.",
    "tags": [],
    "title": "Task 3: Complete the Job Class",
    "uri": "/assignments/techjobs-oo/task3/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #3: Tech Jobs (MVC Edition)",
    "content": "Add a displaySearchResults handler method to SearchController:\nUse the correct annotation for the method. To configure the correct mapping type and mapping route, refer to the form tag in the search.html template. (Use @GetMapping or @PostMapping rather than @RequestMapping.) The displaySearchResults method should take in a Model parameter. The method should also take in two other parameters, specifying the type of search and the search term. In order for these last two parameters to be properly passed in by Spring Boot, you need to use the correct annotation. Also, you need to name them appropriately, based on the corresponding form field names defined in search.html. If the user enters “all” in the search box, or if they leave the box empty, call the findAll() method from JobData. Otherwise, send the search information to findByColumnAndValue. In either case, store the results in a jobs ArrayList. Pass jobs into the search.html view via the model parameter. Pass ListController.columnChoices into the view, as the existing search handler does. ",
    "description": "Add a displaySearchResults handler method to SearchController:\nUse the correct annotation for the method. To configure the correct mapping type and mapping route, refer to the form tag in the search.html template. (Use @GetMapping or @PostMapping rather than @RequestMapping.) The displaySearchResults method should take in a Model parameter. The method should also take in two other parameters, specifying the type of search and the search term. In order for these last two parameters to be properly passed in by Spring Boot, you need to use the correct annotation.",
    "tags": [],
    "title": "Task 3: Complete SearchController",
    "uri": "/assignments/techjobs-mvc/search-controller/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "Our discussion of classes and objects is integral to us using object-oriented programming. Object-oriented programming stands on four pillars: abstraction, encapsulation, inheritance, and polymorphism.\nEncapsulation Encapsulation is the bundling of related data and behaviors that operate on that data, usually with restricted access to internal, non-public data and behaviors. In object-oriented programming, classes and objects allow us to encapsulate, or isolate, data and behavior to only the parts of our program to which they are relevant. Restricting access allows us to expose only that data and behavior that we want others to be able to use.\nLet’s take a look at this by developing a new class called Student.\nStudent Class Fields We previously defined a field as a variable, or piece of data, that belongs to a class. For our Student class, let’s think about the data that is typically associated with a student (in the sense of a high school or college student). There are a lot of possibilities, but here are the most important:\nName Student ID Number of credits GPA In order to declare these fields within our class, we’ll need to determine the best data type for each. A field may be of any primitive or object type. In this case, the following types will work best:\nName: String Student ID: int Number of credits: int GPA: double Let’s put these inside of a class. While they may be declared anywhere within a class, fields should always be declared at the top of the class. When we’re ready to add methods, we’ll add them below the fields.\npublic class Student { String name; int studentId; int numberOfCredits; double gpa; }Like variables within a method, fields may be initialized when they are declared. For example, we could provide default values for numberOfCredits and gpa (default values for name and studentId don’t make sense since they should be different for each student).\nint numberOfCredits = 0; double gpa = 0.0;Fields are also referred to as instance variables, since they belong to an instance of a class.\nGetters and Setters As declared, our four fields are package-private, which means that they can be read or changed by any code within the same package. As a rule-of-thumb, fields should always be private unless you have a very, very, very good reason to not make them so. So, let’s make our fields private.\npublic class Student { private String name; private int studentId; private int numberOfCredits = 0; private double gpa = 0.0; }In order to provide access to private fields, getter and setter methods are used. Getters and setters do what you might guess: get and set a given field. If we make the getter and/or setter method for a given property public, then others will be able to access or modify the field in that way.\nHere is a getter/setter pair for name (you can imagine how the others would be written).\npublic String getName() { return name; } public void setName(String aName) { name = aName; } Note Prefixing a parameter that is intended to set an instance variable with a is a relatively common convention, and one that we’ll adopt to avoid shadowing and having to use this in our setters. You can think of the a as denoting the “argument” version of the variable.\nAn astute question to ask at this point would be, “Why make the fields private if you’re just going to allow people to get and set them anyway!?” Great question. There are lots of reasons to use getters and setters to control access. Here are just a few:\nSometimes you’ll want to implement behavior that happens every time a field is accessed (get) or changed (set). Even if you can’t think of such a reason when writing your class, you might later have the need to add such behavior. If you don’t use getters and setters, you’ll have to do a lot more refactoring if you ever decide to add such behaviors. You can perform validation within a setter. For example, we might want to ensure that a student’s name contains only certain characters, or that their student ID is positive. You can use different access modifiers on getters and setters for the same field, based on desired usage. For example, you might want to allow anyone to be able to read the value of a field, but only classes within the same package to modify it. You could do this with a public getter and a package-private setter, but not as a field without getters and setters, which could only be public to everyone or package-private to everyone. As an example of reason 2, let’s take a short detour to look at a Temperature class. A valid temperature can only be so low (“absolute zero”), so we wouldn’t want to allow somebody to set an invalid value. In setFahrenheit we print out if an invalid value is provided.\npublic class Temperature { private double fahrenheit; public double getFahrenheit() { return fahrenheit; } public void setFahrenheit(double aFahrenheit) { double absoluteZeroFahrenheit = -459.67; if (aFahrenheit \u003c absoluteZeroFahrenheit) { System.out.println(\"Value is below absolute zero\"); } fahrenheit = aFahrenheit; } } Note When writing getters and setters, the convention for a field named field is to name them getField and setField. This is more than just a convention, as some libraries you use will expect names to be of this format, and won’t work as desired if you don’t follow the convention.\nAdditionally, it’s a standard convention to use is instead of get for boolean fields. So a boolean field oldEnoughToVote would have the “getter” method isOldEnoughToVote. The setter should still be named setOldEnoughToVote.\nProperties A property in Java is a characteristic that users can set. Our Student class had properties name, studentId, numberOfCredits, and gpa, while our Temperature class had only one property, fahrenheit.\nMost often, properties will be fields that have public setters, though they need not have a corresponding field. Let’s look at an example of a property that doesn’t directly correspond to a field. If we wanted to add a celsius property to the Temperature class above, we might do it as follows:\npublic double getCelsius() { return (fahrenheit - 32) * 5.0 / 9.0; } public void setCelsius(double celsius) { double fahrenheit = celsius * 9.0 / 5.0 + 32; setFahrenheit(fahrenheit); }Since there’s a link between fahrenheit and celsius, we want to make sure that when one is updated, so is the other. In this case, we only store one field value (fahrenheit) and make the appropriate calculation when getting or setting the celsius property.\nNote There are slight variations among Java developers when it comes to colloquial usage of the term property. People will sometimes define the term in a slightly more specific or narrow way, to mean a private field with public getters and setters.\nOur definition here relies on the more general definition given by Oracle.\nUsing properties, getters/setters, and fields, we can encapsulate the information we need in our student class.\nCheck Your Understanding Question What is a method that is used to give a private field a value?\ngetter method property setter ",
    "description": "Our discussion of classes and objects is integral to us using object-oriented programming. Object-oriented programming stands on four pillars: abstraction, encapsulation, inheritance, and polymorphism.\nEncapsulation Encapsulation is the bundling of related data and behaviors that operate on that data, usually with restricted access to internal, non-public data and behaviors. In object-oriented programming, classes and objects allow us to encapsulate, or isolate, data and behavior to only the parts of our program to which they are relevant.",
    "tags": [],
    "title": "Encapsulation",
    "uri": "/classes/reading/encapsulation/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes",
    "content": "Let’s practice designing classes using the following scenario. You’ve been hired to create a web application for a local restaurant. They want to both display their current menu and edit it through an admin panel.\nYou’re not going to build an actual application in this studio. Instead, you will focus on the design of a portion of this application. Object-oriented programming in Java requires intentional, up-front planning. While this may seem tedious, outlining your ideas before you code helps reduce the errors you need to fix later.\nDesign You know you’ll need to create classes within the web application to facilitate this behavior and represent the various components of the menu. After talking to the owner, you have these details:\nThe menu consists of several menu items Each menu item has a price, description, and category (appetizer, main course, or dessert) It should be possible to display whether a menu item is new or not The app should know when the menu was last updated, so visitors can see that the restaurant is constantly changing and adding exciting new items Starting with pen and paper (or your favorite notes application on your laptop), sketch out the design for two classes, Menu and MenuItem. List the fields that each should have, along with the data type and access level for each. Also consider what constructors the classes might need.\nNote For this studio, we are focusing on class design for these two classes. You do not need to be concerned with how the classes would be used in an application. At this stage, don’t think about how the application will work or behave; you should focus on the way that data will be represented within these classes, and how they should relate to each other.\nYou may find it useful to use one or more of the classes provided by Java, such as Date.\nPresenting Your Design Once you have sketched out your fields and properties, pair with a classmate and take turns presenting your designs. Class design can be subjective, so it’s important to properly think and talk through your choices before coding.\nWhile your partner is presenting their design, ask questions about why they made the decisions they did. Consider other use cases that might come up, and see if their design fits with those.\nImplementation In IntelliJ, open the studio directory within the classes-part-one directory. Add the Menu and MenuItem classes to the restaurant package and code the design that you created above. Be sure to add getters and setters as appropriate.\nSubmitting Your Work Create a repository on your Github account and push up your project. Submit the link to your repository on Canvas.",
    "description": "Let’s practice designing classes using the following scenario. You’ve been hired to create a web application for a local restaurant. They want to both display their current menu and edit it through an admin panel.\nYou’re not going to build an actual application in this studio. Instead, you will focus on the design of a portion of this application. Object-oriented programming in Java requires intentional, up-front planning. While this may seem tedious, outlining your ideas before you code helps reduce the errors you need to fix later.",
    "tags": [],
    "title": "Studio: Restaurant Menu",
    "uri": "/classes/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #1: Tech Jobs Console",
    "content": "At this stage, the application will allow users to search a given column of the data for a given String. Your next task is to enable a search that looks for the search term in all of the columns.\nIn the JobData class, find the method findByValue. This method has been outlined for you but contains none of the code needed to work (you should leave the loadData() call as the first line of the method, however). Here are a few observations:\nThe code that you write should not contain duplicate jobs. So, for example, if a listing has position type “Web - Front End” and name “Front end web dev” then searching for “web” should not include the listing twice. As with printJobs, you should write your code in a way that if a new column is added to the data, your code will automatically search the new column as well. You should NOT write code that calls findByColumnAndValue once for each column. Rather, utilize loops and collection methods as you did above. You should, on the other hand, read and understand findByColumnAndValue, since your code will look similar in some ways. You’ll need to call findByValue from somewhere in main. We’ll leave it up to you to find where. You might have noticed that when you try to search all columns using the app, a message is printed, so that is a good clue to help you find where to place this new method call. Once you find where to call your new method, you can Run the program again to test your code.",
    "description": "At this stage, the application will allow users to search a given column of the data for a given String. Your next task is to enable a search that looks for the search term in all of the columns.\nIn the JobData class, find the method findByValue. This method has been outlined for you but contains none of the code needed to work (you should leave the loadData() call as the first line of the method, however).",
    "tags": [],
    "title": "Task 2: Create Method findByValue()",
    "uri": "/assignments/techjobs-console/task-two/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #4: Tech Jobs Persistent",
    "content": "You will need to have completed the setup steps before starting this section.\nAbstractEntity We’ve replaced the abstract class JobField with an even more abstracted class aptly named, AbstractEntity. This class holds the fields and methods that are common across the Job class and the classes it contains as fields.\nWe will be creating tables for the subclasses that inherit from AbstractEntity but not a table for this parent class. Therefore, give AbstractEntity the @MappedSuperclass annotation. Since all of the subclasses of AbstractEntity will be entities themselves, add the @Id and @GeneratedValue annotations to the field id. Each subclass will also inherit the name field from AbstractEntity. Add appropriate validation annotations so that: a user cannot leave this field blank when creating an object. there are reasonable limitations on the size of the name string. Keep in mind that the name field will be shared across Job, Employer, and Skill classes. Some employer names might be longer than 50 characters. Models In the last assignment, a Job object contained string fields for employer and core competency data. This employer and skill (formerly core competency) information about a particular job will now be stored in classes themselves. These items themselves will hold their own supplementary information.\nOpen the Employer model class. In addition to the fields inherited from AbstractEntity, Employer should have a string field for location. Add the field for location with validation that ensures it is not empty and has a reasonable length. In addition, add public accessor methods to Employer. Note For the purposes of this application, an employer can only have one location.\nEmployer is a class that will be mapped to one of our tables. Make sure the class has the @Entity annotation, as well as the no-arg constructor required for Hibernate to create an object. In the model class Skill, add a field for a longer description of the skill, named description, with public accessor methods. Some hiring managers like to have more information available about the nature of a given programming language or framework. As with Employer, give this class the @Entity annotation and be sure it contains a no-arg constructor. Data Layer To map the Employer and Skill classes to your techjobs database, you’ll add data access interfaces for these relational objects, similar to the existing JobRepository interface. Like JobRepository, make use of the Spring Data CrudRepository interface to map our objects.\nIn models/data, create a new interface EmployerRepository. EmployerRepository should extend CrudRepository. EmployerRepository should be annotated with @Repository. Repeat the steps above for an interface, SkillRepository. Controllers Warning The tests in TestTaskTwo relating to the following tasks have been commented out because they depend on the code you wrote earlier. Open TestTaskTwo in IntelliJ and find these tests. For each one:\nSelect the entire commented-out method. These methods start around line 328. You may need to add import statements for some of the classes used in these methods. Uncomment the method by using cmd+/ on Mac or ctrl+/ on Windows. If you do not uncomment these tests, your code will not pass the autograder. Uncommenting these methods will introduce some new errors related to a class named SkillController, but these will be fixed by the code you are about to write. If you like, you can leave these commented out until you get to that task. With the employer repository in place, we will reference this to send object information through the EmployerController handlers. EmployerController contains two handlers with missing information. Your task here is to make use of the EmployerRepository class in these handlers.\nAdd a private field of EmployerRepository type called employerRepository to EmployerController. Give this field an @Autowired annotation. Add an index method that responds at /employers with a list of all employers in the database. This method should use the template employers/index. To figure out the name of the model attribute you should use to pass employers into the view, review this template. processAddEmployerForm already takes care of sending the form back if any of the submitted employer object information is invalid. However, it doesn’t yet contain the code to save a valid object. Use employerRepository and the appropriate method to do so. displayViewEmployer will be in charge of rendering a page to view the contents of an individual employer object. It will make use of that employer object’s id field to grab the correct information from employerRepository. optEmployer is currently initialized to null. Replace this using the .findById() method with the right argument to look for the given employer object from the data layer. Tip The variable holding the id you want to query for is already provided for you in the controller method’s parameters.\nCreate a SkillController class and replicate the steps you followed above for EmployerController. The new controller should have the methods, index, displayAddSkillForm, processAddSkillForm, and displayViewSkill. These methods should behave exactly as the corresponding methods in EmployerController. The relevant templates have already been created for you. At this point, uncomment all remaining methods in TestTaskTwo, if you have not done so already. You’ll need to add an import statement for the new controller to the test file.\nTest It with SQL The employer and skill view templates for adding and viewing these objects are made for you. Before you move on, test your application now to make sure it runs as expected. You should be able to create Employer and Skill objects and view them.\nStart up your application – don’t forget to have your SQL server running – and go to the Add Jobs view from the application’s navigation menu.\nYou won’t be able to add a job yet, but you’ll see a link to Add Employers and Add Skills in the form. Click them and proceed to check the functionality of the forms that follow.\nBe sure to test your validation requirements and error handling.\nSQL TASK: In queries.sql under “Part 2”, write a query to list the names of the employers in St. Louis City. Do NOT specify an ordering for the query results.\nTip If everything seems to work – that is, you are able to submit the form without any errors – but you don’t see your employers or skills in the list after submission, here’s what you should check:\nIs there any data in the employers and skills table? Check by going to MySQL Workbench and looking for the employer/skill data within your schema. If there’s data in the database, check that you are correctly querying for the list of all objects in the controller. Are you calling .findAll() on the repository? Ensure you’re passing the list into the view, and it is named the same as the variable in the ThymeLeaf template. When everything works, move on to Part 3 below.\nThroughout your work, refer to the demo app as needed.",
    "description": "You will need to have completed the setup steps before starting this section.\nAbstractEntity We’ve replaced the abstract class JobField with an even more abstracted class aptly named, AbstractEntity. This class holds the fields and methods that are common across the Job class and the classes it contains as fields.\nWe will be creating tables for the subclasses that inherit from AbstractEntity but not a table for this parent class. Therefore, give AbstractEntity the @MappedSuperclass annotation.",
    "tags": [],
    "title": "Task 2: Persisting Employers and Skills",
    "uri": "/assignments/techjobs-persistent/part-two/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "The UI of a browser is designed to make simple GET requests for URLs entered into its address bar. This design works great for browsing sites, but falls short when working with APIs. Anything beyond a GET request is difficult to send via a browser address bar alone. Think about what is needed to create a new Event. This type of request contains a body. Our MVC application included a view to allow us to test inputs. Our API, however, is headless. It does not contain the client-side form. In order to test how it handles requests then, we need a way to interact with the API server without the browser. In this studio, we work with Postman to explore how APIs can be consumed.\nSetup Install Postman If you haven’t done so already, install Postman .\nFork and Clone the API Source Code With Postman installed, we’re ready to fork and clone the API located here . Although it is implemented differently from CodingEvents MVC, you will find that most of the features from the MVC application have been supported through endpoints in the API.\nNote Our focus in this studio is on operations and as such we will not be going into the development of the API. However, feel free to explore the source code if you are curious about the similarities and differences between the .NET MVC and API implementations.\nStart the API Server Open the project within IntelliJ and start the application.\nSwagger Documentation This application also implements Swagger for an api documentation page. Once your application is running you can view the swagger docs here at the following location: http://localhost:8080/swagger-ui/index.html.\nYou’ll see a page that looks nothing like any view we created in our other MVC applications. What you see running in the browser is not at all a client-side application, but rather, some documentation resources for the API itself.\nYou’ll see a list of those endpoints we asked you to describe for this lesson’s exercises:\nTwo endpoints at the API entry-point path, /events, to interact with the collection as a whole:\nlist Events: GET /events -\u003e Event[] create a Event: POST /events (NewEvent) -\u003e 200, Event And three that require a sub-path variable, /events/{id}, to interact with a single entity:\nfind single Event: GET /events/{id} -\u003e Event delete a Event: DELETE /events/{id} -\u003e 204, Event update an Event PATCH /events/{id} -\u003e 200, Event And below this list are two Schemas, or shapes, of resources the API handles.\nSwagger is a popular tool API developers use to include fast documentation for their API codebase. The page we’re looking at is generated by this tool and gives us a nice summary of the endpoints made available by the API we currently have running. But remember, we’ll test the API in Postman.\nMaking Requests to the Coding Events API List the Coding Events To create our first request using Postman, select the Create New button located within the “Start with something new” section.\nSelect the Create New button to create a new request\nNote The above screenshot is from the Home page on Postman. If you are on the Workshop page choose the New button on the top right of the My Workspace pane located on the left side.\nCreating a New Request With the Create New view open, select the HTTP Request option.\nThis will open the view to create a HTTP Request.\nConfiguring the Request Postman exposes an exhaustive set of tools for configuring every aspect of a request. Fortunately, this request is relatively simple.\nWe want to request the state of the CodingEvents collection, in shorthand:\nGET /events -\u003e CodingEvent[]\nIn Postman, we can make this request by configuring the following settings:\nthe URL of the endpoint: http://localhost:8080/events the HTTP method of the endpoint: GET the request header: (Accept: application/json) To the left of the URL bar is a dropdown selector for HTTP methods. It will default to GET. In the following requests, you will need to select the appropriate method from this list.\nThe dropdown menu contains all of the HTTP request types available to send\nNext to the request method type, enter the request URL where the API request should be sent: http://localhost:8080/events.\nUnderneath the URL bar are tabs for other aspects of the request. Select the Headers tab to configure our header. The Accept header lets the API know that we accept responses that are formatted as JSON.\nNote In our context, the API only responds with JSON. However, some APIs offer multiple MIME types for their responses. It is a best practice to set this header explicitly to the content type the consuming application expects.\nYou can set multiple headers in this section. As you begin to type the name and value of headers, Postman will autocomplete them for you. After configuration, your request should look like this:\nThe request Accept header is given a value of “application/json”\nTo issue the request, you can select the blue Send button on the right of the window, or use the ctrl + enter keyboard shortcut.\nViewing the Response Below the request configuration, you will see the response section has been populated. From here, you see the response body along with the status code (on the right) and a tab for headers:\nThe initial CodingEvents collection state is empty\nSince this is our first time running the application, the database is empty. We expectedly received an empty JSON list [] which corresponds to the empty representation of the Coding Events collection.\nIf you select the Headers tab in the response pane, you see the API satisfied our Accept request header and provided the response in application/json format.\nThe response is returned as application/json\nNote If you get a connection refused error, it means you likely forgot to start the API server or mistyped the URL. Check both of these before attempting the request again.\nIf sending the request results in a connection error, check your setup and request settings.\nCreate an Event For our next request, we will create an Event. Repeat the steps you performed in the previous request:\nClick on the New button in the top left corner of the Postman window to create a new request. Select the HTTP Request option. This request will change the state of the Events collection by adding a new entity to it. Recall that the shorthand for this request is:\nPOST /events (NewCodingEvent) -\u003e 200, Event\nWe will need to set the following request settings:\nThe URL of the endpoint: http://localhost:8080/events The HTTP method of the endpoint: POST The request header: (Content-Type application/json) The request body: a JSON NewEvent object As a best practice, we explicitly define the Content-Type header. This header indicates that our request contains application/json data so that the API knows how to parse the incoming request body.\nConfigure the Request Body In addition to the configurations you are now familiar with setting, we will need to define the request body. For this task, select the Body tab that is next to Headers.\nThe body of the request must be in a raw JSON format. In the Body tab, you will need to select the data format. Select raw from the available options. Once this format is selected, enter the following JSON body:\n{ \"name\": \"Halloween Hackathon!\", \"description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\" }Before sending the request, check that your configuration matches the above settings.\nHit Send and we’ll take a look at the result.\nAnalyzing the Response You can see in the response that the API reflected back the representation of the new Event entity. Notice that a unique id has been assigned to it by the API. Looking at the status code (200) and headers of the response, we can see the API conformed to the REST convention. The URL value of the newly created resource is: http://localhost:8080/events/1.\nThis location can be can now be used to view the individual Event entity that was created by our request.\nSending a Bad Request To test the rejection of bad requests, let’s send one that violates the NewEvent validation constraints. Send another request with the following JSON body:\n{ \"name\": \"Description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\" }You can see from the response that the API rejected the request. The response returns a bad request status of 400 which indicates a client-side error. The response body includes information about what went wrong with the request.\nGet a Single Event For this step, we will make a request for the state of a single entity. You can use the URL from the Location header of the previous request to complete this task. Remember to follow the steps you performed before, keeping in mind the shorthand for this request:\nGET /events/{id} -\u003e Event\nCreate a new HTTP request Configure the URL of the endpoint: http://localhost:8080/events/1 Configure the HTTP method of the endpoint: GET Configure the request header: (Accept: application/json) You should get back the following JSON response body:\n{ \"id\": 1, \"name\": \"Halloween Hackathon!\", \"description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\" }Updating an Event This step will include updating an already existing resource. We will use the Location header from the previous step to update the name and description of the event.\nCreate a new HTTP request\nConfigure the URL of the endpoint: http://localhost:8080/events/1\nConfigure the HTTP method of the endpoint: PATCH\nConfigure the request header\nConfigure the request body:\n{ \"name\": \"Linux Fundamentals\", \"description\": \"An event for Linux enthusiasts!\" } After sending the request verify that the changes were made by crafting another GET request to the resource located at http://localhost:8080/events/1.\nDelete an Event In this final step, we will issue a DELETE request. Before we make the request, let’s re-issue the request to list the collection of CodingEvents. Now that we have added an entity, we expect the state of the CodingEvents resource collection to have changed. Switch back to the GET request tab and re-issue the request for the endpoint http://localhost:8080/events. You should get a response of the collection’s list representation containing the single entity we have created.\n[ { \"name\": \"Linux Fundamentals\", \"description\": \"An event for Linux enthusiasts!\" } ]To delete this entity, and therefore change the state of our resources, we will need to issue the following shorthand request:\nDELETE /events/{id} -\u003e 204\nOnce again, go through the methodical process of setting up the request:\nCreate a new HTTP request Configure the URL of the endpoint: http://localhost:8080/events/1 Configure the HTTP method of the endpoint: DELETE Notice that for this request, we do not need to set any request headers. A DELETE request should send back an empty (no-content) response body with its 204 status code.\nDeleting an Event returns no body in the response\nAs a final confirmation, check the state of the CodingEvents collection by submitting a GET request to http://localhost:8080/events and notice that it has returned to its initial state. The representation of this state is shown in the empty list [] response body.\nBonus Missions If you complete this studio early and want some additional practice, consider the following bonus missions:\nExplore the API source code using your IDE debugger to step through the request and response process Try consuming the API from the command-line using the Bash curl program or the PowerShell Invoke-RestMethod cmdlet. ",
    "description": "The UI of a browser is designed to make simple GET requests for URLs entered into its address bar. This design works great for browsing sites, but falls short when working with APIs. Anything beyond a GET request is difficult to send via a browser address bar alone. Think about what is needed to create a new Event. This type of request contains a body. Our MVC application included a view to allow us to test inputs.",
    "tags": [],
    "title": "Studio: Consuming the Coding Events API With Postman",
    "uri": "/web-api-rest/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Let’s revisit our Cat and HouseCat friends. In java-web-dev-projects, open inheritance/testing-inheritance/tale-of-two-cats/src/main/java and examine the two classes inside.\nInheriting Fields and Properties Notice that Cat has a private string field family, representing the biological family of all cats.\nprivate String family = \"Felidae\";This field is not directly accessible by HouseCat since it is private. However, it may be read via the public getter getFamily.\npublic String getFamily() { return family; }There is no setter for family, however. It may only be set within Cat. It makes sense that a subclass should not be able to change the biological family of a cat, since this field should rarely, if ever, change.\nMethods of the base class Cat may be called on instances of the subclass HouseCat as if they were defined as part of the HouseCat.\nTry it out. In your inheritance folder, create a Main class. Within that class, write an instance of HouseCat and call some of the methods it inherits from Cat.\nHouseCat garfield = new HouseCat(\"Garfield\", 12); garfield.eat(); System.out.println(garfield.isTired()); // prints trueThe eat method was defined in Cat, but may be called on all HouseCat instances as well. We say: “HouseCat inherits the method eat() from Cat.” We know we have successfully called eat() on garfield because the printed statement indicates the cat is now tired.\nsuper We mention above that a subclass inherits all non-constructor methods from its base class. Indeed, when extending a class, we will not be able to create new instances of our subclass HouseCat using any constructors provided by Cat.\nThe base class Cat has a constructor that takes a single parameter of type double.\npublic Cat(double aWeight) { weight = aWeight; }But because HouseCat does not have such a constructor, the following code does not compile:\nHouseCat mittens = new HouseCat(8.4);Cat constructors are not inherited by HouseCat. If we want to use a Cat constructor in this subclass, we must explicitly provide it.\nTo do so, look at the constructor included in HouseCat:\npublic HouseCat(String aName, double aWeight) { super(aWeight); name = aName; }Here, the super keyword allows the subclass to access the constructor from the base class. This call to the base class constructor must be the first line of the subclass constructor. In the case of HouseCat, the subclass constructor extends the original constructor by setting an additional property, name.\nIf a base class constructor takes no arguments, then the no-argument constructor is implicitly called for you in the subclass. A no-argument, or no-arg constructor, is just as the name implies, a constructor that takes no arguments.\nFor example, we can add an additional constructor in Cat:\npublic Cat() { weight = 13; }Then in HouseCat, we can simply define another constructor as this:\npublic HouseCat(String aName) { name = aName; }Even though we don’t explicitly specify that we want to call a constructor from Cat, the no-argument constructor will be called. Now, we can initialize a new HouseCat with only a name property and the Cat no-argument constructor will still be applied. Back in Main, you can confirm that the base class constructor has been called:\nHouseCat spike = new HouseCat(\"Spike\"); System.out.println(spike.getWeight()); // prints 13As a consequence of this constructor syntax, we can easily expose any constructor from the base class by providing a subclass constructor with the same signature and a body that only calls the base class constructor.\npublic HouseCat(double aWeight) { super(aWeight); } Warning The above constructor is a bad one, and is included merely to introduce syntax and usage. We would not want to have a constructor for HouseCat that didn’t initialize an essential field such as name.\n@Override Sometimes when extending a class, we’ll want to modify behavior provided by the base class. This can be done by replacing the implementation of an inherited method by a completely new method implementation. For a given method, we can do this via method overriding.\nIn our example, the noise method of HouseCat overrides the method of the same name in Cat. When we override it, we should use the @Override annotation.\nHere are the methods in question.\nIn Cat:\npublic String noise() { return \"Meeeeeeooooowww!\"; }In HouseCat:\n@Override public String noise() { return \"Hello, my name is \" + name + \"!\"; }If we have a HouseCat object and call its noise() method, we will be using the method defined in HouseCat.\nCat plainCat = new Cat(8.6); HouseCat cheshireCat = new HouseCat(\"Cheshire\", 12); System.out.println(plainCat.noise()); // prints \"Meeeeeeooooowww!\" System.out.println(cheshireCat.noise()); // prints \"Hello, my name is Cheshire!\"Similar to other Java annotations, the @Override annotation is not required. However, it can prevent unintentional errors and make it clear when reading your code what you intend to do. The compiler will see the annotation and check to ensure that the signatures of the base method and the overriding method match up. If they don’t, it will flag an error. This can help prevent you from inadvertently creating a method with a different signature.\nWhen overriding a method from a base class, the method signatures must be exactly the same. The signature of a method includes the method name, access level, return type, and the type and number of input parameters.\nIn addition, when overriding a method, we may call the method from the base class that we are overriding by using super. This calls the overridden method in the base class via super.noise(), carrying out the original behavior if the given conditional branch is reached.\nObject Class In a previous lesson, we introduced the special methods equals and toString. All classes contain default implementations of these methods that can be overridden. In fact, these default methods are part of a class called Object. If a class does not explicitly extend another class, then it implicitly extends Object. So the default implementations of equals and toString (along with a few other methods) are made available to us via inheritance.\nNote that we should use the @Override annotation when we provide new implementations of these methods as well.\nReferences: The @Override annotation (docs.oracle.com) The Object Class (docs.oracle.com) Check Your Understanding:\nQuestion 1: For this question, refer to the code block below.\npublic class Message { private boolean friendly = true; private String language; private String text; public Message(String aLanguage, String aText) { language = aLanguage; text = aText; } public boolean getFriendly() { return friendly; } public String getLanguage() { return language; } public String getText() { return text; } } Question-1 A class called Greeting extends Message. Greeting and Message are both defined within a package called Speech. Select all of the fields and methods that are inherited by Greeting.\nfriendly language text Message getFriendly getLanguage getText Question 2: For this question, refer to the code block below.\npublic class Message { private boolean friendly = true; private String language; private String text; public Message(String aLanguage, String aText) { language = aLanguage; text = aText; } public boolean getFriendly() { return friendly; } public String getLanguage() { return language; } public String getText() { return text; } } Question-2 A class called Greeting extends Message. What would a constructor for Greeting need to be to call the Message constructor?\nA. public Greeting(String aLanguage, String aText, boolean isFriendly) { super(aLanguage, aText); friendly = isFriendly; } B. public Greeting(String aLanguage, String aText) { super(aLanguage, aText); } C. public Greeting() { super(aLanguage, aText); } D. public Greeting(String aLanguage, String aText) { language = aLanguage; text = aText; } ",
    "description": "Let’s revisit our Cat and HouseCat friends. In java-web-dev-projects, open inheritance/testing-inheritance/tale-of-two-cats/src/main/java and examine the two classes inside.\nInheriting Fields and Properties Notice that Cat has a private string field family, representing the biological family of all cats.\nprivate String family = \"Felidae\";This field is not directly accessible by HouseCat since it is private. However, it may be read via the public getter getFamily.\npublic String getFamily() { return family; }There is no setter for family, however.",
    "tags": [],
    "title": "A Tale of Two Cats",
    "uri": "/inheritance/reading/cat-classes/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "Sending Form Data - Video Note The starter code for this video is found in the path-variables branch of the hello-spring repo. The final code presented in this video is found on the forms branch . As always, code along to the videos on your own hello-spring project.\nSending Form Data - Text What if we want to send over some form data? To send data via a simple form in Spring Boot, we’ll set things up like this:\nWe have a controller method that generates a form at index.\n@GetMapping @ResponseBody public String helloForm() { String html = \"\u003chtml\u003e\" + \"\u003cbody\u003e\" + \"\u003cform method = 'get' action = '/hello'\u003e\" + \"\u003cinput type = 'text' name = 'coder' /\u003e\" + \"\u003cinput type = 'submit' value = 'Greet Me!' /\u003e\" + \"\u003c/form\u003e\" + \"\u003c/body\u003e\" + \"\u003c/html\u003e\"; return html; }Remember, without an argument, @GetMapping maps to /. On form submission, the data is sent to another path, /hello. We need a controller for that.\n@GetMapping(\"hello\") @ResponseBody public String hello(@RequestParam String coder) { return \"Hello, \" + coder + \"!\"; }Now, you have a controller that can handle the form submission. When the form submits, the input entered in the text box will be passed to the URL via a query string. This is why the controller method above passes in @RequestParam to handle the coder key.\nTo be able to submit the form via POST, we’ll need to modify the hello() controller to use @RequestMapping. Remember, @RequestMapping can annotate a method that responds to both GET and POST.\n// Responds to get and post requests at /hello?coder=LaunchCoder @RequestMapping(value = \"hello\", method = {RequestMethod.GET, RequestMethod.POST}) @ResponseBody public String hello(@RequestParam String coder) { return \"Hello, \" + coder + \"!\"; } @GetMapping @ResponseBody public String helloForm() { String html = \"\u003chtml\u003e\" + \"\u003cbody\u003e\" + \"\u003cform method = 'post' action = '/hello'\u003e\" + \"\u003cinput type = 'text' name = 'coder' /\u003e\" + \"\u003cinput type = 'submit' value = 'Greet Me!' /\u003e\" + \"\u003c/form\u003e\" + \"\u003c/body\u003e\" + \"\u003c/html\u003e\"; return html; }Check Your Understanding Question Which annotation is applied above a controller class?\n@Controller\n@GetMapping\n@PostMapping\n@RequestMapping\n@ResponseBody\n@RequestParam\n@PathVariable\nQuestion Select all the annotations applied above a controller method from the list below.\n@Controller\n@GetMapping\n@PostMapping\n@RequestMapping\n@ResponseBody\n@RequestParam\n@PathVariable",
    "description": "Sending Form Data - Video Note The starter code for this video is found in the path-variables branch of the hello-spring repo. The final code presented in this video is found on the forms branch . As always, code along to the videos on your own hello-spring project.\nSending Form Data - Text What if we want to send over some form data? To send data via a simple form in Spring Boot, we’ll set things up like this:",
    "tags": [],
    "title": "Controllers with Forms",
    "uri": "/controllers-and-routing/reading/controllers-with-forms/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "The next few sections walk through the steps necessary to enable simple authentication in the codingevents app. Along the way, we will use some advanced concepts that you haven’t fully learned. That’s okay. We don’t expect you to understand every detail the next few sections. However, you do need to understand the purpose of each step in enabling authentication.\nNote While we’ll use codingevents, these steps would be the same for any other app. If you want to add simple authentication to a Spring Boot application in the future, reference this chapter.\nBefore we can authenticate users, we need users to authenticate! We’ll start by adding a User model.\nA User Model Note You can use the add-tags branch as your starting point for this section. Be sure to create a new branch as you begin your work.\nA model class representing users needs, at a minimum, fields representing username and password.\nIn the models package, create a User class with @Entity and extending AbstractEntity. It should have two string fields, username and pwHash. We only need a getter for username.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @Entity public class User extends AbstractEntity { @NotNull private String username; @NotNull private String pwHash; public User() {} public User(String username, String password) { this.username = username; this.pwHash = password; } public String getUsername() { return username; } } Notice that the constructor takes a parameter named password and uses it to set the value of pwHash. We mentioned previously that we should never store passwords, so in a moment, we will update line 26 by creating a hash from the given password to store.\nNote Our validation annotations on User are very lenient. This is okay, however, because we will validate user input used to make User objects using a DTO with more restrictive validation.\nHashing Passwords We’ll use the bycrypt hash algorithm. One way to access this algorithm is via the following dependency:\nimplementation(\"org.springframework.security:spring-security-crypto:5.5.1\") Add this as an implementation dependency in your build.gradle file.\nThis dependency provides the BCryptPasswordEncoder class, which we will use to create and verify hashes. While our class needs one of these encoder objects, it does not need to be an instance variable. We’ll make it static so it can be shared by all User objects.\nprivate static final BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();Add the above line of code to your User class.\nIn the constructor, we can use encoder to create a hash from the given password:\npublic User(String username, String password) { this.username = username; this.pwHash = encoder.encode(password); }Our User objects should also be responsible for determining if a given password is a match for the hash stored by the object. We can do this using the encoder.matches() method. Let’s put this behavior in a method at the bottom of our User class:\npublic boolean isMatchingPassword(String password) { return encoder.matches(password, pwHash); } Warning Notice that we are using encoder.matches() rather than directly comparing hash values. More explicitly, the following comparison will NOT work to compare hashes generated by bcrypt:\npublic boolean isMatchingPassword(String password) { String candidateHash = encoder.encode(password); return candidateHash.equals(pwHash); } While our conceptual example in the previous section used direct comparison of hashes—and some hashing techniques allow you to do so—bcrypt does not. This is because bcrypt internally uses a technique called salting , which requires additional steps before comparison. These additional steps are carried out by encoder.matches().\nCreating the UserRepository As usual, we need a repository in order to access User objects stored in the database. This time, however, we add a twist. Create UserRepository in the data package, with the following contents:\npublic interface UserRepository extends CrudRepository\u003cUser, Integer\u003e { User findByUsername(String username); }While our repository extends CrudRepository, it also contains a new method, findByUsername. Based on the method signature, it appears that this method is intended to take a username, and return the given user with that username. Indeed, when our application runs, the UserRepository will have such a method.\nSpring allows for additional, custom methods to be added to repository interfaces, as long as they follow some basic naming conventions. These conventions are straightforward to use, and allow you to create additional, more sophisticated query methods. Methods created in this way are called query methods, and their rules are defined in the Spring documentation .\nNote The final code for this section is available in the user-model branch of the CodingEventsJava repository.\nCheck Your Understanding Question Why can we not use Java string comparison when evaluating values generated with bcrypt?\nbcrypt will never create two matching hashes. Java does not have a native string comparator method. Salting adds variance to hashes generated from the same plain text. Answers a and c. Question public interface UserRepository extends CrudRepository\u003cUser, Integer\u003e { User findByUsername(String username); }True/False: From the code block above, the line User findByUsername(String username); is missing a return statement.\nTrue False ",
    "description": "The next few sections walk through the steps necessary to enable simple authentication in the codingevents app. Along the way, we will use some advanced concepts that you haven’t fully learned. That’s okay. We don’t expect you to understand every detail the next few sections. However, you do need to understand the purpose of each step in enabling authentication.\nNote While we’ll use codingevents, these steps would be the same for any other app.",
    "tags": [],
    "title": "Creating a User Model",
    "uri": "/authentication/reading/creating-user-model/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "IntelliJ is an integrated development environment (IDE). An IDE is like a text editor on steroids. It not only allows you to write and edit code, but also contains many features that enhance the coding experience. IntelliJ offers code completion hints, debugging, and even its own compiler. We’ll be using it throughout this course, so it’s time to get familiar with some of the basics.\nInstall IntelliJ Visit the IntelliJ download site . Select your operating system and the Community version. Follow the installation prompts to select your settings.\nNote Make sure before downloading that you are downloading the Community version. You may have to scroll down through the page to find the Community version. The main version of IntelliJ is a paid version and may have different features than the Community version.\nWhen you reach the window asking for Installation Options, select the Add “bin” folder to the PATH box. Click Next. If you are asked for any other input, accept the default options.\nYou will finish on an IntelliJ welcome panel listing options to create a New Project, Open a project, or Get from VCS (a.k.a Version Control System).\nThis means you’ve installed IntelliJ, and you’re ready to start exploring its many features.",
    "description": "IntelliJ is an integrated development environment (IDE). An IDE is like a text editor on steroids. It not only allows you to write and edit code, but also contains many features that enhance the coding experience. IntelliJ offers code completion hints, debugging, and even its own compiler. We’ll be using it throughout this course, so it’s time to get familiar with some of the basics.\nInstall IntelliJ Visit the IntelliJ download site .",
    "tags": [],
    "title": "IntelliJ",
    "uri": "/intro-and-setup/intellij/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "In order to work with data, we need to add another element to our MVC application. Say, for example, we want to do things like remove an event from our list. Well, if two events both have the same name, how might we identify which of those items to delete? We can’t yet. So we need to tweak how we store event data.\nAdd a Unique Id - Video Note The starter code for this video is found at the add-property branch of the CodingEventsJava repo. The final code presented in this video is found on the add-id branch . As always, code along to the videos on your own codingevents project.\nAdd a Unique Id - Text Identifying data by a user-defined string called name is not a sustainable or scalable method of handling data in most situations. Consider the address book example. How can we distinguish between two contact entries with the same name field? It is a frequent practice to add a unique identifier field (sometimes called, or even labelled, uid) to a class responsible for modeling data. This ensures that our address book can contain two separate entries for our contacts who have the same name as one another.\nTo accomplish the same data clarity with events, we’ll add a few things to the event model class:\nA private id field . A static counter variable, nextId. Additional constructor code that: a. Sets the id field to the nextId value. b. Increments nextId. A getter method for the id field. The result in models/Event.java:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Event { private int id; private static int nextId = 1; private String name; private String description; public Event(String name, String description) { this.name = name; this.description = description; this.id = nextId; nextId++; } public int getId() { return id; } // ... other getters and setters ... // } With these additions, every time a new event object is created, it is assigned a unique integer to its id field.\nCreate a Data Layer - Video Note The starter code for this video is found at the add-id branch repo. The final code presented in this video is found on the create-data-layer branch . As always, code along to the videos on your own codingevents project.\nCreate a Data Layer - Text Now that we’ve begun building a model, it’s a good time to remind ourselves that models are not designed to be data storage containers. Rather, models are meant to shape the data stored in another location into objects that can be used in our application. As we work our way into learning about database usage and service calls, however, we’ll use a Java class to store some data temporarily.\nCreate a new package called data and add a class EventData. Whereas Event is responsible for organizing user-inputted information into a Java object, EventData is responsible for maintaining those objects once they are created. EventData is itself a Java class that stores events. It contains several methods for managing and maintaining the event data that simply extend built-in HashMap methods.\nThe contents of data/EventData.java:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class EventData { private static Map\u003cInteger, Event\u003e events = new HashMap\u003c\u003e(); public static Collection\u003cEvent\u003e getAll() { return events.values(); } public static void add(Event event) { events.put(event.getId(), event); } public static Event getById(Integer id) { return events.get(id); } public static void remove(Integer id) { if (events .containsKey(id)) { events.remove(id); } } } With EventData managing event data, we must once again refactor EventController to update the items stored in EventData. In keeping with the objective to remove data handling from the controller, we’ll remove the list of events at the top of the class. Consequently, for the displayAllEvents handler, we’ll now use events from EventData in addAttribute():\nmodel.addAttribute(\"events\", EventData.getAll());And back to processCreateEventForm, we’ll make use of the .add() method from EventData:\nEventData.add(new Event(eventName, eventDescription));Delete an Event - Video Note The starter code for this video is found at the create-data-layer branch of the CodingEventsJava repo. The final code presented in this video is found on the delete-events branch . As always, code along to the videos on your own codingevents project.\nDelete an Event - Text Now that we’ve refined our events storage method, we are able to tackle the task of deleting an object. To delete an event object from storage, we’ll grab the event’s id and use that information to call the remove method of EventData. Since the delete event is user-initiated, a controller will be involved to pass the information from the user-accessible view to the data layer. So our first step with this task is to create a controller method to get a view to delete events.\nOnto the end of EventController, add the following method:\n1 2 3 4 5 6 @GetMapping(\"delete\") public String renderDeleteEventForm(Model model) { model.addAttribute(\"title\", \"Delete Event\"); model.addAttribute(\"events\", EventData.getAll()); return \"events/delete\"; } We’ll now need to create a new view for the path mapped in the method above. Add a new template, events/delete.html. This view will reference event id fields in order to distinguish which items the user will request to delete via checkbox inputs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\" xmlns:th=\"http://www.thymeleaf.org/\"\u003e \u003chead th:replace=\"fragments :: head\"\u003e\u003c/head\u003e \u003cbody class=\"container\"\u003e \u003cheader th:replace=\"fragments :: header\"\u003e\u003c/header\u003e \u003cform method=\"post\"\u003e \u003cth:block th:each=\"event : ${events}\"\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003e \u003cspan th:text=\"${event.name}\"\u003e\u003c/span\u003e \u003cinput type=\"checkbox\" name=\"eventIds\" th:value=\"${event.id}\" class=\"form-control\"\u003e \u003c/label\u003e \u003c/div\u003e \u003c/th:block\u003e \u003cinput type=\"submit\" value=\"Delete Selected Events\" class=\"btn btn-danger\"\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e We also need a POST handler to take care of what to do when the delete event information is submitted by the user. We’ll have this post handler redirect the user back to the home page once they have selected which event, or events, to remove from storage.\nIn EventController, add another controller method:\n1 2 3 4 5 6 7 8 9 10 11 @PostMapping(\"delete\") public String processDeleteEventsForm(@RequestParam(required = false) int[] eventIds) { if (eventIds != null) { for (int id : eventIds) { EventData.remove(id); } } return \"redirect:/events\"; } This handler method uses the required = false parameter of @RequestParam to make this parameter optional. This allows the user to submit the form without any events selected. Once eventIds is optional, we must also check that it is not null before entering the loop.\nCheck Your Understanding Question In codingevents, which method can we call to list every event object?\nQuestion In codingevents, breaking up the event storage from the Event model is an example of which object-oriented concept?",
    "description": "In order to work with data, we need to add another element to our MVC application. Say, for example, we want to do things like remove an event from our list. Well, if two events both have the same name, how might we identify which of those items to delete? We can’t yet. So we need to tweak how we store event data.\nAdd a Unique Id - Video Note The starter code for this video is found at the add-property branch of the CodingEventsJava repo.",
    "tags": [],
    "title": "Models and Data",
    "uri": "/models-and-model-binding/reading/models-and-data/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "Now that we have a general idea of how to set up our entity classes and repositories, let’s take a deeper dive into how repositories are used to perform CRUD operations on a database.\nCRUD Operations Previously, we learned that we can create a repository to fetch rows of a table in a database. To do so, we need to create a corresponding controller.\nWhen creating our controller, we add a variable of the repository type that has the annotation @Autowired.\nNext, we will learn how to use some of the more common CrudRepository methods, such as delete(T entity), deleteById(ID id), findAll(), findById(ID id), and save(S entity).\nUsing Persistence in a Controller - Video The following video explains how we can add a controller to manage persistence in our codingevents application. The accompanying text is a quick rundown of what happens in the video. To get started, create a branch off of your persistent-model branch.\nNote The starter code for this video is found at the persistent-model branch of the CodingEventsJava repo.\nhe final code presented in this video is found on the persistent-controller branch . As always, code along to the videos on your own codingevents project.\nUsing Persistence in a Controller - Text Inside of EventController, we can add a variable of type EventRepository and give it an @Autowired annotation. For events, we want to be able to display all of the events in our database as well as add and delete events.\nWhen displaying the events in our database, we write a method, displayAllEvents. We want to use displayAllEvents to display a table that contains all of our events. We did something similar to this before, but we used a list or iterable containing all of the objects we wanted to display. Since we have set up ORM between the MySQL database and our MVC application, we need to use the methods from CrudRepository to get all of the instances of the Event class. We can use the findAll() method to return an iterable containing all of the events in our database.\nAs you write the methods necessary for EventController, you might notice that this controller doesn’t look too different from other controllers we previously created.\nNow we need to use the methods in CrudRepository to fetch the necessary information or update the correct table. Update your methods within EventController so that they no longer use the EventData class and instead use our newly created eventRepository.\nSince we no longer use the EventData class it can be safely removed.\nCheck Your Understanding Question True or false: We add different methods directly to our repository.",
    "description": "Now that we have a general idea of how to set up our entity classes and repositories, let’s take a deeper dive into how repositories are used to perform CRUD operations on a database.\nCRUD Operations Previously, we learned that we can create a repository to fetch rows of a table in a database. To do so, we need to create a corresponding controller.\nWhen creating our controller, we add a variable of the repository type that has the annotation @Autowired.",
    "tags": [],
    "title": "Repositories",
    "uri": "/intro-orm-mapping/reading/repositories/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST \u003e Reading",
    "content": "Here’s a takeaway of the abstract ideas we covered on the last page:\nState: data that can change (transition) through interactions between an API and its client\nRepresentation: the convertible format that enables state to be transferred and used by the client and API\nResource: the representation of a type of state (as an entity or collection) that the API exposes to its client for interaction\nNow that you have an understanding of these concepts, let’s turn our attention to the practical details of working with REST APIs. The following sections reference the CodingEvents MVC project we’ve been creating over the last several lessons to illustrate the capabilities of an alternative CodingEvents API project.\nShapes Shape describes the input or output of an API in terms of its fields and data types. There are no rules for how shapes should be defined. However, the goal should be to describe shapes in a way that is easy to understand. For this reason, shapes are typically shown in a way that is similar to the representation format. Because we use JSON as the representation format, the JSON data types are used.\nYou can think of shape like a class definition in an object-oriented codebase:\nExample public class Event { public int id; public string name; public string description; } ...getters ...settersThe output resource shape of an Event entity:\nEvent { id: integer name: string description: string } The JSON representation of the resource that the API sends out is then based on the shape. This is like how an object is based on the blueprint of its class.\nHere’s an Event JSON Representation:\nExample 1 2 3 4 5 { \"id\": 1, \"name\": \"Halloween Hackathon!\", \"description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\", } We can think of inputs as a partial state provided by the client during create and update operations. Only some of the fields are included because the API is responsible for providing the others.\nConsider the following example of an input shape used to create an event. Notice that the id field is not included:\nExample 1 2 3 4 Event { name: string description: string } Some of the common fields the API is responsible for managing:\nthe unique identifier (id) the “created on” or “last updated” timestamp links for relationships between resources Endpoints An API endpoint refers to the HTTP path and method that defines the location of a resource and the action to take on its state.\nEndpoints are what an API exposes to its consumers. Each endpoint is made up of two components:\npath: the noun that identifies the resource method: the verb, or action, to take on the resource’s state Identifying the Resource Paths are used to identify the resource being interacted with. Recall the hierarchal nature of resources where an entity only exists within a collection. RESTful APIs separate the resources they expose into one or more resource entry-points.\nLet’s consider two resources exposed by a RESTful API:\nExample The codingevents API would have the following familiar resources (among others):\nResource Path Coding Event /events Tag /tags The name of the path is arbitrary but should follow these rules of thumb to maintain consistency:\nis lowercase and separated by underscores if necessary adequately describes the resource in as few characters as necessary is a plural noun (actions are described by the method of the endpoint) Let’s see this in action with a CodingEvents API. Using what we have learned so far, we can expect the state of the resource collection to be represented in a JSON array:\nExample Here is a response from a request to the GET /events endpoint:\n1 2 3 4 [ CodingEvent { ... }, ... ] The state of the CodingEvent collection is made up of the collective state of each CodingEvent entity within it.\nExample Here is a response from a request to the GET /tags endpoint:\n1 2 3 4 [ Tag { ... }, ... ] A request to the endpoint of the Tag collection would include its respective Tag entity representations (JSON objects).\nSuppose we wanted to interact with an individual resource entity. We would need to identify it within its collection.\nThe path to identify a resource entity would need to include:\nthe collection identifier, or resource entry-point (/collection) the unique resource entity identifier (/{entityId}) within the collection Because the unique identifier of the entity is variable, we use a path variable ({entityId}) to describe it in a generic way.\nTip The hierarchy of collections and entities is similar to directories and files. To identify an entity is like identifying a file within a directory. You need both the directory (collection) name and a sub-path that uniquely identifies the file (entity).\nExample The generic path to identify a CodingEvent resource is noted as /events/{codingEventId}.\nLet’s assume a CodingEvent entity exists with an id of 12.\nWe could make a request to the GET /events/12 endpoint to read its current state and receive this response:\n1 2 3 4 5 { \"id\": 12, \"name\": \"Halloween Hackathon!\", \"description\": \"A gathering of nerdy ghouls...\", } CRUD Operations \u0026 HTTP Methods As we saw in the previous article, state is something that can be interacted with using CRUD operations. By convention, each of these operations corresponds to an HTTP method:\nHTTP Method CRUD Operation POST Create GET Read PUT/PATCH Update DELETE Delete The use case of an API dictates the design of its contract. This includes which actions the client can take on each resource. In other words, not every action must be exposed for each resource the API manages.\nNote If a client tries to take an action on a resource that is not supported by the API, they will receive a 405 status code or Method not allowed error response.\nEndpoint Behavior Depending on the endpoint, the effect of a request can differ. In other words, the behavior of an endpoint is dependent on the subject – an entity or the collection as a whole.\nOperating On Collections HTTP Method Behavior with resource state POST create a new entity in the collection GET view the current list of all entities in the collection PUT/PATCH bulk update of entities in the collection DELETE remove all entities in the collection Note Exposing the ability to modify or delete all of the entities in a collection at once can be risky. In many cases, the design of a RESTful API will only support GET and POST endpoints for collections.\nLet’s consider a request for creating a resource entity. Recall that this operation acts on the state of the collection by adding a new entity to it.\nExample As we saw earlier, the input shape for creating an event only includes the fields the consumer is responsible for. The Id field is then managed internally by the API.\nWe refer to this shape as a NewCodingEvent to distinguish it from the CodingEvent resource shape:\n1 2 3 4 NewCodingEvent { name: string description: string } We can describe this request in a shorthand:\nPOST /events (NewCodingEvent) -\u003e 201, CodingEvent\nThis shorthand includes:\nThe endpoint method: POST The endpoint path: /events The name of the request body: (NewCodingEvent) The returned status code: 201 The returned response body: CodingEvent After sending this request, the response includes:\na 201, or Created, status code a Location response header the representation of the created resource entity state (including an assigned Id field) Operating On Entities HTTP Method Behavior with resource state POST N/A (created inside a collection) GET view the current entity state PUT/PATCH update the entity state DELETE remove the entity from the collection When removing a resource, the client is requesting a transition to an empty state. This means that both the request body and response body that are transferred (the representations of state) are empty. We can see this behavior in action with a request to the DELETE endpoint for a single resource entity in our example API:\nExample Let’s once again assume a CodingEvent resource exists with an id of 12. If we want to remove this entity, we need to issue a request to its uniquely identified DELETE endpoint:\nDELETE /events/12 -\u003e 204\nIn this shorthand, you can see that this request has an empty request body. This is the empty state we are requesting a transition to. The 204, or No Content, status code in the response indicates that the action was successful and that the response body is empty. The API transfers back a representation of empty state (no response body) to the client.\nExample What would happen if we made another request to the endpoint of a resource entity that doesn’t exist, DELETE /events/999?\nWe would receive a404, or Not Found, status code that lets us know the request failed because of a client error (providing an id for a nonexistent resource).\nHeaders \u0026 Status Codes A RESTful API uses HTTP response status codes and HTTP request and response headers. Response status codes inform the client if their request is handled successfully or if changes are needed to fix a request.\nHTTP headers are used to communicate additional information (metadata) about a request or response. Let’s take a look at the status codes now.\nStatus Codes Every RESTful API response includes a status code that indicates whether the client’s request has succeeded or failed.\nSuccess Status Codes When a request is successful, the 2XX status codes are used. These codes communicate to the consumer the type of success relative to the action that was taken. Below is a list of the common success codes you will encounter:\nCommon client success status codes for each action:\nHTTP Method Status Code Message Response POST 201 Created Resource entity and location header GET 200 OK Resource entity or collection DELETE 204 No Content empty response body Failure Status Codes Requests can fail. Status code groups categorize two types of failure:\nclient error: 4XX status code group server error: 5XX status code group Client errors indicate that a request can be reissued with corrections. Each of these status codes and messages notify the consumer of the changes needed for a success. In contrast, server errors cannot be remedied by the client sending the request.\nLet’s look at some of the common client error status codes:\nStatus Code Message Correction 400 Bad Request Client must fix errors in their request body 401 Unauthorized Client must authenticate first 403 Forbidden An Authenticated client in not allowed to perform the requested action 404 Not Found The path to identify the resource is incorrect or the resource does not exist A bad request will include an error message in its response. The message should indicate what the client must change in their request body to succeed. This failure is seen when creating or updating a resource entity:\nExample In the upcoming SpringRestApiApplication, the state of a Event is validated using the following criteria:\nname: “string text” description: “string text” Imagine a client sending a PATCH request to update the Event resource entity with an Id of 6.\nPATCH /events/6 (PartialCodingEvent) -\u003e CodingEvent\nIf their request body contains a name field that is empty, the request will receive a 400 status code:\nHere is a portion of an invalid request to the PATCH /events/6 endpoint:\n1 2 3 4 { \"name\": \"description\": \"Event without a name\" } name does not contain any content, making it an invalid Event name. The SpringRestApiApplication API response to such a request therefore includes a 400 status code. This alerts the client that they must correct their data representation. The response body indicates which aspects of the request are invalid.\nUsing the information in the response, the client can fix their request body and reissue the request successfully.\nNote The 401, or Unauthorized, status code actually indicates that the consumer is not authenticated. This means the consumer has not proven their identity to the API. The 403, or Forbidden, status code is a more accurate description of being unauthorized. After authenticating, the consumer’s authorization can determine if they are allowed or forbidden from taking the requested action.\nHeaders In RESTful design, HTTP headers communicate metadata about each interaction with a resource.\nCommon request/response headers in REST:\nRequest/Response Header Meaning Example Both Content-Type The attached body has the following media type application/json Request Accept The client expects the requested resource representation in the given media type application/json Response Location The created resource representation can be found at the given URL value /resources/{id} Tip The Authorization request header is also commonly used.\nCheck Your Understanding Question A POST request performs which type of action?\nCreate\nRead\nUpdate\nDelete\nQuestion The _________ portion of a RESTful URL identifies the resource.\npath\nquery\nhost\nuser",
    "description": "Here’s a takeaway of the abstract ideas we covered on the last page:\nState: data that can change (transition) through interactions between an API and its client\nRepresentation: the convertible format that enables state to be transferred and used by the client and API\nResource: the representation of a type of state (as an entity or collection) that the API exposes to its client for interaction\nNow that you have an understanding of these concepts, let’s turn our attention to the practical details of working with REST APIs.",
    "tags": [],
    "title": "REST: Practical Fundamentals",
    "uri": "/web-api-rest/reading/rest-practical-fundamentals/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping",
    "content": "In Exercises: OMG the ORM! , you created a new persistent class, EventCategory. We will eventually use this class to categorize events in our application. However, your application now has a fair amount of duplication across the two model classes. In this studio, you will reduce repetition (i.e. “DRY out your code”) using inheritance and abstract classes.\nGetting Ready In your coding-events repository, create a new branch from your exercises work. Call this branch abstract-entity-studio.\nNote On CodingEventsJava, we have provided a branch called event-category to make sure you have good starter code for the studio, even if you didn’t complete the exercises.\nYour Tasks Let’s look at both the Event and EventCategory classes. There are four class members that are (essentially) the same in both classes:\nThe id field The getId method The equals method The hashCode method Note If you have a super-sharp eye, you’ll notice that the two equals methods aren’t exactly the same. For example, the next-to-last line of this method in Event looks like this:\nEvent event = (Event) o;while in EventCategory this line is slightly different;\nEventCategory that = (EventCategory) o;This minor difference will not matter in the long run, as we’ll see later.\nYour objective in this studio is to reduce this repetition by creating a class that contains the duplicated/shared code, which both Event and EventCategory can inherit.\nCreate and Extend AbstractEntity In the models package, create a new class named AbstractEntity. Add the abstract keyword to the class declaration. We do this because, while we want to share code across our two models, we’ll never need to create an instance of AbstractEntity. If you need a quick refresher, review our section on abstract classes .\nTip This class name seems a little odd at first, but it makes sense after a brief explanation.\nIt is a commonly used convention in Java to prefix the name of an abstract class with Abstract, to make it obvious to other developers that they can’t create instances of the class.\nAdditionally, every entity class that we create will extend AbstractEntity. (Recall that an entity is a class/object that can be stored in a database.)\nFinally, in the class declarations of both Event and EventCategory, extend AbstractEntity.\nMove Duplicated Code Into the Superclass Open up the Event class file. Move the 4 class members that we identified as being duplicated across both models up into AbstractEntity. Now your Event class will inherit these members rather than define them itself.\nWhen you move the equals method up into AbstractEntity, you’ll see a compiler error on the last line (this is related to the note we made above). Let’s look at this method in detail.\n@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Event event = (Event) o; return id == event.id; }The compiler error occurs on the last line, and the context menu in IntelliJ describes it for us:\n'id' has private access in 'org.launchcode.codingevents.models.AbstractEntity' What is this telling us? As written, event is an Event object, since it is the result of casting o to Event in the line above: Event event = (Event) o;. But when we reference event.id we are attempting to reference the private field id, which lives not in Event, but in AbstractEntity. This is not allowed.\nThis error is easy to fix; simply change the cast on the next-to-last line to convert o to an instance of AbstractEntity. And while we’re at it, let’s give the variable event a better name.\n@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AbstractEntity entity = (AbstractEntity) o; return id == entity.id; } Note The equals method works by checking the value of the identifier/primary key field id. If two objects have the same id, then they should be considered equal. Otherwise, they are not equal.\nIt may not be obvious that you can’t have an Event object and an EventCategory object with the same id. However, the way in which the database manages and assigns these values ensures that won’t happen.\nNow in your EventCategory model, delete the four class members that are inherited from AbstractEntity. You should have NO compiler errors in your application at this point.\nThe @MappedSuperclass Annotation One final step: Add the @MappedSuperclass to your AbstractEntity class.\nThis annotation will be discussed in more detail later. For now, you should understand that it ensures that the id values will still be stored in the event and event_category tables of the database, even though Event and EventCategory don’t have id fields in their class definition.\nMaking Sure It Works Start up your application and make sure it all works! Be sure to add some new data and make sure you see it in the appropriate table(s).",
    "description": "In Exercises: OMG the ORM! , you created a new persistent class, EventCategory. We will eventually use this class to categorize events in our application. However, your application now has a fair amount of duplication across the two model classes. In this studio, you will reduce repetition (i.e. “DRY out your code”) using inheritance and abstract classes.\nGetting Ready In your coding-events repository, create a new branch from your exercises work.",
    "tags": [],
    "title": "Studio: Creating an AbstractEntity",
    "uri": "/intro-orm-mapping/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance",
    "content": "For this studio, you will design and build a console program that allows the user to take a quiz. This means you will have to create some questions and get some input from the user.\nFirst, the questions We want to be able to handle multiple types of questions:\nMultiple choice: a question with a fixed set of possible answers, of which only one may be chosen and only one answer is correct. Checkbox: a question with a fixed set of possible answers, of which any number may be chosen; there is one correct combination of choices. True/False: a question that has a true/false answer. Design In order to design your program, consider:\nWhat do these types of questions have in common? What makes these question types different? First, design a base class (called Question) that contains the common features, and design subclasses for each of the question types. For each question type, be sure to include:\nClass name Fields and properties with access modifiers Methods with access modifiers Any inheritance relationship Should any of the question classes be abstract? If so, should any of its methods be abstract?\nMake sure that there is functionality included to display the questions, to display the possible answers, and to check to see if the answer(s) is correct.\nThen design the Quiz class. A quiz has a list of questions, and we should be able to:\nAdd questions Run or carry out the quiz Grade the quiz Implementation Create a new IntelliJ project and implement the design that you created. If you are unsure about your design, get some feedback by talking through it with a classmate before you start coding.\nPutting it all together Create a class named QuizRunner with only a main method. The program should create several questions, present them to the user, accept the user’s responses, and then tell them whether their answers were correct or incorrect.\nHow to Submit Push up your work to a new GitHub repository. Submit the link to your repository in the Lesson 6 Studio assignment in Canvas.\nBonus Missions Add a short answer question type that includes validation behavior to only allow the user to enter text with less than 80 characters. Add a couple more question types to your program: Linear scale: a question that allows the user to provide a numeric response within an integer scale, which may vary from question to question. For instance, it could be 1-3 for one linear scale question and 1-5 for another. Paragraph: Similar to short answer but allows for responses of up to 500 characters. Add tests with JUnit to your classes. ",
    "description": "For this studio, you will design and build a console program that allows the user to take a quiz. This means you will have to create some questions and get some input from the user.\nFirst, the questions We want to be able to handle multiple types of questions:\nMultiple choice: a question with a fixed set of possible answers, of which only one may be chosen and only one answer is correct.",
    "tags": [],
    "title": "Studio: Fun with Quizzes",
    "uri": "/inheritance/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 10: Controllers and Routing",
    "content": "Wouldn’t it be nice to have a small tracker to show us what skills we have built and where we are at in learning them? Let’s build something that would let us do just that!\nAs always, read through the whole studio before starting!\nAt the end of the studio, your final project should be able to take input from a user via a form and post the information in a way that is easy to read.\nStart up Spring Using the Spring Initializr Head to the Spring initializr to initialize a new Spring project.\nFor Project, select Gradle Project, for Language, select Java, and for Spring Boot, select 3.1.x (whichever is the most recent release, that is NOT a snapshot). For Project Metadata, we can use org.launchcode as Group and skills-tracker as the artifact. Finally, we want to add Spring Web and Spring Boot DevTools as our dependencies. Once the above has been accomplished your spring initializr should look similar to the following screenshot:\nDouble check that everything is ready to go and click Generate!\nLaunching IntelliJ Unzip the newly generated skills-tracker.zip and move the folder into the directory where you are keeping your homework for this class!\nOpen IntelliJ and select Import Project. Double click bootRun and head to localhost:8080 to make sure there is nothing there.\nNow you are ready to start coding!\nCreating Controllers In your org.launchcode package, add another package called controllers and add a class called SkillsController. Inside SkillsController, you will add several methods to accomplish the following:\nAt localhost:8080, add text that states the three possible programming languages someone could be working on. You need to have an h1 with the title “Skills Tracker”, an h2, and an ol containing three programming languages of your choosing. At localhost:8080/form, add a form that lets the user enter their name and choose their favorite, second favorite, and third favorite programming languages on your list. Use select elements for each of the rankings. Just as with the exercises, we will use @GetMapping(). Also at localhost:8080/form, use @PostMapping and @RequestParam to update the HTML with an h1 stating the user’s name and an ol showing the three programming languages in the order they chose. End Result At the end of the studio, when you navigate to localhost:8080, you should see the following:\nWhen you navigate to localhost:8080/form, you should see a blank form that looks something like:\nIf you fill out the form, your page may render like so:\nBonus Missions Reformat your form page to use a table instead of an ordered list. Add a new path to the site to display the information from the completed form. ",
    "description": "Wouldn’t it be nice to have a small tracker to show us what skills we have built and where we are at in learning them? Let’s build something that would let us do just that!\nAs always, read through the whole studio before starting!\nAt the end of the studio, your final project should be able to take input from a user via a form and post the information in a way that is easy to read.",
    "tags": [],
    "title": "Studio: Skills Tracker",
    "uri": "/controllers-and-routing/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views",
    "content": "After all of the hard work we have put into learning about Thymeleaf, it is time for a spa day! First, we need to put our knowledge of Thymeleaf to the test. Instead of heading out to our favorite spa, let’s make an application for the owners!\nOur application needs to do the following:\nDisplay the user’s name and skin type under their customer profile. Display the appropriate facial treatments for their skin type. Display the description of the spa’s manicures or pedicures depending on the user’s interest. As always, read through the whole page before starting to code.\nSetup Fork and clone the appropriate repository . Check out the project via Version Control in IntelliJ.\nWhen you open the project and run it using bootRun, go to localhost:8080 and you should see a form!\nThe Customer Profile In controllers, we have one controller called SpaDayController. Inside SpaDayController, we have three methods.\nThe checkSkinType() method. The owners gave us this method to help us figure out which facial treatments are appropriate for which skin type. The customerForm() method, which looks very similar to what we did in the last lesson. The spaMenu() method, which we will use to bring in our Thymeleaf template, menu.html. In templates, we have a Thymeleaf template called menu.html. Inside menu.html, there are two main divs in the body. Let’s focus on the div with the id, clientProfile.\nAdd an h2 that says “My profile”. Add a p tag and use th:text to bring in the value of name. Add a p tag and use th:text to bring in the value of skintype. Add a p tag and use th:text to bring in the value of manipedi. Run the application and head to localhost:8080 to see the results! When we fill out the form, we should see a new page with the client profile at the top!\nList All Appropriate Facial Treatments Luckily for us, the spa owners gave us the checkSkinType() method in our SpaDayController. Also, our teammates already set up code in our spaMenu() method to fill an ArrayList\u003cString\u003e with facial treatments that would work for the user’s skin type. Now, we just need to use Thymeleaf to display the appropriate facial treatments (stored in the ArrayList, appropriateFacials)!\nLet’s head back to menu.html and checkout the empty div with the id, servicesMenu.\nAdd a table and iteratively (using our th:block and th:each combo) add rows for the values in appropriateFacials. If you need a quick reminder of the syntax, review the :ref:th:block section \u003cth-block\u003e .\nMani or Pedi? One other thing the spa owners want to be cautious of is their treatment descriptions. Because the descriptions rarely change and are going to be used in multiple places on the site, the owners have written up the descriptions as Thymeleaf fragments.\nCheckout the file, fragments.html, in the templates directory. The owners have already written up the descriptions for their manicure and pedicure in separate p tags.\nWe want to put the description in a div along with an h3 stating that it is either a manicure or pedicure. This new div should be inside the servicesMenu div.\nUse th:if to determine if the value of manipedi is a \"manicure\" or \"pedicure\".\n#. If the value of manipedi is \"manicure\", the div element containing the h3 that says \"Manicure\" needs to be on the page and the p tag needs to be replaced with the fragment of the manicure description from fragments.html. #. If the value of manipedi is \"pedicure\", the div element containing the h3 that says \"Pedicure\" needs to be on the page and the p tag needs to be replaced with the fragment of the pedicure description from fragments.html.\nEnd Result After you are done with the studio, you should be able to fill out the form, click “Submit”, and see your profile page.\nBonus Mission Modify styles.css to get some CSS practice! Try add a footer with square shaped div elements. Each square should be a different color for different available nail polishes. Modify the form to allow the user to select either a manicure or pedicure or both. If the user selects both, display both the manicure and pedicure descriptions on the Spa Menu page. Work with routes and paths to display the spa menu page on a separate route from the form. ",
    "description": "After all of the hard work we have put into learning about Thymeleaf, it is time for a spa day! First, we need to put our knowledge of Thymeleaf to the test. Instead of heading out to our favorite spa, let’s make an application for the owners!\nOur application needs to do the following:\nDisplay the user’s name and skin type under their customer profile. Display the appropriate facial treatments for their skin type.",
    "tags": [],
    "title": "Studio: Spa Day!",
    "uri": "/thymeleaf-views/studios/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 14: Models and Model Binding",
    "content": "For this studio, you will add functionality to allow users to sign up for your spa-day app.\nThe starter code has been modified from where you left off last class. Grab the refactored code on the user-signup-starter branch .\nYou’ll notice in this branch that the name field has been removed from the service selection form. Once we implement user-signup functionality, we can use a given user’s name to identify the spa client. We’ve also moved data into a Client model and out of the SpaDayController class.\nIn this studio, we’ll ask you to write another model, User. User and Client may at first appear redundant, but in the future as you develop your spa application, you may find a scenario where a user is logging in who is not also Client.\nGetting Ready Within spa-day, create the following files:\nCreate a UserController in org.launchcode.spaday.controllers. Add the @Controller annotation, along with @RequestMapping(\"user\") to configure routes into the controller. Create a new folder, user/ within resources/templates. Create index.html and add.html templates within resources/templates/user/. Create a User class within org.launchcode.spaday.models. Creating the Model Your User class should have a few private fields with getters and setters: username, email, password.\nRendering the Add User Form In the UserController, create a handler method displayAddUserForm() to render the form. This handler should correspond to the path /user/add, and for now, it can just return the path to the add.html template.\nTip Don’t forget to add /user/add to your path when you test your new features.\nWithin the add.html template, create a form that accepts inputs for each of the User class properties. Include an additional password input field to verify the password input. The form should be set up to POST to /user.\nBe sure to set type=\"password\" for the password and verify inputs, to ensure the passwords are not visible when being typed into the form. You can also set type=\"email\" on the email input, which will enable some basic client-side validation. We’ll tackle validation in more detail in the next studio.\nProcessing Form Submission Within the UserController, create a handler method with this signature:\npublic String processAddUserForm(Model model, @ModelAttribute User user, String verify) { // add form submission handling code here }This will use model binding to create a new user object, user, and pass it into your handler method.\nNote You don’t need to store the User object anywhere for this studio. We’re focusing on form handling and validation in this exercise. If you want to keep track of users using the method we employed in the models lesson video, check out the Bonus Missions below.\nCheck that the verify parameter matches the password within the user object. If it does, render the user/index.html view template with a message that welcomes the user by username. If the passwords don’t match, render the form again.\nRefining Form Submission Once registered, we want the user to access the form selecting their spa services.\nIn user/index.html, add a th:href element to take the user back to the root path, /, of the app, where the serviceSelection template will be rendered. If the form is re-rendered when a password is not verified, we should let the user know that their form was not properly submitted. Use model.addAttribute to add an error attribute, letting the user know that their passwords should match. This model attribute will need to correspond to an element in the template that will only render the error text when the passwords do not match.\nIf we send a user back to re-populate the form, it would be nice to not clear their previous submission.\nIn the form submission handler, add the username and email fields of the submitted user as model attributes. Back in the form, add a value attribute to these form fields and make them equal to the model attributes. Bonus Missions\nAdd an id field to User, along with accessor methods (with appropriate access level). Create a UserData class within org.launchcode.spaday.data that provides access to a list of users via add, getAll, and getById. In the user/index.html view, display a list of all users by username. Each username should have a link that takes you to a detail page that lists the user’s username and email. Add a Date field in User, and initialize it to the time the user joined (i.e., when the User object was created). Display the value of this property in the user detail view. ",
    "description": "For this studio, you will add functionality to allow users to sign up for your spa-day app.\nThe starter code has been modified from where you left off last class. Grab the refactored code on the user-signup-starter branch .\nYou’ll notice in this branch that the name field has been removed from the service selection form. Once we implement user-signup functionality, we can use a given user’s name to identify the spa client.",
    "tags": [],
    "title": "Studio: Spa User Signup",
    "uri": "/models-and-model-binding/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication",
    "content": "For this studio, you’ll be tasked with adding simple user authentication to your techjobs application. The steps to do this will match what you have already done in codingevents. You should refer back to the tutorial starting here .\nCreate the User Model Create the Login and Registration Forms Filter Requests The Starter Code Fork and clone the starter code for TechJobs (Auth Edition) .\nThe dependencies for the database connection and hashing function are already added for you in build.gradle. You will need to do some work to ensure that the schema, user, and database password match your own local MySQL setup.\nOpen application.properties and view the first three statements: # Database connection settings spring.datasource.url=jdbc:mysql://localhost:3306/techjobs?useLegacyDatetimeCode=false\u0026verifyServerCertificate=false\u0026useSSL=false\u0026requireSSL=false\u0026allowPublicKeyRetrieval=true\u0026serverTimezone=America/Chicago spring.datasource.username=techjobs spring.datasource.password=techjobs You likely do not already have a schema named techjobs_auth or this combination of username and password so you must create them. Note We’ve greatly reduced the functionality of the app so you can focus on the work to set up authentication. Running the application now gives you a familiar-looking navbar with two menu options, Add Jobs and Logout. You can add jobs right away and an astute observer of the starter code and schema tables will notice that the fields on Job are only strings, not complex objects. Logout functionality is not yet implemented, but you’ll get there by the end of this studio.\nCreate the User Model In the project you have cloned, create a User model identical to that in codingevents. The class needs:\nTo be an entity. To have username and encrypted password fields. To have appropriate constructors, getters, setters. Encode the User password field.\nAdd a static BCryptPasswordEncoder variable. Update the constructor that has arguments to encode the password field. Add a method to check password values. Create a UserRepository.\nAdd the special query method to find a user by username. Tip At this point, re-starting your application will not change the view at localhost:8080, but you can confirm you have done everything correctly if you see a user table in MySQL Workbench.\nCreate the Login and Registration Forms Create an AuthenticationController.\nInclude an autowired UserRepository. Add session handling utilities. This includes:\nA static final variable for the session key. A method to get the user information from the session. A method to set the user in the session. Create two DTOs for the user registration and login forms in a new package, dto, under models.\nCreate a login form DTO with username and password fields. Create a register form DTO with the fields above and a field to verify a password. Handle the registration data.\nAdd a GET handler in AuthenticationController to display a registration form.\nCreate a register template with form fields corresponding to the register DTO.\nCreate a POST handler in AuthenticationController to process the form.\nIf the form has validation errors, re-render the registration form with a useful message.\nIf the username is already tied to a user, add a fitting error message and re-render the form.\nIf the two form fields for passwords do not match, add an error message and re-render the form.\nIf none of the above conditions are met,\nCreate a new user with the form data, Save the user to the database, Create a new user session, Redirect to the home page. Handle the login data.\nRepeat steps 1 + 2 for handling the registration data, this time with the login information.\nApart from model validation checks and the final redirect, the POST handler for the login form will have some different checks from that of the registration form:\nIf the database does not contain a user with the submitted username, add an error message and re-render. If the submitted password does not match the encoded password attached to the username in the form, add an error message and re-render. If the submission passes all of these checks, create a new user session. Handle logging out.\nStill in AuthenticationController, create a GET handler method for a path to logout.\nInvalidate the session data from the request object. Redirect the user to the login form. Tip Now, clicking the Logout navbar link will result in a redirect to the login page. You can also now create a brand new user through the link to register as one, and confirm the object’s existence in your user table.\nFilter Requests Create an AuthenticationFilter class in the techjobsauth package.\nHave this class implement the HandlerInterceptor.\nAdd autowired instances of both UserRepository and AuthenticationController.\nAdd a preHandle method.\nThis must override the inherited method of the same name. Grab the session information from the request object. Query the the session data for a user. If a user exists, return true. Otherwise, redirect to the login page and return false. Create a whitelist.\nIn the top of AuthenticationFilter, add a whitelist variable containing the paths that can be accessed without a user session.\nCreate a method next that checks a given path against the values in the whitelist.\nUpdate preHandle with a call to this method.\nBefore looking for session and user status, add a conditional that checks the whitelist status of the current request object. Register the filter with Spring.\nCreate a class called WebApplicationConfig at the same level as AuthenticationFilter with the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @Configuration public class WebApplicationConfig implements WebMvcConfigurer { // Create spring-managed object to allow the app to access our filter @Bean public AuthenticationFilter authenticationFilter() { return new AuthenticationFilter(); } // Register the filter with the Spring container @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor( authenticationFilter() ); } } Tip You’ll know your filter setup works when you re-start your application and attempt to get to localhost:8080 but instead get redirected to /login.\nYou’ll also know that your filters are working if hitting your login and and register forms now renders them without any styling. Bonus points if you can determine why this is.\nThat’s it, that’s all. You’re done. Go forth and test the auth flow. Then add this to any other Spring project you’re working on!",
    "description": "For this studio, you’ll be tasked with adding simple user authentication to your techjobs application. The steps to do this will match what you have already done in codingevents. You should refer back to the tutorial starting here .\nCreate the User Model Create the Login and Registration Forms Filter Requests The Starter Code Fork and clone the starter code for TechJobs (Auth Edition) .\nThe dependencies for the database connection and hashing function are already added for you in build.",
    "tags": [],
    "title": "Studio: TechJobs Authentication",
    "uri": "/authentication/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "In the next video , you will extend your hello-spring project and practice using Thymeleaf templates as you code along with the clip.\nBefore you get there, however, we need to review a few core skills and best-practices.\nPassing Data to a Template The controller class contains methods that send data to different templates. These methods have a structure similar to:\npublic String methodName(Model model) { // method code here model.addAttribute(\"variableName\", variableValue); return \"pathToTemplate\"; }Each method that sends data to a template requires:\nA Model parameter (line 1). This object stores the variable names and values that get passed into a template. One or more addAttribute statements that add data to the model object (line 5). variableName must be a string. variableValue can be a variable of any type, a number, a ‘character’, or a “string”. A return statement of type String. The return string contains the path and file name for the desired template (line 7). For example, if our templates folder contains a subfolder called animals that holds a template called dogs.html, then the return statement would be return \"animals/dogs\";. Accessing Data in a Template Thymeleaf commands appear (in most cases) as attributes within a standard HTML tag. Each command starts with the prefix th, followed by a keyword.\n\u003ctag th:keyword = \"...\"\u003e\u003c/tag\u003eThe code inside the quotation marks will vary depending on the keyword. Usually, this will involve the data passed in from the controller. The data available to a template includes any variables and values stored in the model object, and these will be accessed with the syntax ${variableName}.\nFor example, if the controller stores data in the name variable, then the template can display that value like so:\n\u003cp th:text = \"${name}\"\u003e\u003c/p\u003eIn essence, th:text says, Take the value of the variable inside the ${} and display it as the text for this element. If name stores the string “Rutabaga”, then when the program runs, the code interprets \u003cp th:text = \"${name}\"\u003e\u003c/p\u003e in the same way as:\n\u003cp\u003eRutabaga\u003c/p\u003eBy using th:text = \"${name}\", we make our webpage dynamically display data within the p element. Changing the value of name leads to a corresponding change in the text in the view after refreshing.\nSetting Default Text What if we want to view our template without running the program? As mentioned earlier in the chapter, Thymeleaf files can be opened in a browser and displayed as a webpage. With no data, however, opening a template shows blank spaces wherever information from the controller is expected. Fortunately, we can add some default text within the framework to give us an idea of what the page will look like when we start the program.\nTo include default text in our template, simply include some placeholder information inside the elements that contain a Thymeleaf attribute.\n\u003ch2 th:text = \"${title}\"\u003eDefault Title\u003c/h2\u003e \u003cdiv\u003e \u003cp th:text = \"${bookQuote}\"\u003eDon't Panic\u003c/p\u003e \u003ca href = \"someURL\" th:text = \"${linkText}\"\u003eLaunchCode\u003c/a\u003e \u003c/div\u003eThe text Default Title, Don't Panic, and LaunchCode appear if we open the template file in a browser. When the program runs, however, these text samples will be replaced by the values stored in the title, bookQuote, and linkText variables.\nIn most cases, you will never see the default text in your live webpage. Including it helps, however, if you need to visualize your planned layout for the webpage before your project is completely finished.\nTip Best-practice encourages us to include default text in our templates. This improves the readability of the code, and it gives an outside observer a better idea of the structure of the webpage. Default text also indicates what data will appear in different sections.\nOrganizing Templates As any project grows, the number of templates required to build the website will increase. Instead of just throwing all of the files into the templates folder, best-practice mandates that we place related items into subfolders.\nFor example, if we build a website for a zoo, we can help ourselves immensely if we avoid a templates folder with a single level of files for every animal or feature of the site. A better approach would be to divide the templates into related categories like feedingSchedules, concessions, donations, pachyderms, etc. Each subfolder can also hold finer categories as needed.\nThe goal is to consolidate your files into related groups. That way, you only need to use a single file path in a given controller. This improves the efficiency of your code, saves you from getting a headache trying to find and fix a specific file, and streamlines updates by reducing the lines of code that need to be modified.\nCheck Your Understanding Question Given the code:\n\u003cp th:text = \"${name}\"\u003eName: Default\u003c/p\u003eWhat will be displayed on the screen if the controller sends in a name variable with a value of “Blake”?\nName: Default Name: Blake Blake: Default Blake Question We want a list element to read, “Item name: ______, Price = ______”, where the blanks need to be filled in with name and price values sent from the controller.\nWhich of the following will produce the desired result?\n\u003cli th:text = \"${'Item name: ' + name + ', Price = ' + price}\"\u003e\u003c/li\u003e \u003cli th:text = \"Item name: ${name}, Price = ${price}\"\u003e\u003c/li\u003e \u003cli th:text = \"${name}, ${price}\"\u003eItem name: , Price = \u003c/li\u003e \u003cli\u003eItem name: ${name}, Price = ${price}\u003c/li\u003e ",
    "description": "In the next video , you will extend your hello-spring project and practice using Thymeleaf templates as you code along with the clip.\nBefore you get there, however, we need to review a few core skills and best-practices.\nPassing Data to a Template The controller class contains methods that send data to different templates. These methods have a structure similar to:\npublic String methodName(Model model) { // method code here model.",
    "tags": [],
    "title": "Using Templates",
    "uri": "/thymeleaf-views/reading/using-templates/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "We defined a one-to-one relationship between two objects, A and B, as occurring when an object of type A can be related to only one instance of an object of type B, and vice versa.\nSuch a relationship can be configured using the JPA annotation @OneToOne.\nCreating a One-to-One Relationship - Video Note The starter code for this video is found at the one-to-many branch of the CodingEventsJava repo. The final code presented in this video is found on the one-to-one branch . As always, code along to the videos on your own codingevents project.\nCreating a One-to-One Relationship - Text We first need a class that makes sense to relate to Event in a one-to-one fashion.\nThe EventDetails Class Given a class that contains lots of metadata, it is a common design pattern is to create a class to encapsulate all such data. For example, many apps will have a UserProfile class to model the data associated with a User class, such as a profile photo, interests, connections, and so on.\nWe will follow this pattern to create an EventDetails class to model the data associated with an Event. This will provide a great opportunity to set up a one-to-one relationship. And while we don’t have a lot of data associated with events yet, this will set up our application to grow as we add more.\nTo start, create a new class in the models packaged named EventDetails. Like all of our model classes, it should be annotated with @Entity and extend AbstractEntity. Then move the description and contactEmail fields out of Event and into EventDetails. Finally, add constructors and accessor methods.\nEventDetails now looks like this:\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @Entity public class EventDetails extends AbstractEntity { @Size(max = 500, message = \"Description too long!\") private String description; @NotBlank(message = \"Email is required\") @Email(message = \"Invalid email. Try again.\") private String contactEmail; public EventDetails(String description, String contactEmail) { this.description = description; this.contactEmail = contactEmail; } public EventDetails() {} public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public String getContactEmail() { return contactEmail; } public void setContactEmail(String contactEmail) { this.contactEmail = contactEmail; } } Back in the Event class, clean up by removing all references to description and contactEmail.\nRelating EventDetails to Event Each Event should have a single EventDetails object, and vice versa. Breaking out metadata into a separate class allows us to grow EventDetails—for example, adding location, date, time, and attendance information—without making Event too big. It also allows our application to load a set of Event objects without also needing to fetch lots of additional metadata if it isn’t needed.\nTo establish the relationship, add a new field of type EventDetails to Event and annotate it with @OneToOne. Additionally, add the validation annotations @Valid and @NotNull.\n@OneToOne @Valid @NotNull private EventDetails eventDetails;This is the first time we have used @Valid on a class member.\nFirst, let’s review what @NotNull accomplishes. When an Event object is created, the @NotNull annotation will ensure that the eventDetails field is not null. But what if we also want to ensure that eventDetails is itself a valid object?\nAs we have seen, using @Valid on a method parameter in a controller will result in the fields of that method being validated. For instance, with an Event object, our @NotNull annotation will ensure that the eventDetails field is not null. By default, however, validation will not descend into the eventDetails class to check its validation annotations.\nUsing @Valid on the eventDetails field ensures that such validation occurs. It makes sure that an Event object will not be considered valid unless it has an EventDetails object that is also valid (i.e. it has valid description and contactEmail fields).\nBefore moving on, create a getter and setter pair for eventDetails.\nTemplate Updates Our events/create.html and events/index.html templates reference the fields event.description and event.contactEmail, which no longer exist. We need to update those references to use the new eventDetails field.\nIn events/index.html:\n18 19 20 21 22 23 24 \u003ctr th:each=\"event : ${events}\"\u003e \u003ctd th:text=\"${event.id}\"\u003e\u003c/td\u003e \u003ctd th:text=\"${event.name}\"\u003e\u003c/td\u003e \u003ctd th:text=\"${event.eventDetails.description}\"\u003e\u003c/td\u003e \u003ctd th:text=\"${event.eventDetails.contactEmail}\"\u003e\u003c/td\u003e \u003ctd th:text=\"${event.eventCategory.name}\"\u003e\u003c/td\u003e \u003c/tr\u003e Notice that lines 21 and 22 now reference description and contactEmail off of event.eventDetails.\nSimilarly, update events/create.html:\n15 16 17 18 19 20 21 22 23 24 25 26 \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eDescription \u003cinput th:field=\"${event.eventDetails.description}\" class=\"form-control\"\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.eventDetails.description}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eContact Email \u003cinput th:field=\"${event.eventDetails.contactEmail}\" class=\"form-control\"\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.eventDetails.contactEmail}\"\u003e\u003c/p\u003e \u003c/div\u003e The inputs and error elements associated with description and contactEmail have now similarly been updated. With these changes in place, model binding in our controller will take place properly.\nCascading ORM Operations We have one final update to make. To illustrate, let’s look at our POST handler for creating and saving Event objects:\n65 66 67 68 69 70 71 72 73 74 75 @PostMapping(\"create\") public String processCreateEventForm(@ModelAttribute @Valid Event newEvent, Errors errors, Model model) { if(errors.hasErrors()) { model.addAttribute(\"title\", \"Create Event\"); return \"events/create\"; } eventRepository.save(newEvent); return \"redirect:\"; } The newEvent parameter is created by Spring Boot using model binding. As usual, we validate the new model object using @Valid in conjunction with the errors object.\nNote Recall that validation annotations within EventDetails will be checked (for the Event.eventDetails field) since we added @Valid to that field.\nIf you were to start your application and run it at this point, an exception would occur when attempting to save newEvent on line 73 (eventRepository.save(newEvent)). Specifically, the root exception would be:\norg.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : org.launchcode.codingevents.models.Event.eventDetails -\u003e org.launchcode.codingevents.models.EventDetails This exception refers to the transient value Event.eventDetails. A transient value is a an object that can be saved to the database (i.e. is of an entity type) but has NOT been saved yet. In our case, trying to save newEvent causes problems because its eventDetails field can not be null in the database, but the value of this field—a new EventDetails object created on form submission—has not been saved yet.\nThe fix for this problem is simple, and allows us to introduce the concept of cascading. A database operation cascades from Event to EventDetails if, when the operation is applied to an Event instance, it is also applied to the associated EventDetails instance. If our call to eventRepository.save could be made to cascade then our problem would be solved!\nTo cascade our save operation, go into the Event class and add a cascade parameter to the @OneToOne annotation:\n@OneToOne(cascade = CascadeType.ALL) @Valid @NotNull private EventDetails eventDetails;The cascade parameter specifies which ORM operations should cascade from Event to its eventDetails field. Setting this to CascadeType.ALL specifies that all database operations—including save and delete—should cascade.\nWe could set cascade = CascadeType.PERSIST and solve our current problem as well. However, that would mean that delete operations would not cascade. It makes sense for the EventDetails object to be deleted when its associated Event object is deleted, so we use CascadeType.ALL.\nAs you continue working with ORM, you are likely to need to use other CascadeType values. We won’t go into more depth on this topic here, but encourage you to read the documentation on your own.\nAt this point, your app should work. We have established our first one-to-one relationship, while learning about a new design pattern and cascading. Nice work!\nThe Inverse Relationship Once we have set up the relationship from Event to EventDetails, it is easy to configure the inverse relationship. We don’t need to do this for the functionality currently in coding-events, but we will walk through the steps here for demonstration purposes.\nTo do so, add a field of type Event to EventDetails. Then add @OneToOne to the new field with a mappedBy parameter.\n@OneToOne(mappedBy = \"eventDetails\") private Event event;Setting mappedBy = \"eventDetails\" will ensure that the field is populated correctly. For a specific EventDetails object details, event will be populated with the Event object that contains details. Then both sides of the one-to-one relationship will have a reference to the other.\nCheck Your Understanding Question True/False: When a new object is saved to a repository, all of its non-primitive fields are saved as well.\nQuestion Consider an entity type A that has a reference to an entity type B, both of which are stored in a SQL database. Which of the following are true?\nA and B are in a one-to-one relationship. A is not valid unless B is also valid. Setting cascade = CascadeType.ALL on the relationship annotation ensures that B is saved whenever A is saved. A and B will have a foreign-key relationship in the database. ",
    "description": "We defined a one-to-one relationship between two objects, A and B, as occurring when an object of type A can be related to only one instance of an object of type B, and vice versa.\nSuch a relationship can be configured using the JPA annotation @OneToOne.\nCreating a One-to-One Relationship - Video Note The starter code for this video is found at the one-to-many branch of the CodingEventsJava repo. The final code presented in this video is found on the one-to-one branch .",
    "tags": [],
    "title": "Creating a One-to-One Relationship",
    "uri": "/orm-relationships/reading/one-to-one/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation",
    "content": "Before diving into the next chapter, here are some of our favorite resources on model validation in Spring Boot in case you want to review them.\nValidation in Spring Boot Validating Form Input ",
    "description": "Before diving into the next chapter, here are some of our favorite resources on model validation in Spring Boot in case you want to review them.\nValidation in Spring Boot Validating Form Input ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/spring-model-validation/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 15: Model Validation \u003e Reading",
    "content": "Thymeleaf provides some handy attributes for working with form fields. They make use of the fact that, when using model binding, each model field contains a lot of information about the corresponding form input needed. In particular, the model field and its annotations often determine:\nThe name of the form field (that is, the value of its name attribute). The validation rules and corresponding error messages for the field. Thymeleaf provides some convenient attributes to make wiring up a form much easier and cleaner.\nDisplay Validation Errors for a Field - Video Note The starter code for this video is found at the validation-errors branch of the CodingEventsJava repo. The final code presented in this video is found on the display-errors branch As always, code along to the videos on your own codingevents project.\nTip Some hawk-eyed students notice a small quirk after finishing their display-errors constructor. Each time the page reloads, the id counter for the database entries increases by 1, even if no new row is added. This leads to a table that contains gaps between the id values.\nThis is OK! There is no need to correct the quirk right now.\nDisplay Validation Errors for a Field - Text Using th:field We can use the th:field attribute on a form input to instruct Thymeleaf to add field-specific attributes to the form, such as name and id.\nConsider our second input, which currently looks like this:\n17 18 19 \u003clabel\u003eDescription \u003cinput type=\"text\" name=\"description\" class=\"form-control\" /\u003e \u003c/label\u003e Above, we set the name attribute of the input element equal to \"description\". We do this because we want this input data to be bound to the description field of the Event class when the form is submitted.\nA better approach uses th:field to bind the description field when the form is rendered.\n17 18 19 \u003clabel\u003eDescription \u003cinput type=\"text\" th:field=\"${event.description}\" class=\"form-control\" /\u003e \u003c/label\u003e With this syntax, Thymeleaf will look for a variable named event and use its description property to set the values of the name and id attributes. The generated input looks like this:\n\u003cinput type=\"text\" id=\"description\" name=\"description\" class=\"form-control\" /\u003eWe don’t need to use the id attribute in this case, but it doesn’t hurt anything by being there. Now, Thymeleaf sets name on its own, based on the field identifier.\nFor this to work, two more steps are necessary. First, we add constructor to Event that doesn’t require any arguments, also called a no-arg constructor.\n27 28 29 30 31 32 33 34 35 36 37 public Event(String name, String description, String contactEmail) { this(); this.name = name; this.description = description; this.contactEmail = contactEmail; } public Event() { this.id = nextId; nextId++; } This code includes two changes:\nA no-arg constructor has been created. It simply sets the id of the object, leaving all other fields null. The previously-existing constructor now calls this(), which calls the no-arg constructor to set the id before setting the values of all other fields. Finally, we have to pass in an empty Event created with the new no-arg constructor when rendering the form. Back in EventController, we update the handler:\n26 27 28 29 30 31 @GetMapping(\"create\") public String displayCreateEventForm(Model model) { model.addAttribute(\"title\", \"Create Event\"); model.addAttribute(\"event\", new Event()); return \"events/create\"; } Notice line 29, which passes in an Event object created by calling the no-arg constructor.\nNote It’s also allowable to pass in the Event object without a label:\nmodel.addAttribute(new Event());In this case, Spring will implicitly create the label \"event\", which is the lowercase version of the class name.\nUsing this technique on our other form fields completes the task of binding the object to the form during rendering.\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u003cform method=\"post\"\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eName \u003cinput type=\"text\" th:field=\"${event.name}\" class=\"form-control\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.name}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eDescription \u003cinput type=\"text\" th:field=\"${event.description}\" class=\"form-control\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.description}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eContact Email \u003cinput type=\"text\" th:field=\"${event.contactEmail}\" class=\"form-control\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.contactEmail}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003cinput type=\"submit\" value=\"Create\" class=\"btn btn-success\" /\u003e \u003c/div\u003e \u003c/form\u003e One additional result of using th:field is that if the Event object has a value in any bound field, the input will be created with that value in its value attribute. For example, if the event object has a contactEmail of me@me.com, then the resulting form input would be:\n\u003cinput type=\"text\" id=\"contactEmail\" name=\"contactEmail\" value=\"me@me.com\" class=\"form-control\" /\u003eThe value is then visible in the form field when the page loads. This may not seem immediately useful, but it actually is. Recall our form submission handler:\n33 34 35 36 37 38 39 40 41 42 43 @PostMapping(\"create\") public String processCreateEventForm(@ModelAttribute @Valid Event newEvent, Errors errors, Model model) { if(errors.hasErrors()) { model.addAttribute(\"title\", \"Create Event\"); return \"events/create\"; } EventData.add(newEvent); return \"redirect:\"; } This method checks for validation errors and returns the user to the form if it finds any. It uses model binding to create a new event object, but this event object is also passed into the view when re-rendering the form. This means that if there are validation errors, the form will be rendered with the values that the user previously entered, preventing the user from having to re-enter all of their data.\nUsing th:errors The Thymeleaf attribute th:errors is used similarly to th:field to display field-specific error messages. Recall that when we added our validation annotations to each model field, we also added a message argument. Setting th:errors to a field will display any validation errors for that field.\nFor example, let’s add a new element to the first form group:\n9 10 11 12 13 14 \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eName \u003cinput th:field=\"${event.name}\" class=\"form-control\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.name}\"\u003e\u003c/p\u003e \u003c/div\u003e Setting th:errors=\"${event.name}\" tells Thymeleaf to insert any error messages related to the name field of event into the paragraph element. We add class=\"error\" to allow us to style this element, for example with red text. A simple rule in our styles.css file will do the trick:\n.error { color: red; } Note Make sure that styles.css is included in the head fragment of fragments.html, or the stylesheet will not load.\nUsing this attribute on all of the fields gives us our final form template code:\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u003cform method=\"post\"\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eName \u003cinput type=\"text\" th:field=\"${event.name}\" class=\"form-control\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.name}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eDescription \u003cinput type=\"text\" th:field=\"${event.description}\" class=\"form-control\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.description}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eContact Email \u003cinput type=\"text\" th:field=\"${event.contactEmail}\" class=\"form-control\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${event.contactEmail}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003cinput type=\"submit\" value=\"Create\" class=\"btn btn-success\" /\u003e \u003c/div\u003e \u003c/form\u003e Now, when the form is submitted with invalid data, our custom validation error messages will display just below the given inputs.\nCheck Your Understanding Question Which HTML attributes will a th:field attribute NOT influence?\nid name value field ",
    "description": "Thymeleaf provides some handy attributes for working with form fields. They make use of the fact that, when using model binding, each model field contains a lot of information about the corresponding form input needed. In particular, the model field and its annotations often determine:\nThe name of the form field (that is, the value of its name attribute). The validation rules and corresponding error messages for the field. Thymeleaf provides some convenient attributes to make wiring up a form much easier and cleaner.",
    "tags": [],
    "title": "Thymeleaf Form Tools",
    "uri": "/spring-model-validation/reading/thymeleaf-form-tools/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 12: Tools in Intellij",
    "content": "After completing this chapter, you are ready to learn more about MVC web applications. If you would like some additional resources on tools in IntelliJ before going on to the next chapter, here are some of our favorites.\nDebug code Tutorial: Debug your first Java application ",
    "description": "After completing this chapter, you are ready to learn more about MVC web applications. If you would like some additional resources on tools in IntelliJ before going on to the next chapter, here are some of our favorites.\nDebug code Tutorial: Debug your first Java application ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/tools-in-intellij/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 9: Spring Into MVC",
    "content": "Now you are ready to learn more about controllers! If you want to learn more about MVC, here are some of our favorite resources.\nSpring documentation ",
    "description": "Now you are ready to learn more about controllers! If you want to learn more about MVC, here are some of our favorite resources.\nSpring documentation ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/spring-intro/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 6: Unit Testing",
    "content": "Before continuing on to the next chapter, here are some additional resources on unit testing.\nJUnit 5 Test LifeCycle JUnit Documentation Intellij notes on JUnit ",
    "description": "Before continuing on to the next chapter, here are some additional resources on unit testing.\nJUnit 5 Test LifeCycle JUnit Documentation Intellij notes on JUnit ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/unit-testing/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections \u003e Reading",
    "content": "To write an ArrayList version of the program, we will have to introduce several new Java concepts, including the class ArrayList. We will also review different kinds of for loops used in Java.\nBefore going any further, we suggest you run the ArrayListGradebook program in IntelliJ. You can view this program in the java-web-dev-projects/chapter-example/student-example directory. Once you’ve done that, let’s look at what is happening in the Java source code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package org.launchcode; import java.util.ArrayList; import java.util.Scanner; public class ArrayListGradebook { public static void main(String[] args) { ArrayList\u003cString\u003e students = new ArrayList\u003c\u003e(); ArrayList\u003cDouble\u003e grades = new ArrayList\u003c\u003e(); Scanner input = new Scanner(System.in); String newStudent; System.out.println(\"Enter your students (or ENTER to finish):\"); // Get student names do { newStudent = input.nextLine(); if (!newStudent.equals(\"\")) { students.add(newStudent); } } while(!newStudent.equals(\"\")); // Get student grades for (String student : students) { System.out.print(\"Grade for \" + student + \": \"); Double grade = input.nextDouble(); grades.add(grade); } // Print class roster System.out.println(\"\\nClass roster:\"); double sum = 0.0; for (int i = 0; i \u003c students.size(); i++) { System.out.println(students.get(i) + \" (\" + grades.get(i) + \")\"); sum += grades.get(i); } double avg = sum / students.size(); System.out.println(\"Average grade: \" + avg); } } Here we declare and initialize two objects, students and grades, which appear to be of type ArrayList\u003cString\u003e and ArrayList\u003cDouble\u003e, respectively. An ArrayList in Java is very similar to an Array. Like an Array, we must let the compiler know what kind of objects our ArrayList is going to contain. In the case of students, the ArrayList will contain values of type String (representing the names of the students), so we use the ArrayList\u003cString\u003e syntax to inform the compiler that we intend to fill our list with Strings. Similarly, grades will hold exclusively values of type Double and is declared to be of type ArrayList\u003cDouble\u003e.\nWarning Notice that we declared grades to be of type ArrayList\u003cDouble\u003e, using the wrapper class Double rather than the primitive type double. All values stored in Java collections must be objects, so we’ll have to use object types in those situations.\nIn lines 10 and 11, we also initialize each list by creating a new, empty list. Note that when we call the ArrayList constructor, as in new ArrayList\u003c\u003e(), we don’t need to specify type (it’s implicit in the left-hand side of the assignment).\nNote You will sometimes see the ArrayList class written as ArrayList, where E represents a placeholder for the type that a programmer will declare a given list to hold. This is especially true in documentation. You can think of E as representing an arbitrary type.\nClasses like ArrayList that take another type or class as a parameter are referred to as generic classes or generic types.\nArrayList Iteration do-while We then use a do-while loop to collect the names of each of the students in the class.\n18 19 20 21 22 23 24 25 26 // Get student names do { newStudent = input.nextLine(); if (!newStudent.equals(\"\")) { students.add(newStudent); } } while(!newStudent.equals(\"\")); Recall that a do-while loop is very similar to a while loop, but the execution condition is checked at the end of the loop block. This has the net effect that the code block will always run at least once. In this example, we prompt the user for a name, which Java processes via input.nextLine() when the user hits the enter key. To finish entering names, the user enters a blank line.\nFor each student that is entered (that is, each non-empty line), we add the new String to the end of our list with students.add(newStudent). The .add() method is provided by the ArrayList Class . There are lots of other ArrayList methods to get familiar with, some of which we will discuss in more detail below.\nNote that our program imports java.util.ArrayList to take advantage of this Java provided class.\nfor-each Below the do-while loop are two different loops that demonstrate two ways you can loop through a list in Java. Here’s the first, which collects the numeric grade for each student:\n27 28 29 30 31 32 // Get student grades for (String student : students) { System.out.print(\"Grade for \" + student + \": \"); Double grade = input.nextDouble(); grades.add(grade); } This, you may recall, is Java’s for-each loop syntax. You may read this in your head, or even aloud, as: for each student in students. As you might expect at this point, we must declare the iterator variable student with its data type.\nfor The next loop on display prints out each student’s name and grade:\n34 35 36 37 38 39 40 41 // Print class roster System.out.println(\"\\nClass roster:\"); double sum = 0.0; for (int i = 0; i \u003c students.size(); i++) { System.out.println(students.get(i) + \" (\" + grades.get(i) + \")\"); sum += grades.get(i); } Here, we introduce the syntax students.size() which utilizes the size() method of ArrayList. This method returns the integer representing the number of items in the list. This is similar to String’s .length() method.\nIn this for loop, we use a loop index to define the starting point, ending point, and increment for iteration. It may be helpful for you to consider this kind of construction as something like, for integer i in the range of the number of items in students.... The first statement inside the parenthesis declares and initializes a loop index variable i. The second statement is a Boolean expression that is our exit condition. In other words, we will keep looping as long as this expression evaluates to true. The third statement is used to increment the value of the loop index variable at the end of iteration through the loop.\nAgain, the syntax i++ is Java shorthand for i = i + 1. Java also supports the shorthand i-- to decrement the value of i. We can also write i += 2 as shorthand for i = i + 2.\nIn the final lines of the program, we compute the average grade for all students:\n43 44 double avg = sum / students.size(); System.out.println(\"Average grade: \" + avg); ArrayList Methods Let’s gather up a few of the ArrayList methods that we’ve encountered so far, along with a few new ones. While these will be the most common methods and properties that you use with this class, they by no means represent a complete list. Refer to the official documentation on the ArrayList class for such a list, and for more details.\nTo demonstrate the use of these methods, we’ll create a new ArrayList called planets.\nArrayList\u003cString\u003e planets = new ArrayList\u003c\u003e();Ok, we’ve got an empty ArrayList. We need to use the class’s .add() method to populate this collection with items.\nNote There are other means to declare and initialize an ArrayList in fewer lines. These require knowledge of other collections types, so we’ll stick with .add() for the time being.\nUsing .add() to populate planets:\n1 2 3 4 5 6 7 8 planets.add(\"Mercury\"); planets.add(\"Venus\"); planets.add(\"Earth\"); planets.add(\"Mars\"); planets.add(\"Jupiter\"); planets.add(\"Saturn\"); planets.add(\"Uranus\"); planets.add(\"Neptune\"); Thus, the first item in this table:\nJava Syntax Description Example add() Adds an item to the ArrayList planets.add(\"Pluto\") adds Pluto to planets size() Returns the number of items in an ArrayList, as an int planets.size() returns 9 contains() Checks to see if the ArrayList contains a given item, returning a Boolean planets.contains(\"Earth\") returns true indexOf() Looks for an item in an ArrayList, returns the index of the first occurrence of the item if it exists, returns -1 otherwise planets.indexOf(\"Jupiter\") returns 4 Here’s a couple more methods that require slightly longer descriptions:\nJava Syntax Description Example Collections.sort() Rearranges the elements of a Collection into ascending order. Collections.sort(planets) produces [\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Pluto\", \"Saturn\", \"Uranus\", \"Venus\"] This method is technically used on Java’s Collections class and thus requires a different import statement:\nimport java.util.Collections;Collections is itself a member of the collections framework but not all members of the framework are instances of this class. We include this method here because, should you be in the market for a sorting method, this is a helpful one to know.\nJava Syntax Description Example toArray() Returns an Array containing the elements of the ArrayList planets.toArray(planetsArray) returns {\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Pluto\", \"Saturn\", \"Uranus\", \"Venus\"} Perhaps you recall that in Java, you must know the size of the Array when you create it. So we’ll need to first define the new Array before we can use toArray().\n1 2 String[] planetsArray = new String[planets.size()]; planets.toArray(planetsArray); Speaking of Arrays, let’s see the Array version of Gradebook next.\nCheck Your Understanding Question The number of entries in an ArrayList may not be modified.\nTrue False Question Create an ArrayList called charStars containing a, b, and c.\nArrayList\u003cString\u003e charStars = new ArrayList\u003c\u003e(); charStars.add('a'); charStars.add('b'); charStars.add('c'); ArrayList\u003cChar\u003e charStars = new ArrayList\u003c\u003e(); charStars.add('a'); charStars.add('b'); charStars.add('c'); ArrayList\u003cchar\u003e charStars = new ArrayList\u003cchar\u003e('a', 'b', 'c'); ArrayList\u003cString\u003e charStars = new ArrayList\u003c\u003e(); charStars.add(\"a\"); charStars.add(\"b\"); charStars.add(\"c\"); ",
    "description": "To write an ArrayList version of the program, we will have to introduce several new Java concepts, including the class ArrayList. We will also review different kinds of for loops used in Java.\nBefore going any further, we suggest you run the ArrayListGradebook program in IntelliJ. You can view this program in the java-web-dev-projects/chapter-example/student-example directory. Once you’ve done that, let’s look at what is happening in the Java source code.",
    "tags": [],
    "title": "ArrayList",
    "uri": "/control-flow-and-collections/reading/arraylist/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections",
    "content": "The next chapter covers classes. If you are unsure about the material in this chapter, here are some of our favorite additional resources so you can review before going on to the next chapter.\nArrays Tutorial Java Collections ArrayList Class Operators The if-then and if-then-else Statements The switch Statement HashMap Class The for statement The while and do-while Statements Break and Continue Statements Summary of Control Flow Statements ",
    "description": "The next chapter covers classes. If you are unsure about the material in this chapter, here are some of our favorite additional resources so you can review before going on to the next chapter.\nArrays Tutorial Java Collections ArrayList Class Operators The if-then and if-then-else Statements The switch Statement HashMap Class The for statement The while and do-while Statements Break and Continue Statements Summary of Control Flow Statements ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/control-flow-and-collections/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "The first situations where you’ll want to use interfaces involve applying pre-defined interfaces and classes that are part of Java. Here are a few examples.\nComparable\u003cT\u003e Purpose: A class implements Comparable\u003cT\u003e in order to allow comparison—in a “greater than” and “less than” sense—to another instance of the class. This is a “parameterized” interface, which means that you need to specify the class that it will be comparing. For example, Comparable\u003cJob\u003e would compare Job objects.\nImportant Methods: compareTo(T)\nComparable Documentation Comparator\u003cT\u003e Purpose: Compares two objects of a given class. To allow comparisons and ordering based on the different fields, you can create several different Comparator classes. The class for the compared objects does NOT implement the interface itself.\nImportant Methods: compare(T, T)\nComparator Documentation This interface can be used to determine, given two objects of the given type, which one is “greater” than the other. It is also used by collections such as an ArrayList to sort its contents with the sort() method.\nNote For more on the differences between Comparator and Comparable, see this article .\nIterable\u003cT\u003e Purpose: Enables iteration over a collection of objects using a for-each loop\nImportant Methods: iterator()\nIterable Documentation This interface is implemented by the ArrayList\u003cT\u003e class, which we’ve been using throughout this course.\nExample 1 2 3 4 5 6 7 Iterable\u003cString\u003e collection = new ArrayList\u003c\u003e(); // Add items to the collection for (String item : collection) { // do something with each item } List\u003cE\u003e Purpose: Enables access to objects in a collection by index. In other words, it enables ordered collections.\nImportant Methods: add(int, T), get(int), indexOf(T)\nList Documentation This interface is also implemented by the ArrayList\u003cT\u003e class, which we’ve been using throughout this course. In fact, List\u003cT\u003e extends Iterable\u003cT\u003e. An interface may extend another interface, in the same way that classes may extend each other. Example 1 2 3 4 5 6 List\u003cString\u003e collection = new ArrayList\u003c\u003e(); // Add items to the collection // Get the first item String firstItem = collection.get(0); Map\u003cK,V\u003e Purpose: Represents a collection of key/value pairs.\nImportant Methods: get(K), containsKey(K), put(K, V)\nMap Documentation This interface is implemented by theHashMap\u003cK, V\u003e` class, which we’ve been using throughout this course. Example 1 2 3 4 5 6 7 Iterable\u003cString\u003e collection = new ArrayList\u003c\u003e(); // Add items to the collection for (String item : collection) { // do something with each item } Check Your Understanding Question True/False: An interface can extend another interface.",
    "description": "The first situations where you’ll want to use interfaces involve applying pre-defined interfaces and classes that are part of Java. Here are a few examples.\nComparable\u003cT\u003e Purpose: A class implements Comparable\u003cT\u003e in order to allow comparison—in a “greater than” and “less than” sense—to another instance of the class. This is a “parameterized” interface, which means that you need to specify the class that it will be comparing. For example, Comparable\u003cJob\u003e would compare Job objects.",
    "tags": [],
    "title": "Interfaces in the Wild",
    "uri": "/interfaces/reading/common-interfaces/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": "Next Steps Java Interface Interfaces in Java Java Interfaces Java Polymorphism ",
    "description": "Next Steps Java Interface Interfaces in Java Java Interfaces Java Polymorphism ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/interfaces/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading",
    "content": "Instead of cutting, pasting, and refactoring old code to ensure that you create a well-structured hashCode() method whenever you define your own equals() method, you can use IntelliJ’s code generation tool! Just right-click within your class file and select Generate \u003e equals and hashCode and follow the prompts.\nLet’s use a Course class to demonstrate:\n1 2 3 4 5 6 7 8 9 10 11 12 public class Course { private String title; private int credits; private String instructor; public Course (String title, int credits, String instructor) { this.title = title; this.credits = credits; this.instructor = instructor; } } In the IntelliJ editor, right-click in the editor (or on the Course class name to be really deliberate), then select Generate from the menu.\nSelect equals() and hashCode(). You will be asked which template to use. Select java.util.Objects.equals() and hashCode() (java 7+). This is all we will select for now.\nWhen you are asked to Choose fields to be included in equals() choose the fields you want equals to consider. Let’s assume that two Course objects will be equal if they have the same title and instructor values. Select Next. The next menu will ask you to Choose the fields you want included in hashCode(). This should match the fields you selected when you were setting up the equals() method. Select Create. You should now see two new methods in the Course class.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Course { private String title; private int credits; private String instructor; public Course (String title, int credits, String instructor) { this.title = title; this.credits = credits; this.instructor = instructor; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Course course = (Course) o; return Objects.equals(title, course.title) \u0026\u0026 Objects.equals(instructor, course.instructor); } @Override public int hashCode() { return Objects.hash(title, instructor); } } Looking at the new equals method shows that it includes all of the best-practice components:\nLine 19 performs the reference check on the object o. Line 20 performs the null check and class check on o. Line 21 casts o as a Course object. Line 22 compares the title and instructor fields of the two objects. Try it! You can use the Generate option to add getters, setters, and toSting methods to the Course class.",
    "description": "Instead of cutting, pasting, and refactoring old code to ensure that you create a well-structured hashCode() method whenever you define your own equals() method, you can use IntelliJ’s code generation tool! Just right-click within your class file and select Generate \u003e equals and hashCode and follow the prompts.\nLet’s use a Course class to demonstrate:\n1 2 3 4 5 6 7 8 9 10 11 12 public class Course { private String title; private int credits; private String instructor; public Course (String title, int credits, String instructor) { this.",
    "tags": [],
    "title": "IntelliJ Generator Shortcut",
    "uri": "/classes-part-2/reading/intellij-shortcut/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 2: Data Types",
    "content": "Next Steps Java 17 Documentation Guides Create your first Java application walkthrough IntelliJ Overview ",
    "description": "Next Steps Java 17 Documentation Guides Create your first Java application walkthrough IntelliJ Overview ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/data-types/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #2: Tech Jobs OO",
    "content": "Instead of manually creating sample Job objects to verify that your class works correctly, you will use unit tests instead.\nNavigate to the package org.launchcode.techjobs.oo.test package and open the JobTest class. This file will hold all of the tests for the Job class.\nCreating a JUnit Run Configuration Since this project contains two sets of tests used for different purposes—the autograding tests and the JUnit tests you are about to write—we have to set up a run configuration to allow us to run them independently. We’ll show you how to do that now.\nAt the top right of IntelliJ, select Add Configuration, just left of the green Run button.\nIf this item doesn’t have the label Add Configuration, then open the associated dropdown and select Edit Configurations.\nIn the modal that opens, click on the + icon at the top left, and select JUnit.\nFill out the resulting form using the values:\nName: JobTest Java version: Java 17 Module: techjobs-oo-java17-graded.test Class: org.launchcode.techjobs.oo.JobTest (You will need to type or paste this. If the class contained a test, you could also click the icon at the right of this field and select the class from the window that opens.) Ignore the message that says Class ‘org.launchcode.techjobs.oo.JobTest’ is not a test since you haven’t written any yet. Then hit Apply and OK.\nTo run the tests, select the JobTest configuration from the configurations menu and hit the green Run button.\nNow you’re ready to start writing some tests!\nTest the Empty Constructor Each Job object should have a unique ID that is an integer.\nIn JobTest, define a test called testSettingJobId. Do not forget to annotate it with @Test.\nCreate two Job objects using the empty constructor.\nUse assertNotEquals to verify that the IDs of the two objects are distinct.\nRun the test using the run configuration that you created above.\nIf the test doesn’t pass, what should be your first thought?\n“Drat! I need to fix the unit test.” “Drat! I need to fix my Job() constructor code.” Warning The answer is NOT “1”.\nYour test code might be incorrect, but that should not be your FIRST thought. TDD begins with writing tests for desired behaviors. If the tests fail, that indicates errors in the methods trying to produce the behavior rather than in the tests that define that behavior.\nTest the Full Constructor Each Job object should contain six fields—id, name, employer, location, positionType, and coreCompetency. The data types for these fields are int, String, Employer, Location, PositionType, and CoreCompetency, respectively.\nIn JobTest, define a test called testJobConstructorSetsAllFields.\nDeclare and initialize a new Job object with the following data:\nnew Job(\"Product tester\", new Employer(\"ACME\"), new Location(\"Desert\"), new PositionType(\"Quality control\"), new CoreCompetency(\"Persistence\")); Use assertTrue and assertEquals statements to test that the constructor correctly assigns both the class and value of each field. Your test should have 5 assert statements of each type.\nTip The instanceof keyword can be used to check the class of an object. The result of the comparison is a boolean.\nThe instanceof keyword can be used to check the class of an object. The result of the comparison is a boolean. Test the equals Method Two Job objects are considered equal if they have the same id value, even if one or more of the other fields differ. Similarly, the two objects are NOT equal if their id values differ, even if all the other fields are identical.\nIn JobTest, define a test called testJobsForEquality.\nGenerate two Job objects that have identical field values EXCEPT for id. Test that equals returns false.\nIt might seem logical to follow up the false case by testing to make sure that equals returns true when two objects have the same ID. However, the positive test is irrelevant in this case.\nThe way you built your Job class, each id field gets assigned a unique value, and the class does not contain a setId method. You also verified that each new object gets a different ID when you tested the constructors. Without modifying the constructors or adding a setter, there is no scenario in which two different jobs will have the same ID number. Thus, we can skip the test for this condition.\nTip Time to save, commit, and push your work to GitHub again.\nNext ",
    "description": "Instead of manually creating sample Job objects to verify that your class works correctly, you will use unit tests instead.\nNavigate to the package org.launchcode.techjobs.oo.test package and open the JobTest class. This file will hold all of the tests for the Job class.\nCreating a JUnit Run Configuration Since this project contains two sets of tests used for different purposes—the autograding tests and the JUnit tests you are about to write—we have to set up a run configuration to allow us to run them independently.",
    "tags": [],
    "title": "Task 4: Use Unit Testing to Verify Parts of the Job Class",
    "uri": "/assignments/techjobs-oo/task4/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments",
    "content": "Introduction Your first two tasks as an apprentice went well! You, Blake, and Sally built the TechJobs console prototype and then refactored the code to move it to an object-oriented format.\nAfter demonstrating the prototype for the Company Team at LaunchCode, it received the green light to be fully built out as a web application.\nThe first step in this process will be to quickly develop a minimum viable product , or MVP. The goal is to get a functioning web app up and running with as little work as possible. That way, additional feedback and testing can be done early in the development process. After that, additional behind-the-scenes work will be carried out to fully develop the model and data side of the application.\nFor this next step in the project, you’ll be working with Carly.\nCarly was once a LaunchCode apprentice as well, so she knows just what it’s like to be in your shoes. She’s done some initial work on the project and left you some TODO tasks that she knows you can handle.\nLearning Objectives In this project, you’ll show that you can:\nRead and understand code written by others. Work within the controller and view portions of a Spring Boot application. Use Thymeleaf syntax to display data within a view. Create new handler methods to process form submission. TechJobs (MVC Edition) You’ll start with some code that Carly has provided. The idea behind your current assignment is to quickly deliver a functioning Spring Boot application, so you’ll focus on the controllers and views.\nIn order to do this, you’ll be reusing the JobData class and job_data.csv file from the console app. You will eventually have to go back and rewrite the data portion of the application to make a true, database-backed model. However, using the existing JobData class to provide some basic data functionality lets you focus on the views and controllers for now.\nYour Assignment The list below provides a general overview of your assigned tasks. Specific details for each part appear in the following sections, so be sure to read them carefully as you solve each problem.\nReview Carly’s code in the JobData file as well as in the existing controllers and views. As her next step, Carly created two basic templates to show lists of jobs for each field of the data (employer, location, etc.). You will need to add some details to these views to allow users to select and display jobs stored in the system. Carly started working on the search feature, but only got as far as writing the code to display the search form. She’s handed the project to you to finish the rest. First, you’ll create a controller method to retrieve search results. Finally, you’ll display search results in the view. Throughout your work, refer to our demo app as needed to clarify questions about intended application behavior.\nAssignment Links Task 1: Getting to Know the Starter Code Task 2: Complete List Views Task 3: Complete SearchController Task 4: Display Search Results Submitting Your Work and Bonus Missions ",
    "description": "Introduction Your first two tasks as an apprentice went well! You, Blake, and Sally built the TechJobs console prototype and then refactored the code to move it to an object-oriented format.\nAfter demonstrating the prototype for the Company Team at LaunchCode, it received the green light to be fully built out as a web application.\nThe first step in this process will be to quickly develop a minimum viable product , or MVP.",
    "tags": [],
    "title": "Assignment #3: Tech Jobs (MVC Edition)",
    "uri": "/assignments/techjobs-mvc/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #3: Tech Jobs (MVC Edition)",
    "content": "Once you have your displaySearchResults handler passing information to the view, you need to display the data.\nIn search.html, create a loop to display each job passed in from the controller. Put the job results into a set of tables, similar to what you did for the list-jobs view. Tip You can reuse the code you just wrote in list-jobs.html by defining a new fragment in that file. Then you need to include that fragment in search.html.\nFor the fragment to work properly in both files, the variables passed in by model.addAttribute() must use the same names.",
    "description": "Once you have your displaySearchResults handler passing information to the view, you need to display the data.\nIn search.html, create a loop to display each job passed in from the controller. Put the job results into a set of tables, similar to what you did for the list-jobs view. Tip You can reuse the code you just wrote in list-jobs.html by defining a new fragment in that file. Then you need to include that fragment in search.",
    "tags": [],
    "title": "Task 4: Display Search Results",
    "uri": "/assignments/techjobs-mvc/display-search-results/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to understand the following:\nThe difference betwen public and private modifiers Encapsulation and its role in Object-oriented Programming Constructors and their relationship with other Java classes How to declare and define a new method Method overloading Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:\nClasses for Java class object fields methods instance this keyword Modifiers in Java public private static protected world-level access level access modifier Encapsulation encapsulation getter setter Constructors default constructor Methods instance method Content Links Reading Exercises Studio: Restaurant Menu Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to understand the following:\nThe difference betwen public and private modifiers Encapsulation and its role in Object-oriented Programming Constructors and their relationship with other Java classes How to declare and define a new method Method overloading Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:",
    "tags": [],
    "title": "Chapter 4: Classes",
    "uri": "/classes/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "We’ll often want to initialize, or set the initial value of, some of our fields when creating a new object from a class. Constructors allow us to do so.\nIn Java, constructors have the same name as the class and are most often declared public (though they can have any other valid access modifier). They are declared without a return type. Any function that is named the same as the class and has no return type is a constructor.\nHere is an example of a constructor definition within the HelloWorld class:\nExample public class HelloWorld { private String message = \"Hello World\"; public HelloWorld(String message) { this.message = message; } public String getMessage() { return message; } public void setMessage(String aMessage) { message = aMessage; } } This constructor allows us to create HelloWorld objects with custom messages. The assignment this.message = message assigns the value passed into the constructor to the field message. Here’s how we might use it:\nHelloWorld goodbye = new HelloWorld(\"Goodbye World\"); System.out.println(goodbye.getMessage()); // prints \"Goodbye World\"Default Constructor It’s not required that every class have a constructor. If you don’t provide one, the Java compiler will generate an empty constructor for you, known as a default constructor. For example, when we left out a constructor in our HelloWorld class above, the compiler created the following constructor for us:\npublic HelloWorld() {}While this can be convenient, you almost always want to provide a constructor to properly initialize your objects.\nOverloading Constructors We can provide multiple constructors for a given class in order to allow for different initialization scenarios. This is known as constructor overloading. When providing multiple constructors, we must ensure that each has a different collection of arguments, as determined by the number, order, and type of the constructor arguments.\nLet’s expand upon our Student class.\nExample public class Student { private String name; private final int studentId; private int numberOfCredits; private double gpa; public Student(String name, int studentId, int numberOfCredits, double gpa) { this.name = name; this.studentId = studentId; this.numberOfCredits = numberOfCredits; this.gpa = gpa; } public Student(String name, int studentId) { this.name = name; this.studentId = studentId; this.numberOfCredits = 0; this.gpa = 0.0; } /* getters and setters omitted */ } The first constructor allows for the creation of Student objects where the code creating the object provides initial values for each of the fields. The second allows for the creation of Student objects with only name and studentId. The first constructor would be most useful for creating a transfer student, where credits and a GPA might already be non-zero. However, for all new students, it would be safe to initialize numberOfCredits and gpa to be 0.\nA better way to write the above constructors would be this:\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class Student { private String name; private final int studentId; private int numberOfCredits; private double gpa; public Student(String name, int studentId, int numberOfCredits, double gpa) { this.name = name; this.studentId = studentId; this.numberOfCredits = numberOfCredits; this.gpa = gpa; } public Student(String name, int studentId) { this(name, studentId, 0, 0); } /* getters and setters omitted */ } In the example above on line 16, we use this() to invoke another constructor within the same class. In this case, the second constructor calls the first with the default values for numberOfCredits and gpa. If you use this syntax, the call to this() must be the first line in the constructor. This is a good practice not only because it makes your code shorter, but also because it allows any initialization behavior that may be carried out beyond just initializing variables to be contained in a smaller number of constructors. In other words, constructors can share initialization code. Notice from this example that a constructor doesn’t need to require an initial value for each field as an argument.\nWhen defining constructors, think about:\nWhich fields must be initialized for your class to work properly? Be sure you initialize every such field. Which fields should be initialized by the user creating an object, and which should be initialized by the class itself? What are the use-cases for your class that you should provide for? Check Your Understanding Question A constructor is required for every class.\nTrue\nFalse\nQuestion Let’s take a look at a class called Dog.\npublic class Dog { private String name; private String breed; public Dog(String name, String breed) { this.name = name; this.breed = breed; } }What line of code would be appropriate for us to declare an instance of the Dog class called myDog and give it the name “Bernie” and the breed “Beagle”?\nDog myDog = new Dog(Bernie,beagle);\nDog myDog = new Dog(\"Bernie\",\"beagle\");\nDog Bernie = new Dog(\"Bernie\",\"beagle\");",
    "description": "We’ll often want to initialize, or set the initial value of, some of our fields when creating a new object from a class. Constructors allow us to do so.\nIn Java, constructors have the same name as the class and are most often declared public (though they can have any other valid access modifier). They are declared without a return type. Any function that is named the same as the class and has no return type is a constructor.",
    "tags": [],
    "title": "Constructors",
    "uri": "/classes/reading/constructors/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes",
    "content": "Next Steps This was just an introduction to classes in Java. We will continue to learn more in the next chapter. If you would like an additional review on this topic before starting the next chapter, check out the following articles.\nOracle Java Tutorials - Classes and Objects W3Schools Java Classes/Objects Tutorial Java Classes and Objects - GeeksforGeeks Java Classes - Baeldung ",
    "description": "Next Steps This was just an introduction to classes in Java. We will continue to learn more in the next chapter. If you would like an additional review on this topic before starting the next chapter, check out the following articles.\nOracle Java Tutorials - Classes and Objects W3Schools Java Classes/Objects Tutorial Java Classes and Objects - GeeksforGeeks Java Classes - Baeldung ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/classes/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #1: Tech Jobs Console",
    "content": "You’ve completed your first two tasks!\nLet’s assume you demonstrated the updated application for the Company Team, and they noticed a feature that could be improved. When searching for jobs with the skill JavaScript some results were missing (e.g. the Watchtower Security job on line 31 of the CSV file). The search methods turn out to be case-sensitive, so they treat JavaScript and Javascript as different strings.\nThe Company Team strongly requested that this needs to be fixed, and of course you told them that you are up to the task.\nHere are some questions to ask yourself as you get started:\nWhich methods are called when searching? How is the user’s search string compared against the values of fields of the job HashMap objects? How can you make this comparison in a way that effectively ignores the case of the strings? How can you do this without altering the capitalization of the items in allJobs so that the data gets printed out the same way that it appears in job_data.csv? You might find it useful to review the String methods listed in the chapter on Data Types .\nWhen this task is completed, you’re ready to submit your assignment!",
    "description": "You’ve completed your first two tasks!\nLet’s assume you demonstrated the updated application for the Company Team, and they noticed a feature that could be improved. When searching for jobs with the skill JavaScript some results were missing (e.g. the Watchtower Security job on line 31 of the CSV file). The search methods turn out to be case-sensitive, so they treat JavaScript and Javascript as different strings.\nThe Company Team strongly requested that this needs to be fixed, and of course you told them that you are up to the task.",
    "tags": [],
    "title": "Task 3: Make Search Methods Case-Insensitive",
    "uri": "/assignments/techjobs-console/task-three/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #4: Tech Jobs Persistent",
    "content": "In this application, any one Job object is affiliated with one employer while one Employer may contain several jobs.\nNow that you have set up persistence for the Employer and Skill classes, it is time to update the Job class to make use of these. Job is already using the Spring Data framework to be persistent and now you’ll update its Employer field to create a one-to-many relationship. You’ll also add a field on Employer to list the jobs associated with each instance.\nAdd a jobs Field to Employer Within Employer, add a private property jobs of type List\u003cJob\u003e and initialize it to an empty ArrayList. After we set up the Job class to work with Employer objects, this list will represent the list of all items in a given job. We’ll do this in a bit. Use the @OneToMany and @JoinColumn annotations on the jobs list in Employer to declare the relationship between data tables. Recall that this annotation needs a name parameter. What should its value be? Update Job Model Since the Job model class has id and name fields, it too can inherit from AbstractEntity. Update the class definition of Job to extend AbstractEntity. Remove the redundant fields from Job. Replace the type of the field employer to be of type Employer. You will also need to refactor the affected constructor and getter and setter that use this field. Add the @ManyToOne annotation on the field employer Updating HomeController Warning As above, there is a test in TestTaskThree that needs to be uncommented. There is only one, and it is near the end of the file. Do that now.\nOpen TestTaskThree in IntelliJ and find this test.\nSelect the entire commented-out method. Uncomment the method by using cmd+/ on Mac or ctrl+/ on Windows. If you do not uncomment this test, your code will not pass the autograder.\nWe’ll make several updates here. Similar to what you have done in Part 1, several of the methods in HomeController are missing code because the class has not yet been wired with the data layer yet.\nAdd a field employerRepository annotated with @Autowired. A user will select an employer when they create a job. Add the employer data from employerRepository into the form template. The add job form already includes an employer selection option. Be sure your variable name for the employer data matches that already used in templates/add. Checkout templates/add.html. Make a mental note of the name of the variable being used to pass the selected employer id on form submission. In processAddJobForm, add code inside of this method to select the employer object that has been chosen to be affiliated with the new job. You will need to select the employer using the request parameter you’ve added to the method. Note An employer only needs to be found and set on the new job object if the form data is validated.\nTest It with SQL You made a lot of changes! Great work.\nAssuming you don’t have any compiler errors , start up your application. Don’t forget to start your SQL server. Make sure you can create a new job object from the Add Jobs form, selecting a pre-existing employer.\nThen, make sure the data has been saved in your job table. You should see a column for employer_id, corresponding to the employer object selected for the new job.\nYou have changed the architecture of your job table. You will still be able to add a new entry that has anemployer_id column but you’ll note that job still has the now defunct employer column. You can keep your database clean by removing the job table. It will be recreated when you run the application again.\nSQL TASK: In queries.sql under “Part 3”, write the SQL statement to remove the job table. The List and Search functionality still isn’t quite fixed so to view a job in the application, make a note of the job’s id in the SQL table. Back in your browser, enter the path for /view/{jobId}.\nWhen everything works, move on to Part 4 below.",
    "description": "In this application, any one Job object is affiliated with one employer while one Employer may contain several jobs.\nNow that you have set up persistence for the Employer and Skill classes, it is time to update the Job class to make use of these. Job is already using the Spring Data framework to be persistent and now you’ll update its Employer field to create a one-to-many relationship. You’ll also add a field on Employer to list the jobs associated with each instance.",
    "tags": [],
    "title": "Task 3: Setting Up a One-to-Many Relationship",
    "uri": "/assignments/techjobs-persistent/part-three/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "Controller Classes - Video Note The starter code for this video is found in the forms branch of the hello-spring repo. The final code presented in this video is found on the class-annotations branch . As always, code along to the videos on your own hello-spring project.\nHave you been tracking your app progress in your own git branches ? Saving your progress in branches for each video tutorial means you can always go back to a certain spot in the app development. We will be returning to the forms branch in the next lesson, so track your class-annotations in a new branch with git checkout -b \u003cbranch-name\u003e.\nController Classes - Text Once you have written several controller methods within a class, you may notice some similar behavior across handlers. This is an opportunity to DRY your code. Some of the annotations we use at the method level can also be used on the whole controller classes.\nWe mentioned this earlier. If all of the methods in a controller class begin with the same root path, @RequestMapping can be added above the class.\n@Controller @RequestMapping(value=\"hello\") public class HelloController { // responds to /hello @GetMapping(\"\") @ResponseBody public String hello() { return \"Hello\"; } // responds to /hello/goodbye @GetMapping(\"goodbye\") @ResponseBody public String helloGoodbye() { return \"Hello, Goodbye\"; } }Note that we use @RequestMapping on the class. @GetMapping and @PostMapping cannot be applied at the class level.\nIn a related fashion, if you find that each of your methods in a controller class use @ResponseBody to return plain text, this annotation may be added at the top of the class, rather than at each method declaration.\nCheck Your Understanding Question True/False: No one controller method can handle several request types.\nTrue\nFalse\nQuestion We want the method hello to take another parameter, @RequestParam String friend, that will add a friend’s name to the returned greeting. The user should also be able to enter this name via a text field. What needs to be added to the form?\nAnother input tag with a friend attribute.\nAnother input tag with a name attribute.\nAnother form tag with a method attribute.\nAnother submit tag with a friend value.",
    "description": "Controller Classes - Video Note The starter code for this video is found in the forms branch of the hello-spring repo. The final code presented in this video is found on the class-annotations branch . As always, code along to the videos on your own hello-spring project.\nHave you been tracking your app progress in your own git branches ? Saving your progress in branches for each video tutorial means you can always go back to a certain spot in the app development.",
    "tags": [],
    "title": "Class Level Controller Annotations",
    "uri": "/controllers-and-routing/reading/controllers-classes/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "abstract Classes We noted in the introduction to this section that inheritance is a way to share behaviors among classes. You’ll sometimes find yourself creating a base class as a way to share behaviors among related classes. However, in such situations, it is not always desirable for instances of the base class to be created.\nFor example, suppose we began coding two classes, HouseCat and Tiger. Upon writing the code, we realized that there was some common data and behaviors. For example, they both make a noise, come from the same biological family, and get hungry. In order to reduce code repetition, we combined those in Cat (as above).\npublic class Cat { // Cat class definition } public class HouseCat extends Cat { // HouseCat class definition } public class Tiger extends Cat { // Tiger class definition }In reality, though, we might not want objects of type Cat to be created since such a cat couldn’t actually exist (a real cat would have a specific genus and species, for example). We could prevent objects of type Cat from being created, while still enabling sharing of behavior among its subclasses, by making Cat an abstract class.\nChange the signature on Cat:\npublic abstract class Cat { // Cat class definition }Now, in Main, if you try creating a new Cat object:\nCat salem = new Cat(8);IntelliJ has your back with a handy error message that an abstract class cannot be instantiated.\nIn order to use the behavior of an abstract class, we must extend it.\nabstract Methods We have another tool that we may use here, which is an abstract method. An abstract method is a method in an abstract class that does not have a body. In other words, it does not have any associated code, only a signature. It must also be marked abstract.\nIn our abstract Cat class, it would make sense to make an abstract noise method since all types of cats make noise. By creating this abstract method, we force any class that extends Cat to provide its own implementation of that behavior.\npublic abstract String noise();Now, classes such as HouseCat and Tiger, which both extend Cat, must provide their own version of noise(), with the exact same method signature.\nReferences Abstract Classes and Methods (docs.oracle.com) Check Your Understanding Question A class derived from an abstract class must implement all of the abstract methods it inherits.\nTrue\nFalse\nQuestion When might a programmer want to make a class abstract?\nWhen a class has no real data or behavior\nWhen expressionism just won’t cut it\nWhen that class needs to be instantiated in more than one package\nWhen shared behavior is desired among a group of non-abstract classes",
    "description": "abstract Classes We noted in the introduction to this section that inheritance is a way to share behaviors among classes. You’ll sometimes find yourself creating a base class as a way to share behaviors among related classes. However, in such situations, it is not always desirable for instances of the base class to be created.\nFor example, suppose we began coding two classes, HouseCat and Tiger. Upon writing the code, we realized that there was some common data and behaviors.",
    "tags": [],
    "title": "Inheriting from Abstraction",
    "uri": "/inheritance/reading/abstract-inheritance/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "Let’s revisit part of the non-efficient HTML from the introduction, where we hard-coded coffee options in a list.\n\u003col\u003e \u003cli\u003eFrench Roast\u003c/li\u003e \u003cli\u003eEspresso\u003c/li\u003e \u003cli\u003eKopi Luwak\u003c/li\u003e \u003cli\u003eInstant\u003c/li\u003e \u003c/ol\u003eIf we want to add, remove, or edit the list items, we need to go in and change the individual tags, which is a poor use of our time. Fortunately, there is a way to streamline the process.\nIn Java, we use for/each loops to iterate through the items in a data collection.\nfor (Type item : collectionName) { // Code to repeat... }Thymeleaf gives us a similar functionality to use in our templates, but we need to learn a different syntax.\nth:each The general syntax for iterating through a collection in Thymeleaf is:\nth:each = \"variableName : ${collectionName}\" The th:each statement gets placed INSIDE an HTML tag. collectionName represents an ArrayList, HashMap, or other collection. variableName represents an individual item or element within the collection. The ${} specifies the data provided by the controller. We can think of a th:each statement as saying, “For each item within ‘collectionName’, repeat this HTML tag, but use the current value of ‘variableName’.”\nLet’s apply th:each to the HTML example above. Assume that we store each of the coffee names as a string in an ArrayList called coffeeOptions.\n\u003col\u003e \u003cli th:each=\"item : ${coffeeOptions}\" th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/ol\u003eSome points to note:\ncoffeeOptions is passed into the template by the controller. In the first pass through the loop, item takes the value of the first coffee name in the ArrayList. th:text=\"${item}\" displays the value of item in the view, so the li element will show the first coffee name. Each successive iteration, item takes the next value in the list, and Thymeleaf adds a new \u003cli\u003e\u003c/li\u003e element to display that data. Location Matters th:each creates one HTML tag for each item in a collection, and only one th:each statement can be placed in a given tag. BE CAREFUL where you place it.\nConsider the following code blocks:\nExamples Option #1:\n\u003cdiv\u003e \u003ch3\u003eJava Types\u003c/h3\u003e \u003col\u003e \u003cli th:each=\"item : ${coffeeOptions}\" th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/ol\u003e \u003c/div\u003eOption #2:\n\u003cdiv\u003e \u003ch3\u003eJava Types\u003c/h3\u003e \u003col th:each=\"item : ${coffeeOptions}\"\u003e \u003cli th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/ol\u003e \u003c/div\u003eOption #3:\n\u003cdiv th:each=\"item : ${coffeeOptions}\"\u003e \u003ch3\u003eJava Types\u003c/h3\u003e \u003col\u003e \u003cli th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/ol\u003e \u003c/div\u003e Which option produces:\nOne heading, 4 ordered lists, and 4 coffee names (each name labeled as “1”)? One heading, one ordered list, and 4 coffee names (with the names labeled 1, 2, 3…)? 4 headings, 4 ordered lists, and 4 coffee names (each name labeled as “1”)? th:block th:block is a Thymeleaf element rather than an attribute, and it has the general syntax:\n\u003cth:block\u003e \u003c!-- Your HTML code --\u003e \u003c/th:block\u003eth:block allows you to apply the same Thymeleaf attribute, like th:if or th:each to a block of code. For example, assume you have an ArrayList of coffee objects, each of which contains a name and description field. If you want to display this information as name/description pairs, you might try:\n\u003ch3 th:each=\"coffee : ${coffeeOptions}\" th:text=\"${coffee.name}\"\u003eCoffee Name\u003c/h3\u003e \u003cp th:each=\"coffee : ${coffeeOptions}\" th:text=\"${coffee.description}\"\u003eInfo\u003c/p\u003eHowever, th:each operates on and repeats a single HTML element. Instead of alternating name/description pairs, the view in this case displays h3 headings for all of the coffee names before rendering the p elements for the descriptions.\nTo replicate the h3 and p elements as pairs, you need to wrap them inside th:block:\n\u003cth:block th:each=\"coffee : ${coffeeOptions}\"\u003e \u003ch3 th:text=\"${coffee.name}\"\u003eCoffee Name\u003c/h3\u003e \u003cp th:text=\"${coffee.description}\"\u003eInfo\u003c/p\u003e \u003c/th:block\u003eSet up this way, the code gets interpreted as, “Repeat the following HTML elements once for each item in ‘coffeeOptions’.” Each iteration of the loop renders a heading/paragraph pair using a new coffee object from coffeeOptions.\nNote: Unlike a standard HTML tag (like div, ul, p, etc.), the th:block element does NOT get rendered in the view.\nTip To see an example for how to use th:block and iteration to produce a table, check the Thymeleaf docs .\nReadability and Nested Loops th:block helps clarify your HTML code by placing related Thymeleaf attributes into separate tags.\nExamples This code generates multiple li elements and text by putting two attributes inside of the tag:\n\u003col\u003e \u003cli th:each=\"item : ${coffeeOptions}\" th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/ol\u003eThe code below accomplishes the same thing, but it separates the loop command from the th:text command:\n\u003col\u003e \u003cth:block th:each=\"item : ${coffeeOptions}\"\u003e \u003cli th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/th:block\u003e \u003c/ol\u003eThe second format more closely mimics the appearance of a Java for/each loop, which improves the clarity of your code.\nfor (Coffee item : coffeeOptions) { // Code using the \"item\" variable... } th:block also allows you to set up nested loops:\nExample Assume you have a collection of different coffee shop objects, and each object stores a name and a list of coffeeOptions. To display a list of lists:\n\u003cth:block th:each=\"shop : ${shops}\"\u003e \u003c!-- Iterate through shops --\u003e Check Your Understanding Use the three code samples listed in the location matters section to answer the following questions:\nQuestion Which option produces one heading, 4 ordered lists, and 4 coffee names (each name labeled as “1”)?\nOption 1 Option 2 Option 3 Question Which option produces one heading, one ordered list, and 4 coffee names (with the names labeled 1, 2, 3…)?\nOption 1 Option 2 Option 3 Question Which option produces 4 headings, 4 ordered lists, and 4 coffee names (each name labeled as “1”)?\nOption 1 Option 2 Option 3 ",
    "description": "Let’s revisit part of the non-efficient HTML from the introduction, where we hard-coded coffee options in a list.\n\u003col\u003e \u003cli\u003eFrench Roast\u003c/li\u003e \u003cli\u003eEspresso\u003c/li\u003e \u003cli\u003eKopi Luwak\u003c/li\u003e \u003cli\u003eInstant\u003c/li\u003e \u003c/ol\u003eIf we want to add, remove, or edit the list items, we need to go in and change the individual tags, which is a poor use of our time. Fortunately, there is a way to streamline the process.\nIn Java, we use for/each loops to iterate through the items in a data collection.",
    "tags": [],
    "title": "Iterating in a Template",
    "uri": "/thymeleaf-views/reading/iterating-templates/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "With a User class in place, we can now create controllers and views for creating a user and verifying their credentials.\nNote The code for this section begins with the user-model branch and ends with the login-reg-forms branch of the CodingEventsJava repository.\nCreating AuthenticationController In the controllers package, create a new class named AuthenticationController. Since this controller will deal with User objects, it needs a UserRepository instance.\n1 2 3 4 5 6 7 @Controller public class AuthenticationController { @Autowired UserRepository userRepository; } Session-Handling Utilities Before creating handler methods for rendering and processing our login and registration forms, we need some utility methods for working with sessions. Below the definition of userRepository, let’s add the following class members:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 private static final String userSessionKey = \"user\"; public User getUserFromSession(HttpSession session) { Integer userId = (Integer) session.getAttribute(userSessionKey); if (userId == null) { return null; } Optional\u003cUser\u003e user = userRepository.findById(userId); if (user.isEmpty()) { return null; } return user.get(); } private static void setUserInSession(HttpSession session, User user) { session.setAttribute(userSessionKey, user.getId()); } This code allows us to store and retrieve the login status of a user in a session. More specifically, a logged-in user’s user ID will be stored in their session.\nSample session data for a logged-in user:\nsession_id 81LfWG9 user 42 The static field userSessionKey is the key used to store user IDs. setUserInSession uses an HttpSession object (part of the standard javax.servlet.http package) to store key/value pair. getUserFromSession looks for data with the key user in the user’s session. If it finds one, it attempts to retrieve the corresponding User object from the database. If no user ID is in the session, or if there is no user with the given ID, null is returned.\nNote The HttpSession class handles the details of session creation and lookup for us, including generating unique session IDs and session cookies.\nThese utility methods will allow our handlers to manage authentication.\nForm DTOs Our login and registration forms will use DTOs to help with form rendering and processing. Furthermore, since these forms will be similar—both require a username and password—we’ll use inheritance in creating our DTOs.\nThe DTO for the login form needs only username and password fields.\nCreate a new package called dto within the models package.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class LoginFormDTO { @NotNull @NotBlank @Size(min = 3, max = 20, message = \"Invalid username. Must be between 3 and 20 characters.\") private String username; @NotNull @NotBlank @Size(min = 5, max = 30, message = \"Invalid password. Must be between 5 and 30 characters.\") private String password; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } LoginFormDTO should live in the models.dto package.\nTip To better understand this approach, think of a DTO associated with a form as an object that represents each of the form fields. Using a DTO to represent the data associated with a form makes form rendering and processing much easier when the form does not line up with a specific model class.\nNote In the class above, we have a password field that will store a plain-text password. However, this does not contradict our early imperative about NOT storing passwords, since LoginFormDTO is not a persistent class.\nOur registration form will ask for a username/password pair, and then ask the user to confirm the password by typing it in again. So the associated DTO can extend LoginFormDTO and add an additional field for password verification.\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class RegisterFormDTO extends LoginFormDTO { private String verifyPassword; public String getVerifyPassword() { return verifyPassword; } public void setVerifyPassword(String verifyPassword) { this.verifyPassword = verifyPassword; } } RegisterFormDTO should also live in the models.dto package.\nThe Registration Form We are now ready to build our form handlers. Before we can authenticate a user, we must have users in the application, so we’ll build the registration form first.\nTo render the form within AuthenticationController is simple:\n1 2 3 4 5 6 @GetMapping(\"/register\") public String displayRegistrationForm(Model model) { model.addAttribute(new RegisterFormDTO()); model.addAttribute(\"title\", \"Register\"); return \"register\"; } Note When passing an object into the view with model.addAttribute, specifying a label for the object is optional. If a label is not specified the class name is used, with the first letter converted to lowercase.\nIn the method above, model.addAttribute(new RegisterFormDTO()) will pass a RegisterFormDTO object in with the label registerFormDTO.\nCreate a new register.html file inside of the templates directory that uses the three DTO fields to render the form fields:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\" xmlns:th=\"http://www.thymeleaf.org/\"\u003e \u003chead th:replace=\"fragments :: head\"\u003e\u003c/head\u003e \u003cbody class=\"container\"\u003e \u003cheader th:replace=\"fragments :: header\"\u003e\u003c/header\u003e \u003cform method=\"post\"\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eUsername \u003cinput class=\"form-control\" th:field=\"${registerFormDTO.username}\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${registerFormDTO.username}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003ePassword \u003cinput class=\"form-control\" th:field=\"${registerFormDTO.password}\" type=\"password\" /\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${registerFormDTO.password}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eVerify Password \u003cinput class=\"form-control\" th:field=\"${registerFormDTO.verifyPassword}\" type=\"password\" /\u003e \u003c/label\u003e \u003c/div\u003e \u003cinput type=\"submit\" class=\"btn btn-primary\" value=\"Register\" /\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e The form processing handler is more complicated. Add the following code to your AuthenticationController class so that we can look at it, and then break it down in detail.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 @PostMapping(\"/register\") public String processRegistrationForm(@ModelAttribute @Valid RegisterFormDTO registerFormDTO, Errors errors, HttpServletRequest request, Model model) { if (errors.hasErrors()) { model.addAttribute(\"title\", \"Register\"); return \"register\"; } User existingUser = userRepository.findByUsername(registerFormDTO.getUsername()); if (existingUser != null) { errors.rejectValue(\"username\", \"username.alreadyexists\", \"A user with that username already exists\"); model.addAttribute(\"title\", \"Register\"); return \"register\"; } String password = registerFormDTO.getPassword(); String verifyPassword = registerFormDTO.getVerifyPassword(); if (!password.equals(verifyPassword)) { errors.rejectValue(\"password\", \"passwords.mismatch\", \"Passwords do not match\"); model.addAttribute(\"title\", \"Register\"); return \"register\"; } User newUser = new User(registerFormDTO.getUsername(), registerFormDTO.getPassword()); userRepository.save(newUser); setUserInSession(request.getSession(), newUser); return \"redirect:\"; } Lines 1-3: Define the handler method at the route /register that takes a valid RegisterFormDTO object, associated errors, and a Model. In addition, the method needs an HttpServletRequest object. This object represents the incoming request, and will be provided by Spring. Lines 7-10: Return the user to the form if an validation errors occur. Line 12: Retrieve the user with the given username from the database. Lines 14-19: If a user with the given username already exists, register a custom error with the errors object and return the user to the form. See the note on using errors.rejectValue below. Lines 21-28: Compare the two passwords submitted. If they do not match, register a custom error and return the user to the form. Lines 29-32: At this point, we know that a user with the given username does NOT already exist, and the rest of the form data is valid. So we create a new user object, store it in the database, and then create a new session for the user. Finally, redirect the user to the home page. Note The Errors class we have been using in conjunction with model binding will always contain information about errors related to validation annotations on the given model. However, it can also be used to manually generate additional errors. In the method above, we call:\nerrors.rejectValue(\"username\", \"username.alreadyexists\", \"A user with that username already exists\");errors.rejectValue takes three parameters:\nThe field containing the error. A label representing the error. This allows error messages to be imported from another file. While we don’t have such a file, this parameter is required. A default message to use if no external error message file is available (as is the case here). This is a good time to test your application. Start it up, navigate to /register and try to create a user. If everything goes well, you will see a new row in the user table of the database.\nThe Login Form Rendering the login form is similar to rendering the registration form:\n@GetMapping(\"/login\") public String displayLoginForm(Model model) { model.addAttribute(new LoginFormDTO()); model.addAttribute(\"title\", \"Log In\"); return \"login\"; }The form template itself should be placed in templates/login.html, and is also similar to the registration template:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\" xmlns:th=\"http://www.thymeleaf.org/\"\u003e \u003chead th:replace=\"fragments :: head\"\u003e\u003c/head\u003e \u003cbody class=\"container\"\u003e \u003cheader th:replace=\"fragments :: header\"\u003e\u003c/header\u003e \u003cform method=\"post\"\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel th:for=\"username\"\u003eUsername \u003cinput class=\"form-control\" th:field=\"${loginFormDTO.username}\"\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${loginFormDTO.username}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel\u003ePassword \u003cinput class=\"form-control\" th:field=\"${loginFormDTO.password}\" type=\"password\"\u003e \u003c/label\u003e \u003cp class=\"error\" th:errors=\"${loginFormDTO.password}\"\u003e\u003c/p\u003e \u003c/div\u003e \u003cinput type=\"submit\" class=\"btn btn-primary\" value=\"Log In\" /\u003e \u003c/form\u003e \u003cp\u003eDon't have an account? \u003ca href=\"/register\"\u003eRegister for one.\u003c/a\u003e\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e As usual, processing the form is more complicated. Again, we’ll break it down in detail.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @PostMapping(\"/login\") public String processLoginForm(@ModelAttribute @Valid LoginFormDTO loginFormDTO, Errors errors, HttpServletRequest request, Model model) { if (errors.hasErrors()) { model.addAttribute(\"title\", \"Log In\"); return \"login\"; } User theUser = userRepository.findByUsername(loginFormDTO.getUsername()); if (theUser == null) { errors.rejectValue(\"username\", \"user.invalid\", \"The given username does not exist\"); model.addAttribute(\"title\", \"Log In\"); return \"login\"; } String password = loginFormDTO.getPassword(); if (!theUser.isMatchingPassword(password)) { errors.rejectValue(\"password\", \"password.invalid\", \"Invalid password\"); model.addAttribute(\"title\", \"Log In\"); return \"login\"; } setUserInSession(request.getSession(), theUser); return \"redirect:\"; } Lines 1-9: The method definition, parameters, and initial error checking are nearly identical to the registration POST handler above. Line 11: Retrieves the User object with the given password from the database. Lines 13-17: If no such user exists, register a custom error and return to the form. Line 19: Retrieves the submitted password from the form DTO. Lines 22-26: If the password is incorrect, register a custom error and return to the form. Password verification uses the User.isMatchingPassword() method, which handles the details associated with checking hashed passwords. Line 28: At this point, we know the given user exists and that the submitted password is correct. So we create a new session for the user. Line 30: Finally, redirect the user to the home page. Now you can test your login form. Upon successful form submission, you should be redirected to the home page. To verify that a session was created, open Firefox’s developer tools and navigate to the Storage pane. Select Cookies \u003e http://localhost:8080 in the left-hand pane and you should see a cookie with the key JSESSIONID. This is the session cookie created by the application. (You may see other cookies as well, which is okay.)\nLogging Out After the complicated processes of user registration and login, logging a user out is refreshingly simple.\n@GetMapping(\"/logout\") public String logout(HttpServletRequest request){ request.getSession().invalidate(); return \"redirect:/login\"; }To log out, we simply invalidate the session associated with the given user. This removes all data from the session, so that when the user makes a subsequent request, they will be forced to log in again.\nCheck Your Understanding Question What is the name of the new method we have introduced on the Errors object?\nErrors.hasErrors() Errors.errors() Errors.isNotEmpty() Errors.rejectValue() Question Which developer tool panel can we use to verify that a user session has been started?\nConsole Network Storage Performance ",
    "description": "With a User class in place, we can now create controllers and views for creating a user and verifying their credentials.\nNote The code for this section begins with the user-model branch and ends with the login-reg-forms branch of the CodingEventsJava repository.\nCreating AuthenticationController In the controllers package, create a new class named AuthenticationController. Since this controller will deal with User objects, it needs a UserRepository instance.\n1 2 3 4 5 6 7 @Controller public class AuthenticationController { @Autowired UserRepository userRepository; } Session-Handling Utilities Before creating handler methods for rendering and processing our login and registration forms, we need some utility methods for working with sessions.",
    "tags": [],
    "title": "Login and Registration Forms",
    "uri": "/authentication/reading/login-and-registration/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "We now introduce a useful technique to auto-create model instances, called model binding. Model binding takes place when a whole model object is created by the Spring framework on form submission. This saves us the effort, and the code, needed to pass in each form field to a controller.\nModel binding reduces the amount of code we need to write to create an object and it helps with validation (which we’ll explore further in the next section). Because we use the @ModelAttribute annotation, Spring Boot will create an Event object for us when it gets the POST request from /create.\nHow to Use Model-Binding - Video Note The starter code for this video is found at the delete-events branch of the CodingEventsJava repo. The final code presented in this video is found on the model-binding branch . As always, code along to the videos on your own codingevents project.\nHow to Use Model-Binding - Text With the Event model in place, we can incorporate another annotation, @ModelAttribute. When submitting the event creation information, rather than passing in each field used to instantiate a model, we can instead pass in @ModelAttribute Event newEvent as a parameter of the controller method.\nRevised processCreateEventForm in EventController:\n1 2 3 4 5 @PostMapping(\"create\") public String processCreateEventForm(@ModelAttribute Event newEvent) { EventData.add(newEvent); return \"redirect:/events\"; } This is the essence of model binding. The model instance is created on form submission. With only two fields needed to create an event, the value of this data binding may not be particularly apparent right now. You can imagine, though, with a larger form and class, that @ModelAttribute is quite an efficient annotation.\nFor binding to take place, we must use the model field names as the form field names. So back in the create form HTML, we update the form fields to match the event fields.\nevents/create.html:\n1 2 3 4 5 6 7 8 9 \u003cdiv class=\"form-group\"\u003e \u003clabel\u003eName \u003cinput type=\"text\" name=\"name\" class=\"form-control\"\u003e \u003c/label\u003e \u003clabel\u003e Description \u003cinput type=\"text\" name=\"description\" class=\"form-control\"\u003e \u003c/label\u003e \u003c/div\u003e If a form field name does NOT match up with a model field, then binding will fail for that piece of data. It is critically important to ensure these names match up.\nCheck Your Understanding Question Complete this sentence: Model binding …\nrequires an @ModelAttribute annotation. helps with form validation. reduces controller code. is useful for all of the reasons above. Question In codingevents, we add an additional private field, numberOfAttendees, to the Event class. What other change must we make to ensure the user of our application can determine this value? (Assume we are using model binding to process form submission.)\nPass in a numberOfAttendees parameter to the form submission handler. Add another input element to the create event form with a name=numberOfAttendees attribute. Add a getAttendees method to EventData. All of the above. ",
    "description": "We now introduce a useful technique to auto-create model instances, called model binding. Model binding takes place when a whole model object is created by the Spring framework on form submission. This saves us the effort, and the code, needed to pass in each form field to a controller.\nModel binding reduces the amount of code we need to write to create an object and it helps with validation (which we’ll explore further in the next section).",
    "tags": [],
    "title": "Models Binding",
    "uri": "/models-and-model-binding/reading/model-binding/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication",
    "content": "Additional Content Now that you have successfully added authentication to an existing project you can further explore the topics below:\nFor a deeper dive into spring security you can visit the official docs . View this guide that walks through the creation of a spring MVC web application using Spring Security. Baeldung Spring Security Basic Authentication walkthrough. This will will walk through the process of basic authentication with Spring with an MVC application. ",
    "description": "Additional Content Now that you have successfully added authentication to an existing project you can further explore the topics below:\nFor a deeper dive into spring security you can visit the official docs . View this guide that walks through the creation of a spring MVC web application using Spring Security. Baeldung Spring Security Basic Authentication walkthrough. This will will walk through the process of basic authentication with Spring with an MVC application.",
    "tags": [],
    "title": "Next Steps",
    "uri": "/authentication/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "We have covered the fundamentals aspects of the RESTful mental model and practical usage. However, RESTful design is a deep topic that even extends beyond the web and use of HTTP!\nIf you want to learn more, the following links are a good start:\nPractical Understanding Craig Dennis: APIs for beginners (YouTube) REST sub-collections, relationships and links OpenAPI specification and Swagger REST tools The GitHub API and Stripe (payment processing) API are excellent examples of RESTful design (and fantastic documentation) Deep Understanding the REST constraints The Richardson REST maturity model the original REST doctoral thesis by Roy Fielding ",
    "description": "We have covered the fundamentals aspects of the RESTful mental model and practical usage. However, RESTful design is a deep topic that even extends beyond the web and use of HTTP!\nIf you want to learn more, the following links are a good start:\nPractical Understanding Craig Dennis: APIs for beginners (YouTube) REST sub-collections, relationships and links OpenAPI specification and Swagger REST tools The GitHub API and Stripe (payment processing) API are excellent examples of RESTful design (and fantastic documentation) Deep Understanding the REST constraints The Richardson REST maturity model the original REST doctoral thesis by Roy Fielding ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/web-api-rest/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "Following the “Hello, World” trend, let’s create a new IntelliJ project.\nCreate a new folder to hold your Java practice files. Since you will be creating lots of small projects as you move through this course, we suggest that you also add sub-folders with names corresponding to the related chapters and projects. Something like java-practice/chapter-name/project-name.\nSelect the New Project option from the welcome screen.\nClicking New Project opens a window with a series of project settings to select. This window is called the new project wizard.\nName your project. In this example, we named our project HelloWorld. Select the Location to save your project. The reading suggested using a folder to store all of your Java projects. This example is using the Desktop. Choose Java from the Language options. For the Build System, select Maven. We will discuss build systems more in a later lesson. For JDK, you’ll want to use version 17 that you have downloaded. If 17 is not already selected in the SDK window, click New on the right and find the JDK you have just downloaded. Check the Add sample code option for this project. This will allow you to run Java in the terminal. Select Create to create your new Java project. You should now see your new Java Project. Below is the view of your new project. The section on the left is the project’s file tree.\nClick on the item labeled Project with an icon that looks like a file folder on the left of the project window. This will list the files in your file tree. Explore your file tree until you find your Main.java file.\nClicking the triangle next to the project name, HelloWorld, displays the src file, followed by the base package we created, and finally our Main.java file. Main.java is also opened on the right in this initial project view. In line 1, package org.example, establishes a package, which Java uses to help organize and encapsulate our code. This is a default setting.\nYou can update this in the New Project Wizard under the Advanced Settings drop down menu. For this project, the default setting is all we need.\nIn line 3, you should see the Main class. We’ll dive into the use of a main function and Main class later. At this point, let’s just get right to printing our greeting. Somewhere in your project you should see the following command:\nSystem.out.println(\"Hello, world!\");Before we run this program, let’s guess what the output will be. Ok sure, we haven’t gone over this exact syntax yet, but you can take a guess at what this line will do.\nTo run your program in IntelliJ, you have several options. You can click on any of the green triangles to the left of the class and function names or choose Run from your top menu bar.\nNote If you are having trouble running your program, try selecting the Main project from the Configurations menu. This is located between the green hammer and the green Run triangle on the top left of your menu.\nOnce run, IntelliJ will generate a third panel in your view, with your program’s output at the bottom of the screen.\nThis is just the start of your relationship with IntelliJ. Now that we know the fundamentals, let’s return to Java basics so we can start writing more code.\nCheck Your Understanding Question Given the code below, which line is responsible for printing a message?\n1 2 3 4 5 6 7 public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World\"); } } line 1 line 3 line 4 Question In the sourcecode above, which line is responsible for defining the class?\nline 1 line 3 line 4 ",
    "description": "Following the “Hello, World” trend, let’s create a new IntelliJ project.\nCreate a new folder to hold your Java practice files. Since you will be creating lots of small projects as you move through this course, we suggest that you also add sub-folders with names corresponding to the related chapters and projects. Something like java-practice/chapter-name/project-name.\nSelect the New Project option from the welcome screen.\nClicking New Project opens a window with a series of project settings to select.",
    "tags": [],
    "title": "Your First Java Project",
    "uri": "/intro-and-setup/first-java-project/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "Just as when introducing one-to-one relationships, our first step in exploring many-to-many relationships is to introduce a new class to relate to Event.\nPersistent Tags - Video Note The starter code for this video is found at the one-to-one branch of the CodingEventsJava repo. The final code presented in this video is found on the add-tags branch . As always, code along to the videos on your own coding-events project.\nPersistent Tags - Text To create a persistent Tag class, we follow the same steps as when making Event and EventCategory classes persistent, with no relationships. To review these steps, refer to orm1-exercises.\nCreating a Many-to-Many Relationship - Video Note The starter code for this video is found at the add-tags branch of the CodingEventsJava repo. The final code presented in this video is found on the many-to-many branch . As always, code along to the videos on your own coding-events project.\nCreating a Many-to-Many Relationship - Text As you might guess, a many-to-many relationship can be configured with the JPA annotation @ManyToMany. We can set up both sides of the Event/Tag relationship with this annotation.\nIn Event:\n@ManyToMany private final List\u003cTag\u003e tags = new ArrayList\u003c\u003e();This ensures that Hibernate creates a relationship from a given event to every Tag instance placed in its tags collection.\nIn Tag:\n@ManyToMany(mappedBy = \"tags\") private final List\u003cEvent\u003e events = new ArrayList\u003c\u003e();Along with the @ManyToMany annotation, the mappedBy parameter ensures that Hibernate populates the events collection of a given Tag object with every Event object that has that specific tag in its tags collection.\nThese minor additions fully configure the many-to-many relationship. Making use of this relationship in our controllers and views will take quite a bit more work, however.\nMany-to-Many Forms and Data Transfer Objects - Video Note The starter code for this video is found at the many-to-many branch of the CodingEventsJava repo. The final code presented in this video is found on the many-to-many-features branch . As always, code along to the videos on your own coding-events project.\nMany-to-Many Forms and Data Transfer Objects - Text In order to make use of our new many-to-many relationship, we need to have a way for users to add a tag to an event. We will implement this feature by creating a form that, for a given event, lets the user add a single tag. The process of binding an Event and a Tag object together will be made easier through the use of a new design pattern.\nData Transfer Objects (DTO) A data transfer object (or DTO) is an object that enables multiple other objects or values to be passed around an application, in a single container. For reasons that will make more sense shortly, we will want to utilize a DTO to hold Event and Tag instances that we want to relate to each other.\nA DTO for these two classes is very simple. It contains two fields, a no-arg constructor, and accessors for the fields. Each field is annotated with @NotNull because we will use this class in conjunction with model binding and form processing.\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class EventTagDTO { @NotNull private Event event; @NotNull private Tag tag; public EventTagDTO() {} public Event getEvent() { return event; } public void setEvent(Event event) { this.event = event; } public Tag getTag() { return tag; } public void setTag(Tag tag) { this.tag = tag; } } We place this class in a new package, dto, contained within the models package. It is a model since it structures data that our application uses. However, it is not persistent (there is no @Entity annotation) because we won’t need to store it in the database.\nConnecting Two Objects The process of connecting two many-to-many objects is similar to that of connecting objects with other types of relationships. We need a form that can allow a user to create a new relationship, and processing the form should result in the relationship being saved to the database.\nRendering the Form Given a specific event, we want to be able to render a form that allows the user to add a tag to that event. This means that the form has to know which event the user wants to work with. One way to do this is with query parameters.\nFor example, say a user wants to add a tag to the Event object with ID 13. To get to the form that enables this, they may navigate to /events/add-tag?eventId=13. This request will return a form that allows a tag to be added to only the event with ID 13.\nHere is the handler method in EventController that renders the form, broken down line-by-line just below.\n112 113 114 115 116 117 118 119 120 121 122 @GetMapping(\"add-tag\") public String displayAddTagForm(@RequestParam Integer eventId, Model model){ Optional\u003cEvent\u003e result = eventRepository.findById(eventId); Event event = result.get(); model.addAttribute(\"title\", \"Add Tag to: \" + event.getName()); model.addAttribute(\"tags\", tagRepository.findAll()); EventTagDTO eventTag = new EventTagDTO(); eventTag.setEvent(event); model.addAttribute(\"eventTag\", eventTag); return \"events/add-tag.html\"; } Line 112: Specifies that the handler will be available at the route /events/add-tag, and will respond to GET requests. Line 113: Defines the displayAddTagForm handler, which has a required query parameter, eventId. Line 114: Queries the repository for the Event object with ID equal to the value of eventId. Line 115: Extracts the Event object from the result of the query. We would ideally include a conditional to check that such an object exists before proceeding, but are omitting it here to focus on DTO usage. Line 116: Creates a title for the form, which includes the name of the event. LIne 117: Passes a collection of all available tags into the view. This collection will be used to render a dropdown that the user can use to select the tag to be added. Line 118: Creates an empty EventTagDTO object. This will be used to help render the form, as we have done previously with model classes. Line 119: Assigns the event property of the eventTag DTO object. This will enable us to reference the specific event when rendering the form, so we can assign the tag to the correct event. Line 120: Passes the DTO into the view. Line 121: Returns the name of the template containing the form. While this may seem like a lot of new concepts, it really isn’t. If you look closely, the one new thing that we are doing is using a DTO class to bind an existing event to the form. The other steps here are variations of thing you have done before.\nNow let’s look at the form in events/add-tag.html.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\" xmlns:th=\"http://www.thymeleaf.org/\"\u003e \u003chead th:replace=\"fragments :: head\"\u003e\u003c/head\u003e \u003cbody class=\"container\"\u003e \u003cheader th:replace=\"fragments :: header\"\u003e\u003c/header\u003e \u003cform method=\"post\"\u003e \u003cdiv class=\"form-group\"\u003e \u003cinput type=\"hidden\" th:field=\"${eventTag.event}\"\u003e \u003cselect th:field=\"${eventTag.tag}\"\u003e \u003coption th:each=\"tag : ${tags}\" th:value=\"${tag.id}\" th:text=\"${tag.name}\" \u003e\u003c/option\u003e \u003c/select\u003e \u003c/div\u003e \u003cinput type=\"submit\" class=\"btn btn-success\" value=\"Add Tag\"\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e This form has two inputs. The first—with th:field=\"${eventTag.event}\"—is hidden, since it should not be modified by the user. We use it to keep track of the specific event that we are about to add a tag to.\nThe second field, the select element, is bound to the eventTag.tag field. The dropdown contains each of the available tags in our application.\nWhen this form is submitted, it will have all of the information necessary to create an EventTagDTO object using model binding.\nProcessing the Form As with displayAddTagForm, we will break down the form’s POST handler in EventController in detail.\n124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @PostMapping(\"add-tag\") public String processAddTagForm(@ModelAttribute @Valid EventTagDTO eventTag, Errors errors, Model model){ if (!errors.hasErrors()) { Event event = eventTag.getEvent(); Tag tag = eventTag.getTag(); if (!event.getTags().contains(tag)){ event.addTag(tag); eventRepository.save(event); } return \"redirect:detail?eventId=\" + event.getId(); } return \"redirect:add-tag\"; } Using model binding, our method takes a valid parameter of type EventTagDTO. Since we referenced the event and tag fields of our DTO when rendering the form (in the template, using th:field), our submitted form should contain all of the data necessary to create an EventTagDTO instance. This instance will be valid if both event and tag are non-null.\nThe reasons for creating a DTO model should hopefully be a bit clearer by now. Using a DTO allows us to create and validate these objects through model binding. The same event and tag relationship information could be processed without a DTO, but this would require passing query parameters for the IDs of both event and tag objects, querying the eventRepository and tagRepository for these items, validating those objects, etc. Simply put, the DTO makes this procedure cleaner and easier.\nOnce we have a valid DTO, lines 130-131 retrieve the values it holds. Then, as long as the given event doesn’t already have the given tag, we add the tag to it’s collection in lines 132-134. Finally, we save the event to eventRepository, which results in the relationship being stored in the database.\nExactly how this relationship is stored utilizes a new type of SQL table.\nJoin Tables Think about how relationships are established at the database level. One-to-one and one-to-many relationships are facilitated by the use of a foreign key column on one side of the relationship. Our event table has two foreign key columns: event_category_id and event_details_id.\nFor a given row in event, the column event_category_id contains the primary key of the row in event_category that the event row is related to, and similarly for event_details_id.\nThe only difference is the number of different event rows that may have the same value of event_category_id and event_details_id. The event/event_category relationship is many-to-one, so many event rows may have the same event_category_id value. The event/event_details relationship is one-to-one, so only one event row may have a certain value in event_details_id.\nUsing foreign and primary keys to create many-to-many relationships is a bit trickier. In order to relate rows in event to rows in tag we need need a third table, known as a join table. A join table consists of two columns, each of which is a foreign key column to another table. Each row in a join table represents a relationship between one row in each of the two tables. This technique enables many-to-many relationships.\nConsider some example data in our event and tag tables.\nid name event_category_id event_details_id 13 WWDC 2 14 15 SpringOne Platform 2 16 17 Java meetup 3 18 id name 2 Conference 3 Meetup id name 4 ios 5 spring 6 java A join table for these two tables would be called event_tags, and would have two columns, event_id and tag_id. Each of these columns are foreign key columns into their respective tables.\nIf we want to relate the ios tag to the WWDC event, we create a new row in event_tags:\nevents_id tags_id 13 4 We can do this again and again to generate more relationships. Let’s revisit the many-to-many diagram from earlier in the chapter.\nThe join table representing these relationships looks like this:\nevents_id tags_id 13 4 15 5 15 6 17 6 When configuring a many-to-many relationship with Hibernate and JPA annotations, a join table will be automatically created and populated for you. Pretty cool, huh?\nCheck Your Understanding Question True/False: Model binding only works when using a persistent class.\nQuestion The use of join tables enables (select all that apply):\nA database where you never need to run a JOIN query. Many-to-many relationships between tables. Many-to-many relationships between classes without using the @ManyToMany annotation. Rainbows and butterflies to be stored in your database. ",
    "description": "Just as when introducing one-to-one relationships, our first step in exploring many-to-many relationships is to introduce a new class to relate to Event.\nPersistent Tags - Video Note The starter code for this video is found at the one-to-one branch of the CodingEventsJava repo. The final code presented in this video is found on the add-tags branch . As always, code along to the videos on your own coding-events project.",
    "tags": [],
    "title": "Creating a Many-to-Many Relationship",
    "uri": "/orm-relationships/reading/many-to-many/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections \u003e Reading",
    "content": " We learned about arrays in Java in a previous lesson, so let’s spend a moment comparing them to ArrayLists. ArrayLists are generally easier to use than Java’s Array. Let’s see why this is.\nWhy does Java have both Arrays and ArrayLists? The answer is historical, at least in part. Java is a C-style language, and arrays are the most basic data structure in C. Using an Array over an ArrayList might be preferred in some circumstances, primarily for performance reasons (array operations are generally faster than ArrayList operations). Also note that arrays are of fixed size. You cannot expand or contract an Array after it is created, so you must know exactly how many elements it will need to hold when you create it. This fact is reason enough to use ArrayLists in most scenarios.\nTo illustrate Array usage, here is a version of the Gradebook program using Arrays instead of ArrayLists:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package org.launchcode; import java.util.Scanner; public class ArrayGradebook { public static void main(String[] args) { // Allow for at most 30 students int maxStudents = 30; String[] students = new String[maxStudents]; double[] grades = new double[maxStudents]; Scanner input = new Scanner(System.in); String newStudent; int numStudents = 0; System.out.println(\"Enter your students (or ENTER to finish):\"); // Get student names do { newStudent = input.nextLine(); if (!newStudent.equals(\"\")) { students[numStudents] = newStudent; numStudents++; } } while(!newStudent.equals(\"\")); // Get student grades for (int i = 0; i \u003c numStudents; i++) { System.out.print(\"Grade for \" + students[i] + \": \"); double grade = input.nextDouble(); grades[i] = grade; } // Print class roster System.out.println(\"\\nClass roster:\"); double sum = 0.0; for (int i = 0; i \u003c numStudents; i++) { System.out.println(students[i] + \" (\" + grades[i] + \")\"); sum += grades[i]; } double avg = sum / numStudents; System.out.println(\"Average grade: \" + avg); } } Note that we have to decide up front how large our Arrays students and grades are going to be. Thus, this program sets an arbitrary maximum amount of students, likely larger than any user will enter. It may seem obvious, then, that Array has no equivalent add() method . The only way to access and alter an element in an Array is with bracket notation, using an explicit index. For example, gradebook defines a counter variable, numStudents. When the first student is entered by the user, the value is stored in newStudent. If the value is not the empty string, then the item in students at position 0, the initial value of numStudents is assigned to the newStudent value. The next time the do-while loop executes, the value of students at position 1 will be assigned. And so on… Because we must always access and assign Array elements using an explicit index, our code can seem littered with Array counter variables (like our friends i and j) and is more difficult to read (not to mention more error-prone).\nLike ArrayLists, however, we can loop through an Array using a for-each loop as long as we don’t need to use the index of the current item. If we only wanted to print each student’s name, and not their grade, at the end of our program, we could do the following:\n1 2 3 for (String student : students) { System.out.println(student); } We’ll use Arrays in Java from time-to-time, but for the most part you should rely on ArrayLists to store collections of values, or ordered data.\nCheck Your Understanding Question Array size and element values cannot be changed once defined.\nTrue False Question Given the Array below, which of the following options is a valid action?\nint[] randomNumbers = new int[5]; randomNumbers.add(3);\nrandomNumbers.add(\"one\");\nrandomNumbers[0] = \"three\";\nrandomNumbers[0] = 1;",
    "description": "We learned about arrays in Java in a previous lesson, so let’s spend a moment comparing them to ArrayLists. ArrayLists are generally easier to use than Java’s Array. Let’s see why this is.\nWhy does Java have both Arrays and ArrayLists? The answer is historical, at least in part. Java is a C-style language, and arrays are the most basic data structure in C. Using an Array over an ArrayList might be preferred in some circumstances, primarily for performance reasons (array operations are generally faster than ArrayList operations).",
    "tags": [],
    "title": "Array",
    "uri": "/control-flow-and-collections/reading/array/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "After all that we have learned about interfaces, you are probably wondering, how do I write my unit tests with interfaces?\nThe best practices to testing interfaces are very similar to those of testing inheritance. You want to focus on testing the contract that the interface is supposed to be upholding as opposed to the interface itself.\nExample We have a Temperature interface, a Celsius class, and a Fahrenheit class.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public interface Temperature { double static final ABS_ZERO = -273.15; double convertTemp(); } public class Celsius implements Temperature { private double currentTemp; @Overrides public double convertTemp() { return this.currentTemp * 9 / 5 + 32; } } public class Fahrenheit implements Temperature { private double currentTemp; @Overrides public double convertTemp() { return (this.currentTemp - 32) * 5 / 9; } } In this situation, we can test the contract that the interface is supposed to be upholding, but not the interface itself. We may choose to test that ABS_ZERO is -273.15 for both Fahrenheit and Celsius. We may also want to test that the convertTemp function works as expected, however, since convertTemp has a different method body depending on whether it is in Fahrenheit or Celsius, we cannot define the as expected behavior with a test on our interface, Temperature.\nCheck Your Understanding Question True/False: You should test the interface itself.",
    "description": "After all that we have learned about interfaces, you are probably wondering, how do I write my unit tests with interfaces?\nThe best practices to testing interfaces are very similar to those of testing inheritance. You want to focus on testing the contract that the interface is supposed to be upholding as opposed to the interface itself.\nExample We have a Temperature interface, a Celsius class, and a Fahrenheit class.",
    "tags": [],
    "title": "Unit Testing and Interfaces",
    "uri": "/interfaces/reading/unit-testing/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Major Concepts When you have completed this chapter, you should be familiar with the following:\nHow to customize fields with the keywords final and static. How to add methods to a class and call those methods. The difference between instance methods and static methods. How to override the default toString and equals methods for a class. How to auto-generate an equals method using the tools in IntelliJ. Key Terminology Final Field Final Primitive Field Final Object Field Static Methods Class Methods Overriding Cast Equality Identity Content Links Reading Exercises: Objects and Classes Part 2 Studio: Restaurant Menu Continued Next Steps ",
    "description": "Major Concepts When you have completed this chapter, you should be familiar with the following:\nHow to customize fields with the keywords final and static. How to add methods to a class and call those methods. The difference between instance methods and static methods. How to override the default toString and equals methods for a class. How to auto-generate an equals method using the tools in IntelliJ. Key Terminology Final Field Final Primitive Field Final Object Field Static Methods Class Methods Overriding Cast Equality Identity Content Links Reading Exercises: Objects and Classes Part 2 Studio: Restaurant Menu Continued Next Steps ",
    "tags": [],
    "title": "Chapter 5: Classes Part 2",
    "uri": "/classes-part-2/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #2: Tech Jobs OO",
    "content": "To display the data for a particular Job object, you need to implement a custom toString method. Rather than creating this method and then testing it, you will flip that process using TDD.\nCreate First Test for toString Before writing your first test, consider how we want the method to behave:\nWhen passed a Job object, it should return a string that contains a blank line before and after the job information.\nThe string should contain a label for each field, followed by the data stored in that field. Each field should be on its own line.\nID: _______ Name: _______ Employer: _______ Location: _______ Position Type: _______ Core Competency: _______ If a field is empty, the method should add, “Data not available” after the label.\n(Optional) If a Job object ONLY contains data for the id field, the method should return, “OOPS! This job does not seem to exist.”\nIn JobTest, add a new test named testToStringStartsAndEndsWithNewLine to check the first requirement. Be sure to use assertEquals to verify that these characters are correct, and to use the exact formatting demonstrated above.\nWarning This test should check that the string starts and ends with a new line.\nBe sure to use System.lineSeparator() to declare a new line. This is an universal line break that works on a variety of operating systems (OS).\nYou will need to use the lineSeparator() in the Job class and the JobTests.\nWoo hoo! Failure is what we want here! Now you get to fix that.\nCode toString to Pass the First Test In the Job class, create a toString method that passes the first test. Since the test only checks if the returned string starts and ends with a blank line, make that happen.\nTip Do NOT add anything beyond what is needed to make the test pass. You will add the remaining behaviors for toString as you code each new test.\nFinish the TDD for toString Code a new test for the second required behavior, named testToStringContainsCorrectLabelsAndData. Then run the tests to make sure the new one fails.\nModify toString to make the new test pass. Also, make sure that your updates still pass all of the old tests.\nFollow the same TDD process for the third requirement, creating a test named testToStringHandlesEmptyField.\nWarning As usual, the autograding tests are very picky about capitalization and spaces, so your code should match the format shown above exactly.\nCool! Your Job class is now complete and operates as desired.\nNext ",
    "description": "To display the data for a particular Job object, you need to implement a custom toString method. Rather than creating this method and then testing it, you will flip that process using TDD.\nCreate First Test for toString Before writing your first test, consider how we want the method to behave:\nWhen passed a Job object, it should return a string that contains a blank line before and after the job information.",
    "tags": [],
    "title": "Task 5: Use TDD to Build The toString Method",
    "uri": "/assignments/techjobs-oo/task5/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #3: Tech Jobs (MVC Edition)",
    "content": "Sanity Check At this point, all autograding tests should be passing. To be sure, right-click on the org.launchcode.techjobs.mvc package in src/test/java and select Run tests in… If any test fails, evaluate the failure/error message and go back to fix your code.\nYou might also want to check your app’s behavior against that of our demo app .\nHow to Submit To turn in your assignment and get credit, follow the submission instructions .\nBonus Missions Here are some additional challenges, for those willing to take them on:\nWhen we select a given field to search within and then submit, our choice is forgotten and returns to “All” by default. Modify the view template to keep the previous search field selected when displaying the results. In the tables displaying the full job data, find a way to manipulate the font, style, capitalization, etc. to further distinguish the labels from the data (e.g. Employer: LaunchCode). (Hint: We capitalize the title string in multiple templates, so have a look around). In the tables of the job results, make each value (except name) hyperlinked to a new listing of all jobs with that same value. For example, if we have a list of jobs with the JavaScript skill, clicking on a location value like Saint Louis will generate a new list with all the jobs available in that city. Super Bonus Mission This is a big one! Prepare for a challenge!\nNotice that we went to the trouble of passing in the actionChoices HashMap to the view in the HomeController.index method. This puts the responsibility of which actions should be presented on the controller, and not the view. However, we didn’t go to such lengths for the navigation links displayed on every page of the site.\nIn order to make the navigation links similarly detached, we’d need to pass actionChoices in to every view, since the nav links are generated in fragments.html. We’d have to do something like the line below in every handler method, which would be a pain, not to mention error-prone and difficult to update.\nmodel.addAttribute(\"actions\", actionChoices);Let’s fix this.\nMake a new controller, TechJobsController. This new controller should have a static HashMap, actionChoices. The HashMap should be populated via a no-argument constructor, just like columnChoices is populated in ListController. You do NOT need to add the @Controller annotation to this class. Write a static method getActionChoices in TechJobsController that returns the actions HashMap. Add the annotation @ModelAttribute(\"actions\") to this method. This annotation will cause the return value of the method to be set in the model with key \"actions\" for every controller that extends TechJobsController. Modify every one of your other controllers to extend TechJobsController. Modify fragments.html to use the passed-in action choices to generate the navigation links. Finally, update your code so that columnChoices also lives in TechJobsController. ",
    "description": "Sanity Check At this point, all autograding tests should be passing. To be sure, right-click on the org.launchcode.techjobs.mvc package in src/test/java and select Run tests in… If any test fails, evaluate the failure/error message and go back to fix your code.\nYou might also want to check your app’s behavior against that of our demo app .\nHow to Submit To turn in your assignment and get credit, follow the submission instructions .",
    "tags": [],
    "title": "Submitting Your Work and Bonus Missions",
    "uri": "/assignments/techjobs-mvc/submission/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "Calling Methods on Objects A method is a function that belongs to a class. In Java, all procedures must be part of a class. Let’s revisit our HelloWorld class.\n1 2 3 4 5 6 7 8 9 public class HelloWorld { private String message = \"Hello World\"; void sayHello() { System.out.println(message); } } There is one method in this class, sayHello(). In order to call this method, we must have an object created from the HelloWorld class template. In other words, we must have an instance of HelloWorld.\nHere’s how you call methods on an object.\nHelloWorld hello = new HelloWorld(); hello.sayHello();It is not possible to call sayHello() without having a HelloWorld object. This begins to make more sense when you note that the message field is used within sayHello(), and unless we are calling sayHello() on an instantiated object, there will be no message field available to print.\nNote As mentioned before, class members should have the most restrictive level of access possible. This goes for methods as well as fields. For example, if you create a utility method that should only be used within your class, then it should be private. You can think of private methods as those that are not useful outside of the class, but that can contribute internally to helping the class behave as desired or expected.\nOn the contrary, public methods are code that other classes will want to use when they implement the class containing those public methods. So only make methods public when you expect other classes to use them, and when you are committed to maintaining those methods for other calling programs that may use them.\nInstance Methods So far, we’ve only looked at examples of methods that are relatively specialized: constructors, getters, and setters. Every class you create will have these methods. What will make your classes different from each other, and thus fulfill the purpose of creating each class, are the specific behaviors that are unique to your classes.\nLet’s say we want to add a method in our Student class that reports the GPA of a student. This method is an instance method since it will belong to each Student object created and will use the data of each such object.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class Student { private static int nextStudentId = 1; private String name; private int studentId; private int numberOfCredits; private double gpa; public Student(String name, int studentId, int numberOfCredits, double gpa) { this.name = name; this.studentId = studentId; this.numberOfCredits = numberOfCredits; this.gpa = gpa; } public Student(String name, int studentId) { this(name, studentId, 0, 0); } public Student(String name) { this(name, nextStudentId); nextStudentId++; } public String studentInfo() { return (this.name + \" has a GPA of: \" + this.gpa); } /* getters and setters omitted */ } We will make use of instance methods more in the next chapter. However, we wanted to share more about them now in our first conversation about classes. Sometimes when we create a class, we will need that class to have more behaviors than using only constructors, setters, and getters can provide. When we do want to add additional behaviors to our classes, we can use instance methods!\nCheck Your Understanding Question Fill in the blanks with the appropriate terms.\n_____________ gives a class property a field.\n_____________ gives a programmer access to the value of a private class property.\n_____________ creates a new instance of a class with values for the fields.\n_____________ is a method that belongs to each instance of a class.",
    "description": "Calling Methods on Objects A method is a function that belongs to a class. In Java, all procedures must be part of a class. Let’s revisit our HelloWorld class.\n1 2 3 4 5 6 7 8 9 public class HelloWorld { private String message = \"Hello World\"; void sayHello() { System.out.println(message); } } There is one method in this class, sayHello(). In order to call this method, we must have an object created from the HelloWorld class template.",
    "tags": [],
    "title": "Methods",
    "uri": "/classes/reading/methods/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments",
    "content": "Your Task You will once again work with the Tech Jobs application. This time around you’ll add ORM functionality by using Spring Data. You will be responsible for completing the code to allow users to create new job data.\nYour final application will have the same list and search capabilities as your Tech Jobs (MVC Edition) but you’ll need to do the work to connect the project to a database for storing user-submitted job data.\nEach of the four sections of this assignment will also ask you to demonstrate your SQL skills under an item labelled SQL TASK.\nNote The demo app is expected to lead you to a default error whitepage if you try to create a job without adding either a skill or employer.\nAs you work through each part, refer to our demo app to clarify questions about intended application behavior.",
    "description": "Your Task You will once again work with the Tech Jobs application. This time around you’ll add ORM functionality by using Spring Data. You will be responsible for completing the code to allow users to create new job data.\nYour final application will have the same list and search capabilities as your Tech Jobs (MVC Edition) but you’ll need to do the work to connect the project to a database for storing user-submitted job data.",
    "tags": [],
    "title": "Assignment #4: Tech Jobs Persistent",
    "uri": "/assignments/techjobs-persistent/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #1: Tech Jobs Console",
    "content": "Sanity Check Before submitting, make sure that your application:\nPrints each field of a job when using search functionality, and when listing all columns. If there are no search results, a descriptive message is displayed. Allows the user to search for a string across all columns. Returns case-insensitive results. Run the auto-grading tests to ensure that the tests pass. Solution Demo Watch a demo of a working solution. How to Submit To turn in your assignment and get credit, follow the submission instructions .\nBonus Missions If you want to take your learning a few steps further, here are some additional problems you can try to solve. We’re not providing you much guidance here, but we have confidence that you can figure these problems out!\nSorting list results: When a user asks for a list of employers, locations, position types, etc., it would be nice if results were sorted alphabetically. Make this happen. Returning a copy of allJobs: Look at JobData.findAll(). Notice that it’s returning the allJobs property, which is a static property of the JobData class. In general, this is not a great thing to do, since the person calling our findAll method could then mess with the data that allJobs contains. Fix this by creating a copy of allJobs. Hint: Look at the constructors in the Oracle ArrayList documentation. ",
    "description": "Sanity Check Before submitting, make sure that your application:\nPrints each field of a job when using search functionality, and when listing all columns. If there are no search results, a descriptive message is displayed. Allows the user to search for a string across all columns. Returns case-insensitive results. Run the auto-grading tests to ensure that the tests pass. Solution Demo Watch a demo of a working solution. How to Submit To turn in your assignment and get credit, follow the submission instructions .",
    "tags": [],
    "title": "Submission and Bonus Missions",
    "uri": "/assignments/techjobs-console/submission/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #4: Tech Jobs Persistent",
    "content": "Using a many-to-many relationship, we can now use the Skill object to store a Job object’s skills. At the moment, a job can have many skills listed as strings. In this section, you’ll be tasked with changing this field type to be a list of skills. Just as a job requires many skills, any skill can be associated with several jobs. With this in mind, you’ll also add a list of jobs as a field onto the skill class.\nWarning As before, there are a few tests in TestTaskFour that have been commented out because they depend on the code you wrote in Part 1. Open TestTaskFour in IntelliJ and find these tests. For each one:\nSelect the entire commented-out method. Uncomment the method by using cmd+/ on Mac or ctrl+/ on Windows. If you do not uncomment these tests, your code will not pass the autograder. Skill.jobs In your Skill class, add a jobs field. What type should this field be? Initialize it in the field declaration accordingly. Add a getter and setter for the field. This field has a many-to-many type relationship with skills. You’ll need to add the @ManyToMany annotation with an argument mappedBy=\"skills\" to configure this mapping. Refactor Job.skills Update your Job model class to fit its many-to-many relationship with skills. Job.skills already exists. What needs to change and/or be added to map this relationship? Be sure to check the whole class for any necessary type updates. Updating HomeController, Again You next need to wire HomeController with the skills data in order to add skills objects to a new job. This will look almost precisely like what you have done for employer data above. Refer back to that section to inject the controller with skill data.\nThere is, however, one difference to keep in mind. The job form being processed only accepts one employer by an id field. Many skills can be added to a single job, though. Here’s what we’ll say about how to send the right skills along with the job form.\nThe code for the view has already been written. Look in templates/add.html. You’ll see a form-group section that iterates over available skills data and renders a checkbox for each skill. Each checkbox input contains an attribute name=\"skills\". You’ll need to pass in that attribute value to processAddJobForm in HomeController as a @RequestParam. @RequestParam List\u003cInteger\u003e skills Then, to get the skills data from a list of ids (rather than a single id as we did with employer), use the CrudRepository method .findAllById(ids). List\u003cSkill\u003e skillObjs = (List\u003cSkill\u003e) skillRepository.findAllById(skills); newJob.setSkills(skillObjs); Note As with a job’s employer, you only need to query your database for skills if the job model is valid.\nIt’s Your Job, List It and Re-Search It You now have all the tools in place to re-implement the list and search views from TechJobs MVC .\nIn the ListController class, add fields for EmployerRepository and SkillRepository, both annotated with @Autowired. You’ll also need to pass the employer and skill data from those repositories into the view template rendered at list/. Add the right model.addAttribute(name, value) statements to pass this info into templates/list.html. Test It with SQL Run your application and make sure you can create a new job with an employer and several skills. You should now also have restored full list and search capabilities.\n1 SQL TASK: In queries.sql under “Part 4”, write a query to return the names of all skills that are attached to jobs in alphabetical order. If a skill does not have a job listed, it should not be included in the results of this query.\nWhen everything works, you’re done! Congrats!",
    "description": "Using a many-to-many relationship, we can now use the Skill object to store a Job object’s skills. At the moment, a job can have many skills listed as strings. In this section, you’ll be tasked with changing this field type to be a list of skills. Just as a job requires many skills, any skill can be associated with several jobs. With this in mind, you’ll also add a list of jobs as a field onto the skill class.",
    "tags": [],
    "title": "Task 4: Setting Up a Many-to-Many Relationship",
    "uri": "/assignments/techjobs-persistent/part-four/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "When one class extends another, as HouseCat extends Cat, a field or local variable of the type of the base class may hold an object that is of the type of the child class.\nIn other words, this is allowed:\nCat suki = new HouseCat(\"Suki\", 8);This is acceptable because a HouseCat is a Cat. Furthermore, when we call methods on such an object, the compiler is smart enough to determine which method it should call. For example, the following call to noise() will call the version defined in HouseCat:\n// Calls HouseCat's noise() method suki.noise(); // Hello, my name is Suki!This only works for methods that are declared in the base class, however. If we have a HouseCat object stored in a Cat variable or field, then it is not allowed to call methods that are only part of HouseCat.\n// Results in a compiler error, since Cat doesn't have such a method suki.isSatisfied();Here, isSatistfied() is defined in HouseCat, and there is not a corresponding overridden method in Cat. If we were really, really sure that we had a Cat that was actually a HouseCat, we could call such a method by first casting:\n// As long as suki really is a HouseCat, this works ((HouseCat) suki).isSatisfied();The danger here is that if suki is in fact not a HouseCat (it was declared only as a Cat, after all), then we’ll experience a runtime exception. A runtime exception is an error that occurs upon running the program and is not found by the compiler beforehand. These are dangerous, and situations where they might come up should be avoided. So you should only cast an object to another type when you are very sure that it’s safe to do so.\nStoring objects of one type (e.g. HouseCat) in a variable or field of another “compatible” type (e.g. Cat) is an example of polymorphism. Polymorphism is another one of the pillars of OOP, and we’ll have more to say about it in a future lesson.\nReferences Polymorphism (docs.oracle.com) Check Your Understanding For this question-1, refer to the code block below.\npublic class Message { private boolean friendly = true; private String language; private String text; public Message(String aLanguage, String aText) { language = aLanguage; text = aText; } public boolean getFriendly() { return friendly; } public String getLanguage() { return language; } public String getText() { return text; } } public class Greeting extends Message { private boolean waving; public Greeting(String aLanguage, String aText) { super(aLanguage, aText); } public void wave() { waving = true; } } Question-1 Which of the following does not contain an error:\nA.\nMessage hello = new Greeting(\"English\", \"Hello Coder!\"); ((Greeting) hello).wave();B.\nMessage hello = new Greeting(\"English\", \"Hello Coder!\"); hello.wave();C.\nGreeting hello = new Message(\"English\", \"Hello Coder!\"); hello.wave();D.\nGreeting hello = new Greeting(\"English\", \"Hello Coder!\"); ((Mess) hello).wave(); Question Polymorphism refers to:\nOne object inheriting another\nAn abstract class with many classes extending from it\nThe practice of storing an object of one type in a variable of another type\nShapeshifting",
    "description": "When one class extends another, as HouseCat extends Cat, a field or local variable of the type of the base class may hold an object that is of the type of the child class.\nIn other words, this is allowed:\nCat suki = new HouseCat(\"Suki\", 8);This is acceptable because a HouseCat is a Cat. Furthermore, when we call methods on such an object, the compiler is smart enough to determine which method it should call.",
    "tags": [],
    "title": "Casting",
    "uri": "/inheritance/reading/casting/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "In addition to iteration, Thymeleaf can also add or remove content on a webpage based on certain conditions. Going back to the coffee example, we could generate the ordered list ONLY IF coffeeOptions contains data. If the ArrayList is empty, then there is no need to include the \u003col\u003e element. Instead, the template could include a \u003cp\u003e element with text stating that there are no options to select.\nJust like the for/each syntax differs between Java and Thymeleaf, we need to examine how to include conditionals in our templates. The logic remains the same, but the implementation requires practice.\nDisplay Content if The general syntax for including a conditional in Thymeleaf is:\nth:if = \"${condition}\" The th:if statement gets placed inside an HTML tag. condition represents a boolean variable provided by the controller. Alternatively, condition can be a statement that evaluates to true or false. If condition evaluates to true, then Thymeleaf adds the HTML element to the webpage, and the content gets displayed in the view. If condition is false, then Thymeleaf does NOT generate the element, and the content stays off the page.\nExample Assume that coffeeOptions and userSelection represent an ArrayList and String, respectively, that are passed in by the controller.\n\u003col th:if = \"${coffeeOptions.size() \u003e 1}\"\u003e \u003cli th:each=\"item : ${coffeeOptions}\" th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/ol\u003e \u003ch2 th:if = '${userSelection.equals(\"instant\")}'\u003eYou can do better!\u003c/h2\u003e The conditional in line 1 checks that coffeeOptions contains more than one item. If true, then the ordered list is rendered in the view. The th:if statement in line 5 compares a user’s flavor choice to the string \"instant\". If they match, then Thymeleaf adds the heading element to the view.\nAdding vs. Displaying/Hiding th:if determines if content is added or not added to a page. This is different from deciding if content should be displayed or hidden.\nHidden content still occupies space on a page and requires some amount of memory. When th:if evaluates to false, content remains absent from the page—requiring neither space on the page nor memory. This is an important consideration when including items like images or videos on your website.\nWhat is true? The th:if = \"${condition}\" attribute can evaluate more than simple boolean variables and statements. It will also return true according to these rules:\nIf condition is a boolean or statement and true. If condition is a non-zero number or character. If condition is a string that is NOT \"false\", \"off\", or \"no\". If condition is a data type other than a boolean, number, character, or String. th:if will evaluate to false whenever condition is null.\nunless Instead of else In Java, we use an if/else structure to have our code execute certain steps when a variable or statement evaluates to true but a different set of steps for a false result. Thymeleaf provides a similar option with th:unless:\nth:unless = \"${condition}\"Just like th:if, the th:unless attribute gets placed inside an HTML tag. In this case, however, Thymeleaf adds the HTML element to the webpage when condition evaluates to false.\nWe could update our coffee code with an unless:\nNote \u003ch2 th:unless = '${userSelection.equals(\"instant\")}'\u003eExcellent choice!\u003c/h2\u003e As long as userSelection is NOT \"instant\", the condition evaluates to false, and the h2 element gets added to the view.\nIf we want to set up a situation like if true, do this thing. Otherwise, do this other thing, we need to pair a th:if with a th:unless.\nExample \u003col th:if = \"${coffeeOptions.size()}\"\u003e \u003cli th:each=\"item : ${coffeeOptions}\" th:text=\"${item}\"\u003e\u003c/li\u003e \u003c/ol\u003e \u003cp th:unless = \"${coffeeOptions.size()}\"\u003eNo coffee brewed!\u003c/p\u003e If coffeeOptions.size() evaluates to 0, then Thymeleaf considers it a false result. In that case, it ignores the ol element and generates the p element.\nLogical Operators We can use logical operators with th:if and th:unless. The Thymeleaf syntax for these is as follows:\nLogical AND = and, th:if = \"${condition1 and condition2 and...}\" // Evaluates to true if ALL conditions are true Logical OR = or, th:if = \"${condition1 or condition2 or...}\" // Evaluates to true if ANY condition is true NOT = !, not. th:if = \"${!condition}\" // Evaluates to true when condition is false Note Since th:unless looks for a false result, we can accomplish the same thing by adding a not operator to a th:if statement.\nThe code:\n\u003cp th:unless = \"${variableName == 5}\"\u003eValue is NOT equal to 5.\u003c/p\u003edoes the same thing as:\n\u003cp th:if = \"${variableName != 5}\"\u003eValue is NOT equal to 5.\u003c/p\u003e Try It! The video below provides you some live-coding practice with Thymeleaf templates. Return to your hello-spring project and code along as you watch the clip.\nNote The starter code for this video is found at the views-static branch of hello-spring.\nThe final code presented in this video is found on the views-dynamic branch.\nThe text on this page and the previous two provides details for some of the concepts presented in the clip. Note that these summaries are NOT intended as a replacement for the walkthrough. To get better at coding, you need to actually CODE instead of just reading about how to do it.\nCheck Your Understanding Assume you have an ArrayList of integers called numbers, and you display the values in an unordered list.\n\u003cul\u003e \u003cth:block th:each = \"number : ${numbers}\"\u003e \u003cli th:text = \"${number}\"\u003e\u003c/li\u003e \u003c/th:block\u003e \u003c/ul\u003e Question You want to display the list only if numbers contains data. Which of the following attributes should you add to the ul tag?\nth:if = \"${numbers.size()}\" th:unless = \"${numbers.size()}\" Question Now you want to display ONLY the positive values in the list. Which of the following attributes could you add to the li tag? Select ALL that work.\nth:if = \"${number}\" th:if = \"${number \u003c 0}\" th:if = \"${number \u003e 0}\" th:unless = \"${number}\" th:unless = \"${number \u003e= 0}\" th:unless = \"${number \u003c= 0}\" Question Now you want to display ONLY the positive, even values in the list. Which of the following should you add to the li tag?\nth:if = \"${number \u003e 0 and number%2 == 0}\" th:if = \"${number \u003e 0 or number%2 == 0}\" th:unless = \"${number \u003c 0 and number%2 == 0}\" th:unless = \"${number \u003c 0 or number%2 == 0}\" ",
    "description": "In addition to iteration, Thymeleaf can also add or remove content on a webpage based on certain conditions. Going back to the coffee example, we could generate the ordered list ONLY IF coffeeOptions contains data. If the ArrayList is empty, then there is no need to include the \u003col\u003e element. Instead, the template could include a \u003cp\u003e element with text stating that there are no options to select.\nJust like the for/each syntax differs between Java and Thymeleaf, we need to examine how to include conditionals in our templates.",
    "tags": [],
    "title": "Conditionals in a Template",
    "uri": "/thymeleaf-views/reading/conditionals-templates/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "Our application now allows users to register and log in. However, access to pages on the site is NOT yet restricted in any way. Even if a user isn’t logged in, they may view any page on the site. To fully implement authentication, we need to be able to check a user’s login status on each request, before any controller methods are called.\nWe can do this by filtering requests. Request filtering is a mechanism available in many web frameworks. It allows a programmer to carry out certain actions before any controllers are called.\nNote The code for this section begins with the login-reg-forms branch and ends with the auth-filter branch of the CodingEventsJava repository.\nRequest Filters in Spring A request filter in Spring can be built by implementing the built in HandlerInterceptor and overriding one of its various methods. This class implements an interface called HandlerInterceptor, which specifies a few methods that are called during the request-handling process:\npreHandle - called before a request is handled by a controller postHandle - called after a request is handled by a controller, but before the view is rendered afterCompletion - called after the view is rendered By implementing HandlerInterceptor and overriding one or more of these methods, we can write code that is executed at a specific point of every request to our application. This is exactly what we need to implement authentication. More specifically, we will override preHandle and check for a user’s login status.\nCreating AuthenticationFilter In the top-level package of the app, org.launchcode.codingevents, create a class named AuthenticationFilter that implements HandlerInterceptor.\nThis class will need to access user data, so autowire a UserRepository field. We will also need to use the AuthenticationController.getUserFromSession method, so autowire an AuthenticationController field as well.\n1 2 3 4 5 6 7 8 9 public class AuthenticationFilter implements HandlerInterceptor { @Autowired UserRepository userRepository; @Autowired AuthenticationController authenticationController; } Note For autowiring to work, a class must be Spring-managed. There are many ways a given class may be registered as a Spring-managed class, but any class with @Controller will be automatically registered. Thus, any controller class may be autowired.\nOverriding preHandle Here is our initial preHandle method, with a detailed breakdown below.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException { HttpSession session = request.getSession(); User user = authenticationController.getUserFromSession(session); // The user is logged in if (user != null) { return true; } // The user is NOT logged in response.sendRedirect(\"/login\"); return false; } The signature of our method must match the definition of preHandle and HandlerInterceptor exactly, even if we don’t need all of the parameters. We will only use the request argument, but we still need to include the response and handler arguments.\nNote The sharp-eyed reader will notice that our preHandle and the overridden method in HandlerInterceptor throw different exception types. This is the one way in which the method signatures are allowed to differ, so long as the exception type of our method is a subclass of the overridden method. Since IOException extends Exception, this is allowed.\nNotice that preHandle returns a boolean. The return value will dictate what happens after the handler finishes running. If we return true, then request processing will continue as normal, with the appropriate controller method being called. If we return false, then processing will halt, and no controllers will be called.\nLet’s break down this method.\nLine 6: Retrieves the user’s session object, which is contained in the request. Line 7: Retrieves the User object corresponding to the given user. Recall that this will be null if the user is not logged in. Lines 10-12: The user object is non-null, so the user is logged in. Allow the request to be handled as normal. Lines 15-17: The user object is null, so we redirect the user to the login page. This method has the effect of preventing access to every page on the app if a user is not logged in. This creates one not-so-minor problem: How will a user access the login page if they are not logged in?\nCreating a Whitelist The term whitelist often refers to a list of items that are NOT subject to a given restriction. For our filter to fully work, we need a whitelist of pages that may be accessed by any user, regardless of whether or not they are logged in.\nLet’s define our whitelist above preHandle:\nprivate static final List\u003cString\u003e whitelist = Arrays.asList(\"/login\", \"/register\", \"/logout\", \"/css\");At minimum, users should be able to access the routes associated with logging in and out. Depending on the desired use-cases for your application, you may want to add additional pages to the whitelist. For example, many web apps have a home page that does not require being logged in to view.\nWe now need a way to check whether or not a given request is whitelisted. The following utility method does the trick:\n1 2 3 4 5 6 7 8 private static boolean isWhitelisted(String path) { for (String pathRoot : whitelist) { if (path.startsWith(pathRoot)) { return true; } } return false; } This method takes a string representing a URL path and checks to see if it starts with any of the entries in whitelist. If you wanted to be more restrictive, you could use .equals() instead of .startsWith(). If the path is whitelisted, we return true. Otherwise, we return false.\nWe can now check all requests against the whitelist within preHandle:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException { // Don't require sign-in for whitelisted pages if (isWhitelisted(request.getRequestURI())) { // returning true indicates that the request may proceed return true; } HttpSession session = request.getSession(); User user = authenticationController.getUserFromSession(session); // The user is logged in if (user != null) { return true; } // The user is NOT logged in response.sendRedirect(\"/login\"); return false; } request.getRequestURI() returns the request path (see the docs for more details). Lines 6-10 check the path against the whitelist, returning true (that is, allowing the request to proceed) if the path is whitelisted.\nWith our filter complete, we simply need to let Spring know about it to complete our authentication code.\nRegistering the Filter With Spring Spring Boot uses code-based configuration, which means that many application configurations can be done using Java classes. We’ll use code-based configuration to register our filter.\nAt the top-level package of the app, org.launchcode.codingevents, create a class named WebApplicationConfig with the code below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @Configuration public class WebApplicationConfig implements WebMvcConfigurer { // Create spring-managed object to allow the app to access our filter @Bean public AuthenticationFilter authenticationFilter() { return new AuthenticationFilter(); } // Register the filter with the Spring container @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor( authenticationFilter() ); } } The @Configuration annotation flags this class to Spring as one that contains configuration code. By implementing WebMvcConfigurer, we ensure that Spring will call our addInterceptors method during startup, giving us the chance to register our filter.\nThe first method—authenticationFilter, which is annotated with @Bean—makes our filter available as a Spring-managed class.\nNow you can start your application and test. You should be required to log in to view anything other than login and registration pages.\nCheck Your Understanding Question True/False: Request filtering takes place before any controller is called.\nTrue False Question True/False: When our code checks a path against entries in the whitelist, it must match exactly in order for the path to be accessed without logging in.\nTrue False ",
    "description": "Our application now allows users to register and log in. However, access to pages on the site is NOT yet restricted in any way. Even if a user isn’t logged in, they may view any page on the site. To fully implement authentication, we need to be able to check a user’s login status on each request, before any controller methods are called.\nWe can do this by filtering requests. Request filtering is a mechanism available in many web frameworks.",
    "tags": [],
    "title": "Filtering Requests",
    "uri": "/authentication/reading/filtering-requests/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "Initial Setup The steps here will walk you through setting up the repository that you’ll use to study example code, work on studios, and complete your first assignment of this unit.\nCreate a Fork of LaunchCodeEducation/java-web-dev-projects . Do not clone and create a local version of this repo just yet.\nOpen IntelliJ.\nNote If the app opens up to an existing project, simply close that window to return to the welcome screen.\nIf you prefer to have IntelliJ NOT open your most recent project:\nMac users: Select IntelliJ \u003e Preferences \u003e Appearance \u0026 Behavior \u003e System Settings and un-check Reopen projects on startup. Windows users: Use File \u003e Settings \u003e Appearance \u0026 Behavior \u003e System Settings. The Welcome to IntelliJ dialog looks different now. It includes a list of your most recent projects. However, we have the same three options in the upper-right corner. Select Get from VCS.\nSelect the GitHub option on the left side of the next window. Click Log In via GitHub or Use token and follow the on-screen prompts.\nNote To work with a remote repository in IntelliJ, you need to configure the program to access your GitHub account. We recommend authenticating your account using a token. This takes only one brief extra step, and will prevent you from having to update IntelliJ settings whenever you change your GitHub password.\nNow return to the Repository URL tab. From the URL dropdown options, select your fork of java-web-dev-projects, along with an appropriate destination directory (like the folder where you’ve stored other projects for this class).\nWhen ready, click the Clone button!\nIf you’re asked about other settings for your project. Select the Next button every time to accept the default options.\nWhen your project is ready, you’ll see a page that looks like the image below. Click on Load, if you are prompted to load the Gradle Build Scripts.\nYou should see the file structure of the project you have just set up. If you do not, click on the folder icon in the upper left corner.\nNavigate down datatypes/datatype-examples/src/main/java/org.launchcode and double-click on the HelloMethods file. This will open it in the workspace to the right.\nTo run the HelloMethods program, click on the green arrow next to the class definition and select Run ‘HelloMethods.main()’ from the dropdown menu.\nAfter a few seconds, you should see a new window appear with your program’s output.\nNote You may have a message saying the Project JDK is not defined. Click on ‘Setup SDK’ and select the Java 17 version.\nWith that, you’re ready to go!\nTroubleshooting ClassNotFoundException After setting up the project, if you experience java.lang.ClassNotFoundException when you run the code, follow these steps:\nSelect File \u003e Close Project. If you have any other IntelliJ projects open, close them as well.\nYou should see the IntelliJ startup window. Click the gear icon next to java-web-dev-projects and select Remove from Recent Projects.\nFrom the same startup window, select File –\u003e New –\u003e Project from Existing Sources.\nWhen prompted, select the java-web-dev-projects folder and click Open.\nIn the next panel, select the Create project from existing sources radio button. Click Next.\nFollow the steps that IntelliJ guides you through, accepting all defaults. Each time you are prompted to overwrite IntelliJ settings files, confirm that you want to do so.\nEventually the project will open, and you can successfully run your code!",
    "description": "Initial Setup The steps here will walk you through setting up the repository that you’ll use to study example code, work on studios, and complete your first assignment of this unit.\nCreate a Fork of LaunchCodeEducation/java-web-dev-projects . Do not clone and create a local version of this repo just yet.\nOpen IntelliJ.\nNote If the app opens up to an existing project, simply close that window to return to the welcome screen.",
    "tags": [],
    "title": "Java Web Dev Projects",
    "uri": "/intro-and-setup/java-web-dev-projects/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Major Concepts Upon completing all the content in this chapter, you should be able to do the following:\nWrite unit tests to verify the behavior of methods Identify proper behaviors for which a test should be written Understand the importance of testing in creating well-functioning code Use test-driven development to define the behavior of code before writing it, and to ensure that code is properly tested Use JUnit to create tests Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page.\nTesting in Java Automated testing unit testing JUnit refactoring JUnit annotations dependencies Chapter Content Reading Exercises: Unit Testing Studio: Unit Testing Next Steps ",
    "description": "Major Concepts Upon completing all the content in this chapter, you should be able to do the following:\nWrite unit tests to verify the behavior of methods Identify proper behaviors for which a test should be written Understand the importance of testing in creating well-functioning code Use test-driven development to define the behavior of code before writing it, and to ensure that code is properly tested Use JUnit to create tests Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page.",
    "tags": [],
    "title": "Chapter 6: Unit Testing",
    "uri": "/unit-testing/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 3: Control Flow and Collections \u003e Reading",
    "content": "Java also provides us a structure to store data as key/value pairs. Java calls these objects hashmaps (or maps, more generally), and they are provided by the HashMap class.\nConsidering the gradebook example, we can improve our program using a map. We’ll store the students’ grades along with their names in the same data structure. The names will be the keys, and the grades will be the values.\nAs with the other collection structures, in Java we must specify the types of the objects we’ll be storing when we declare a variable or parameter to be a map. This means specifying both key and value data types, which are allowed to be different types for a given map.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package org.launchcode; import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class HashMapGradebook { public static void main(String[] args) { HashMap\u003cString, Double\u003e students = new HashMap\u003c\u003e(); Scanner input = new Scanner(System.in); String newStudent; System.out.println(\"Enter your students (or ENTER to finish):\"); // Get student names and grades do { System.out.print(\"Student: \"); newStudent = input.nextLine(); if (!newStudent.equals(\"\")) { System.out.print(\"Grade: \"); Double newGrade = input.nextDouble(); students.put(newStudent, newGrade); // Read in the newline before looping back input.nextLine(); } } while(!newStudent.equals(\"\")); // Print class roster System.out.println(\"\\nClass roster:\"); double sum = 0.0; for (Map.Entry\u003cString, Double\u003e student : students.entrySet()) { System.out.println(student.getKey() + \" (\" + student.getValue() + \")\"); sum += student.getValue(); } double avg = sum / students.size(); System.out.println(\"Average grade: \" + avg); } } Notice how a HashMap called students is declared on line 11:\n11 HashMap\u003cString, Double\u003e students = new HashMap\u003c\u003e(); Here, \u003cString, Double\u003e defines the data types for this map’s \u003ckey, value\u003e pairs. Like the ArrayList, when we call the HashMap constructor on the right side of the assignment, we don’t need to specify type.\nWe can add a new item with a .put() method, specifying both key and value:\n26 students.put(newStudent, newGrade); And while we don’t do so in this example, we may also access HashMap elements using the get method. If we had a key/value pair of \"jesse\"/4.0 in the students map, we could access the grade with:\nDouble jesseGrade = students.get(\"jesse\");Variables may be used to access elements:\n1 2 String name = \"jesse\"; Double jesseGrade = students.get(name); Looping through a map is slightly more complex than it is for ordered lists. Let’s look at the for-each loop from this example:\n38 39 40 41 for (Map.Entry\u003cString, Double\u003e student : students.entrySet()) { System.out.println(student.getKey() + \" (\" + student.getValue() + \")\"); sum += student.getValue(); } The iterator variable, student, is of type Map.Entry\u003cString, Double\u003e. The class Map.Entry is specifically constructed to be used in this fashion, to represent key/value pairs within HashMaps. Each Map.Entry object has a getKey method and a getValue method, which represent (surprisingly enough!), the key and value of the map item.\nIf you only need to access the key of each item in a map, you can construct a simpler loop:\n1 2 3 for (String student : students.keySet()) { System.out.println(student); } A similar structure applies if you only need the values, using students.values():\n1 2 3 for (double grade : students.values()) { System.out.println(grade); } HashMap Methods Let’s collect some HashMap methods as we have for ArrayList. As we said about ArrayLists, this is by no means a comprehensive list. For full details on all properties and methods available, see the reference section below for official documentation on the HashMap class.\nFor the purposes of this table, we’ll create a map to hold our solar system’s planets and the number of moons associated with each.\n1 2 3 4 5 6 7 8 9 HashMap\u003cString, Integer\u003e moons = new HashMap\u003c\u003e(); moons.put(\"Mercury\", 0); moons.put(\"Venus\", 0); moons.put(\"Earth\", 1); moons.put(\"Mars\", 2); moons.put(\"Jupiter\", 79); moons.put(\"Saturn\", 82); moons.put(\"Uranus\", 27); moons.put(\"Neptune\", 14); Java Syntax Description Example size() Returns the number of items in the map, as an int. moons.size() returns 8 keySet() Returns a collection containing all keys in the map. This collection may be used in a for-each loop just as lists are, but the map may not be modified within such a loop. moons.keySet() returns [\"Earth\", \"Mars\", \"Neptune\", \"Jupiter\", \"Saturn\", \"Venus\", \"Uranus\", \"Mercury\"] values() Returns a collection containing all values in the map. This collection may be used in a for-each loop just as lists are. moons.values() returns [1, 2, 14, 79, 82, 0, 27, 0] put() Add a key/value pair to a map. moons.put(\"Pluto\", 5) adds \"Pluto\": 5 to the moons containsKey() Returns a boolean indicating whether or not the map contains a given key. moons.containsKey(\"Earth\") returns true containsValue() Returns a boolean indicating whether or not the map contains a given value. moons.containsValue(79) returns true We have only brushed the surface of how arrays, ArrayLists, and maps work. We leave it to you to refer to the official documentation linked below for more details. You’ll certainly be using ArrayLists and maps in more ways than those covered in this lesson, but with the knowledge you have now, you should be able to use Java collections and learn new uses as you go.\nCheck Your Understanding Question Given our HashMap,\n1 2 3 4 5 6 7 8 9 10 moons = { \"Mercury\" = 0, \"Venus\" = 0, \"Earth\" = 1, \"Mars\" = 2, \"Jupiter\" = 79, \"Saturn\" = 82, \"Uranus\" = 27, \"Neptune\" = 14 } What is the method to return the key names?\nMap.keys(moons); moons.keys(); moons.keySet(moons); moons.keySet(); Question Given our HashMap,\n1 2 3 4 5 6 7 8 9 10 moons = { \"Mercury\" = 0, \"Venus\" = 0, \"Earth\" = 1, \"Mars\" = 2, \"Jupiter\" = 79, \"Saturn\" = 82, \"Uranus\" = 27, \"Neptune\" = 14 } What will moons.get(\"Mars\"); return?\n2 {Mars: 2} 2.0 \"Mars\" ",
    "description": "Java also provides us a structure to store data as key/value pairs. Java calls these objects hashmaps (or maps, more generally), and they are provided by the HashMap class.\nConsidering the gradebook example, we can improve our program using a map. We’ll store the students’ grades along with their names in the same data structure. The names will be the keys, and the grades will be the values.\nAs with the other collection structures, in Java we must specify the types of the objects we’ll be storing when we declare a variable or parameter to be a map.",
    "tags": [],
    "title": "HashMap",
    "uri": "/control-flow-and-collections/reading/hashmap/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2",
    "content": "We began designing and implementing our Menu and MenuItem classes in the last studio . Let’s continue working on these classes by adding some methods.\n1. Design To review, here are the details you have from the restaurant owner:\nThe menu consists of several menu items. Each menu item has a price, description, and category (appetizer, main course, or dessert). It should be possible to display whether or not a menu item is new. The app should know when the menu was last updated, so visitors can see that the restaurant is constantly changing and adding exciting new items. Based on these details, you need to include some instance methods:\nA way to add and remove menu items from the menu. A way to tell if a menu item is new. A way to tell when the menu was last updated. A way to print out both a single menu item as well as the entire menu. A way to determine whether or not two menu items are equal. Starting with pen and paper (or your favorite notes application on your laptop), sketch out the methods that you need to add to these classes. List the method names and access levels, along with the types of all input and return parameters. Also, consider whether any methods should be static.\n2. Share Your Design Once you have sketched out your methods, pair with a classmate and take turns presenting your designs. Class design can be subjective, so it’s important to properly think and talk through your choices before coding.\nWhile your partner is presenting their design, ask questions about why they made the decisions they did. Consider other use cases that might come up, and see if their design fits with those.\n3. Implementation In IntelliJ, open your Restaurant Menu project. Open the terminal in IntelliJ and create a branch in your repository for your Lesson 4 Studio solution. For the studio, make sure all of your work is in that branch. Within the restaurant package, add the methods you designed to your Menu and MenuItem classes. Create a class called Restaurant, and add a public static void main(String[] args) method. Use the main method to test your classes: Create several items and add them to a menu. Print the entire, updated menu to the screen. Print an individual menu item to the screen. Delete an item from a menu, then reprint the menu. Bonus Mission If a user tries to add an item that is already on the menu, print a message that warns the user about the duplicate. Also, prevent the duplicate from being added to the menu.",
    "description": "We began designing and implementing our Menu and MenuItem classes in the last studio . Let’s continue working on these classes by adding some methods.\n1. Design To review, here are the details you have from the restaurant owner:\nThe menu consists of several menu items. Each menu item has a price, description, and category (appetizer, main course, or dessert). It should be possible to display whether or not a menu item is new.",
    "tags": [],
    "title": "Studio: Restaurant Menu Continued",
    "uri": "/classes-part-2/studio/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #2: Tech Jobs OO",
    "content": "Review the code in the Employer, Location, CoreCompetency, and PositionType classes. What similarities do you see?\nThere is a fair amount of repetition between the classes. As a good coder, anytime you find yourself adding identical code in multiple locations you should consider how to streamline the process.\nDRY = “Don’t Repeat Yourself”.\nCreate a Base Class Let’s move all of the repeated code into a separate class. We will then have Employer, Location, CoreCompetency, and PositionType inherit this common code.\nCreate a new class called JobField in the package org.launchcode.techjobs.oo.\nConsider the following questions to help you decide what code to put in the JobField class:\nWhat fields do ALL FOUR of the classes have in common? Which constructors are the same in ALL FOUR classes? What getters and setters do ALL of the classes share? Which custom methods are identical in ALL of the classes? In JobField, declare each of the common fields.\nCode the constructors.\nUse Generate to create the appropriate getters and setters.\nAdd in the custom methods.\nFinally, to prevent the creation of a JobField object, make this class abstract.\nExtend JobField into Employer Now that you have the common code located in the JobField file, we can modify the other classes to reference this shared code. Let’s begin with Employer.\nModify line 5 to extend the JobField class into Employer.\n5 6 7 8 9 public class Employer extends JobField { //Code not displayed. } Next, remove any code in Employer that matches code from JobField (e.g. the id, value, and nextId fields are shared).\nRemove any of the getters and setters that are the same.\nRemove any of the custom methods that are identical.\nThe empty constructor is shared, but not the second. Replace the two constructors with the following:\n7 8 9 public Employer(String value) { super(value); } The extends and super keywords link the JobField and Employer classes.\nRerun your unit tests to verify your refactored code.\nFinish DRYing Your Code Repeat the process above for the Location, CoreCompetency, and PositionType classes.\nRerun your unit tests to verify that your classes and methods still work.\nTip You know you need to do this, but here is the reminder anyway. Save, commit, and push your work to GitHub.\nNext ",
    "description": "Review the code in the Employer, Location, CoreCompetency, and PositionType classes. What similarities do you see?\nThere is a fair amount of repetition between the classes. As a good coder, anytime you find yourself adding identical code in multiple locations you should consider how to streamline the process.\nDRY = “Don’t Repeat Yourself”.\nCreate a Base Class Let’s move all of the repeated code into a separate class. We will then have Employer, Location, CoreCompetency, and PositionType inherit this common code.",
    "tags": [],
    "title": "Task 6: Refactor to DRY the Support Classes",
    "uri": "/assignments/techjobs-oo/task6/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments",
    "content": "Next Steps ",
    "description": "Next Steps ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/assignments/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "As we wrap up our whirlwind tour of classes, we want you to think a bit about how to go about building good classes. Doing so is more of an art than a science, and it will take you lots of practice and time. However, there are a few rules that we’ve pointed out to help guide you. Here’s one more.\n“The single responsibility principle states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.”\nIt isn’t always clear what “responsibility over a single part of the functionality” means. However, it is often very clear what it doesn’t mean. For example, we wouldn’t think of adding functionality to the Student class that tracked all of the data for each of the student’s classes, such as catalog number, instructor, and so on. Those are clearly different areas of responsibility. One way to interpret the single responsibility principle is to say that “classes should be small.”\nAs you go forth and create classes, the main thing to keep in mind is that your skill and judgment in creating Java classes will improve over time. The best way to improve is to write lots of code, ask lots of questions, and continue learning!\nIf you are interested in learning more about Single Responsibility Principle , you can check out the entry on Wikipedia.",
    "description": "As we wrap up our whirlwind tour of classes, we want you to think a bit about how to go about building good classes. Doing so is more of an art than a science, and it will take you lots of practice and time. However, there are a few rules that we’ve pointed out to help guide you. Here’s one more.\n“The single responsibility principle states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.",
    "tags": [],
    "title": "Single Responsibility Principle",
    "uri": "/classes/reading/srp/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #4: Tech Jobs Persistent",
    "content": "Sanity Check At this point, all autograding tests should be passing. To be sure, right-click on the org.launchcode.techjobs.persistent package in src/test/java and select Run tests in… If any test fails, evaluate the failure/error message and go back to fix your code.\nIf a test in TestCommentedTests fails, this means that you failed to uncomment one or more tests in either TestTaskTwo or TestTaskFour. You will need to go back and uncomment the test(s) and make sure they pass.\nHow to Submit To turn in your assignment and get credit, follow the Submission Instructions ",
    "description": "Sanity Check At this point, all autograding tests should be passing. To be sure, right-click on the org.launchcode.techjobs.persistent package in src/test/java and select Run tests in… If any test fails, evaluate the failure/error message and go back to fix your code.\nIf a test in TestCommentedTests fails, this means that you failed to uncomment one or more tests in either TestTaskTwo or TestTaskFour. You will need to go back and uncomment the test(s) and make sure they pass.",
    "tags": [],
    "title": "Submission and Bonus Missions",
    "uri": "/assignments/techjobs-persistent/submission/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "Java has some very straightforward naming conventions. These are universally used by Java programmers, and differ in some cases from conventions commonly used in other languages.\nAgain, these are conventions. Ignoring them will not prevent your code from running, as long as you are following Java’s naming rules . Java’s identifier naming rules are somewhat hard to parse, so a good rule-of-thumb is that you should use only letters, numbers, and the underscore character _, and they should always start with a letter.\nThe naming conventions are more like guidelines than rules and are what other Java coders expect to see when reading your code.\nIdentifier Type Convention Examples Package All lowercase demos.javawebdevelopment, org.launchcode.utilities Class Start with an uppercase letter Scanner, System, Cello Method Start with a lower case letter, and use camelCase to represent multi-word method names nextInt(), getId() Instance variable Start with a lowercase letter and use camelCase id, firstName Constant All uppercase letters, words separated by underscores MAX_INT Note Constants in Java are variables created using both static and final modifiers. For example: static final Double PI = 3.14159\nTip If you’re not sure about all of these identifier types yet, that’s ok. Keep this page in mind for future reference as you read through this book.\nOracle, the company that develops the Java language, provides some more detailed naming conventions . (From the date on this article, you’ll note that these have been relatively standard for a very long time!)",
    "description": "Java has some very straightforward naming conventions. These are universally used by Java programmers, and differ in some cases from conventions commonly used in other languages.\nAgain, these are conventions. Ignoring them will not prevent your code from running, as long as you are following Java’s naming rules . Java’s identifier naming rules are somewhat hard to parse, so a good rule-of-thumb is that you should use only letters, numbers, and the underscore character _, and they should always start with a letter.",
    "tags": [],
    "title": "Java Naming Conventions",
    "uri": "/intro-and-setup/naming-conventions/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Not sure you get the whole inheritance idea? Still not sure which fields and methods get inherited and which are overridden? Looking to test your understanding? (wink)\nKnowing what we know now about unit-testing and inheritance , we can test that our subclasses extend their base classes.\nWe can add a test folder to our inheritance package and write some code to ensure that HouseCat inherits what we expect it to.\n@Test public void inheritsSuperInFirstConstructor() { HouseCat keyboardCat = new HouseCat(\"Keyboard Cat\", 7); assertEquals(7, keyboardCat.getWeight(), .001); }Here, we’re testing that one of our HouseCat constructors will call the Cat constructor and appropriately assign the HouseCat object’s weight property. Remember, we don’t need to write unit tests for getters or setters unless they do something extra in addition to getting or setting. The purpose of this test, though, is less to test getting keyboardCat.weight and more to validate that the subclass constructor has inherited the base class constructor.\nIt’s a good practice to test your subclasses to verify the items that they inherit or override.\nCheck Your Understanding Question Fill in the blank to test that the default constructor of Cat is called when the second constructor on HouseCat is used.\nSecond HouseCat constructor:\npublic HouseCat(String aName) { name = aName; }@Test public void inheritsDefaultCatInSecondConstructor() { HouseCat keyboardCat = new HouseCat(\"Keyboard Cat\"); \u003cinsert assertion method here\u003e } assertEquals(13, keyboardCat.getWeight());\nassertNotNull(keyboardCat.getWeight());\nassertEquals(13, keyboardCat.getWeight(), .001);\nassertNotNull(keyboardCat.weight);\nQuestion What additional assert method can we add to this test to properly verify that HouseCat inherits eat()?\n@Test public void isNotInitiallyTired() { HouseCat keyboardCat = new HouseCat(\"Keyboard Cat\"); assertFalse(keyboardCat.isHungry()); assertFalse(keyboardCat.isTired()); keyboardCat.eat(); } assertFalse(keyboardCat.isTired());\nassertTrue(keyboardCat.isTired());\nassertTrue(keyboardCat.isHungry());\nassertFalse(keyboardCat.tired);",
    "description": "Not sure you get the whole inheritance idea? Still not sure which fields and methods get inherited and which are overridden? Looking to test your understanding? (wink)\nKnowing what we know now about unit-testing and inheritance , we can test that our subclasses extend their base classes.\nWe can add a test folder to our inheritance package and write some code to ensure that HouseCat inherits what we expect it to.",
    "tags": [],
    "title": "Testing Inheritance",
    "uri": "/inheritance/reading/testing-inheritance/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "Templates allow you to build generic forms. This lets you reuse the structure by rendering the same template with different labels and data. Thus, a single form can serve different purposes, saving you extra effort.\nWhenever possible, reuse existing templates!\nStart a New Project You will build a new project so you can practice with templates and forms. If you have not done so, commit and push any unsaved work from your hello-spring project.\nYour new project will keep track of some fictional coding events.\nUse the start.spring.io website to initialize your new project. Follow the steps you used to setup hello-spring , but call the new project codingevents. Add the Thymeleaf dependency in addition to Spring Web, Spring Boot DevTools, and Validation. Generate the .zip file and then import it into IntelliJ. Coding Events Setup - Video Now that you have codingevents up and running, add features to it by coding along with the content below:\nNote The following videos will demonstrate features we’ve added to a new MVC application we’ll be working with called codingevents. You may notice that parts of this video include references to Java11. Your project should be using Java17.\nYou should create your own version of codingevents from Spring Initializer and refer to this branch and the Coding Events Setup - Text walkthrough to replicate our code. You may fork and clone from the CodingEventsJava project for reference.\nCoding Events Setup - Text The code reviewed in the video uses concepts learned in the previous chapter to set up a controller and a couple of views. If you need to review any of these concepts, go back to that chapter.\nCreate a controllers package. Within the new package, create a new controller class named HomeController. Annotate the class with @Controller. Add a single GET handler method that returns the name templated index, which will be the name of the template we create in the next step. Create a new Thymeleaf template named index.html in the src/main/resources/templates directory. This template could contain a single link to /events. In the controllers package, create a new controller named EventController. Annotate the class with @Controller and @RequestMapping(\"events\"). In the new controller, create a handler method for GET requests that takes a single parameter, Model model. Within the handler, create an empty list and add a few event names to it. Add the list to the model by calling model.addAttribute(\"events\", events). Then return the template name \"events/index\". Within the src/main/resources/templates directory, create a new directory named events. Within this directory, create a new Thymeleaf template named index.html. Within the new template, loop over the events object and display the name of each event. Create and Render a Form - Video Note The starter code for this video is found at the starter branch of the CodingEventsJava repo.\nThe final code presented in this video is found on the form branch . As always, code along to the videos on your own codingevents project.\nBefore moving on, be sure to commit and push your changes. Do this after each video to create a fallback position just in case disaster strikes your project in the future.\nA summary of Thymeleaf forms is given below, but remember that the text supports the videos and is NOT intended as a replacement.\nCreate and Render a Form - Text A Thymeleaf form is simply a template that includes a \u003cform\u003e element inside the body of the HTML. The method for the form should be of type post.\n\u003cbody\u003e \u003c!-- Other HTML --\u003e \u003cform method=\"post\"\u003e \u003cinput type=\"text\" name=\"inputName\"\u003e \u003cinput type=\"submit\" value=\"submitButtonText\"\u003e \u003c/form\u003e \u003c!-- Other HTML --\u003e \u003c/body\u003eYou can include as many inputs as you need in the form, and these can be of different types (e.g. text, email, checkbox, etc.). However, each different piece of data you want to collect needs to have a unique name attribute.\nTo render the form in the view, add a method to the controller using the @GetMapping annotation:\n1 2 3 4 5 6 7 @GetMapping(\"formTemplateName\") public String renderFormMethodName(Model model) { // Method code... return \"pathToTemplate\"; } Some points to note:\nLine 1: The string parameter for GetMapping must be the name of the form template you want to use. Line 2: Declare a Model object to hold data that needs to be passed to the template. The method code performs any data manipulation required before rendering the form. The model.addAttribute statements would be included here. The return string specifies the path to the template. Recall that Spring automatically adds MOST of the file path—up through .../templates. You need to add any path details that follow. For example, if our templates folder contains a subfolder called events that holds a template called create.html, then line 6 would be return \"events/create\";. Add a Form Handler Method - Video Now that you have created and rendered a form in your codingevents project, you need to add a method to the controller to handle its submission. Code along with the video below to add this functionality.\nNote The starter code for this video is found at the form branch of the CodingEventsJava repo. The final code presented in this video is found on the forms-continued branch . As always, code along to the videos on your own codingevents project.\nIf you are having trouble with the redirect, from creating a new event via the events/create endpoint, you may need to update your redirect within the createEvent method to point to the desired location:\n@PostMapping(\"create\") public String createEvent(@RequestParam String eventName) { events.add(eventName); return \"redirect:/events\"; } As usual, the following summary outlines the ideas from the clip.\nAdd a Form Handler Method - Text To process a form after the user clicks the Submit button, you need to add a method to the controller using the @PostMapping annotation:\n1 2 3 4 5 6 7 @PostMapping(\"formTemplateName\") public String processFormMethodName(@RequestParam Type parameter1, Type parameter2, ...) { // Method code... return \"redirect:templateName\"; } Some points to note:\nLine 1: The string parameter for PostMapping must be the name of the form template. Line 2: For each piece of data that needs to be retrieved from the form, declare a parameter of the appropriate type. Note @RequestParam matches the parameters to the submitted data. For this to work, the parameter names MUST match the name attributes used in each of the input elements.\nThe method code performs any data manipulation required after the information gets submitted. Line 6: Generally, we want to send the user to a different page after they successfully submit a form. Instead of re-rendering the form, the return string redirects the user to a method that handles a different template. ",
    "description": "Templates allow you to build generic forms. This lets you reuse the structure by rendering the same template with different labels and data. Thus, a single form can serve different purposes, saving you extra effort.\nWhenever possible, reuse existing templates!\nStart a New Project You will build a new project so you can practice with templates and forms. If you have not done so, commit and push any unsaved work from your hello-spring project.",
    "tags": [],
    "title": "Thymeleaf Forms",
    "uri": "/thymeleaf-views/reading/forms-thymeleaf/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Assignments \u003e Assignment #2: Tech Jobs OO",
    "content": "Run the Tests At this point, all autograding tests should be passing. To be sure, right-click on the org.launchcode.techjobs.oo package in src/test/java and select Run tests in…\nIf ANY fail: Evaluate the failure/error message and go back to fix your code.\nIf ALL pass: Excellent work! You successfully shifted the old console app into a more useful object oriented configuration.\nNow that the new structure is ready, another team member can refactor the import and display methods to use the new classes. Once these are ready, our team will refine the search features and move the app online to provide a better user interface.\nHow to Submit When you are satisfied with your work, copy the URL to your repository on Github and paste it in the submission field for Assignment #2 on Canvas.",
    "description": "Run the Tests At this point, all autograding tests should be passing. To be sure, right-click on the org.launchcode.techjobs.oo package in src/test/java and select Run tests in…\nIf ANY fail: Evaluate the failure/error message and go back to fix your code.\nIf ALL pass: Excellent work! You successfully shifted the old console app into a more useful object oriented configuration.\nNow that the new structure is ready, another team member can refactor the import and display methods to use the new classes.",
    "tags": [],
    "title": "Task 7: Final Steps",
    "uri": "/assignments/techjobs-oo/task7/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nUnderstand what inheritance is and how programmers can use it. Understand what abstract classes and methods are. Learn how to formally diagram classes and the relationships between classes. Key Terminology As you read through the chapter, look for the following key words.\nInheritance Inheritance Subtyping Inheritance in Java Extends Subclass Child class Super class Base class Parent class Derived class Object class A Tale of Two Cats base no-arg constructor override method overriding Inheritance from Abstraction Abstraction abstract Abstract class Abstract method Casting Runtime exception Polymorphism Class Diagrams Class diagrams One-to-One Relationship One-to-Many relationship Content Links Reading Exercises: Inheritance Studio: Fun with Quizzes ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nUnderstand what inheritance is and how programmers can use it. Understand what abstract classes and methods are. Learn how to formally diagram classes and the relationships between classes. Key Terminology As you read through the chapter, look for the following key words.\nInheritance Inheritance Subtyping Inheritance in Java Extends Subclass Child class Super class Base class Parent class Derived class Object class A Tale of Two Cats base no-arg constructor override method overriding Inheritance from Abstraction Abstraction abstract Abstract class Abstract method Casting Runtime exception Polymorphism Class Diagrams Class diagrams One-to-One Relationship One-to-Many relationship Content Links Reading Exercises: Inheritance Studio: Fun with Quizzes ",
    "tags": [],
    "title": "Chapter 7: Inheritance",
    "uri": "/inheritance/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "We have mentioned a few times the importance of designing your classes before starting to write code. It’s important to think about the fields, properties, and methods of your classes, as well as the relationship of your various classes to each other. Doing so will not only result in better code, but will also mean that you’re less likely to have to rewrite your code due to lack of foresight.\nClass diagrams are informal tools for sketching out class design. They are often discussed in the context of the Unified Modeling Language , but most programmers use them much less formally. This will be our approach as well.\nWe’ll introduce you to a few accepted conventions used when drawing class diagrams. These guidelines are by no means comprehensive, and they should not be thought of as rigid rules. There’s no compiler to yell at you for not drawing a class diagram properly! Instead, we encourage you to use class diagrams as planning and communication tools. Use whichever of the conventions you choose, based on your needs.\nClass diagrams can be created within some IDEs (including IntelliJ) and with specialized software. However, most of the time you’ll be drawing them by hand, so that’s what we’ll do here.\nDiagramming a Single Class In diagramming a single class, we create a box and divide it into three sections:\nTop: Class name Middle: Fields Bottom: Methods For fields, we can specify additional useful information, such as access level and data type. For methods, we can similarly specify access level, return type, and input parameter types. We will often use “+” as shorthand for public, and “-” as shorthand for private. If we want to indicate that some methods or fields are omitted, we can use ellipses “…”.\nDiagramming Class Relationships What’s even more useful than just diagramming a single class is diagramming the relationships between the classes within our programs.\nSuppose we are designing a program to track students and the classes that they have taken. We might think about three classes:\nStudent: Represents an individual student Transcript: Represents a student’s transcript, including classes that they have taken CourseRecord: Represents an individual course that a student has completed, along with the grade achieved. We can represent these three classes and their relationships to each other in the following diagram:\nSince, in this situation, we’re only concerned with their relationships, we’ve omitted the fields and methods of these classes. The lines between each are different, and convey different information.\nA plain, solid line between two classes indicates a one-to-one relationship. For each Student, there is one Transcript, and a Transcript can be owned by only one Student.\nA line with an open diamond on the end indicates a one-to-many relationship. Each Transcript has many CourseRecord objects.\nAnother type of relationship that we have recently encountered is the is-a relationship of inheritance. This can be expressed via a class diagram by using an arrow, directed from the subclass to the base class.\nThere are many more ways to express relationships in class diagrams, and you’ll even see slight variations in usage of lines and the decorators used to specify the type of relationship.\nFor most purposes, your main concern should be visually communicating information about your program design. To that end, if you are going to share your diagram with somebody else, it is always helpful to use a key to indicate the specific meaning you have attached to each symbol used.\nIf you’d like to learn a bit more about informal class diagrams, we’ve collected some short, relevant videos .\nReferences Class Diagram (Wikipedia) Check Your Understanding Question With pen and paper, write a class diagram that depicts the relationship between a class Rocket, that extends a SpaceCraft and has a LaunchPad and several Engine objects. Include some fields and methods.\nTrue/False: You drew a class diagram by hand.\nTrue False Question True/False: When making class diagrams, the main idea is to get the design rules just right so that you won’t need to update your classes in the future.\nTrue False ",
    "description": "We have mentioned a few times the importance of designing your classes before starting to write code. It’s important to think about the fields, properties, and methods of your classes, as well as the relationship of your various classes to each other. Doing so will not only result in better code, but will also mean that you’re less likely to have to rewrite your code due to lack of foresight.",
    "tags": [],
    "title": "Class Diagrams",
    "uri": "/inheritance/reading/class-diagrams/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "Just like methods in Java provide us with the ability to reuse useful code, Thymeleaf allows us to do something similar with HTML.\nFragments are blocks of HTML elements that we want to use across multiple templates. The fragments are stored in a separate file, and they can be accessed by using the keywords fragment and replace.\nA summary of these two keywords is given below, followed by another video walkthrough to give you some more live-coding practice.\nFragments DRY Your Code Anytime you find yourself typing identical code into different templates, you should consider ways to streamline your work.\nNever fear, coder. Fragments are the tool you need. The general syntax is:\nth:fragment = \"fragmentName\" th:replace = \"fileName :: fragmentName\"th:fragment Let’s assume that you want to add the same styled header and a set of links to multiple pages within your web project.\nExamples The common header styled with CSS:\n\u003ch1 class=\"fancyTitle\" th:text=\"${title}\"\u003e\u003c/h1\u003eThe link list, which appears below a dividing line:\n\u003chr\u003e \u003ca href=\"https://www.launchcode.org\"\u003eLaunchCode\u003c/a\u003e \u003cbr/\u003e \u003ca href=\"https://www.lego.com\"\u003ePlay Well\u003c/a\u003e \u003cbr/\u003e \u003ca href=\"https://www.webelements.com\"\u003eOther Building Blocks\u003c/a\u003e Instead of pasting this code into every template, we will store the HTML in a separate file.\nCreate a new html file inside the templates folder and give it a clear name (e.g., fragments.html is a common practice). Inside this file, use the th:fragment attribute on each block of code that you want to reuse. Note that you must provide a different name for each sample. Examples \u003ch1 th:fragment=\"styledHeader\" class=\"fancyTitle\" th:text=\"${title}\"\u003e\u003c/h1\u003eFor multiple elements, we need to wrap them in another tag: For the h1 element:\n\u003cdiv th:fragment=\"linkList\"\u003e \u003chr\u003e \u003ca href=\"https://www.launchcode.org\"\u003eLaunchCode\u003c/a\u003e \u003cbr/\u003e \u003ca href=\"https://www.lego.com\"\u003ePlay Well\u003c/a\u003e \u003cbr/\u003e \u003ca href=\"https://www.webelements.com\"\u003eOther Building Blocks\u003c/a\u003e \u003c/div\u003e We can now pull either of the fragments—styledHeader or linkList–into any template in our project.\nTip What if we do not want to keep the link list inside its own div element? One option is to use th:block:\n\u003cth:block th:fragment=\"linkList\"\u003e \u003chr\u003e \u003ca href=\"https://www.launchcode.org\"\u003eLaunchCode\u003c/a\u003e \u003cbr/\u003e \u003ca href=\"https://www.lego.com\"\u003ePlay Well\u003c/a\u003e \u003cbr/\u003e \u003ca href=\"https://www.webelements.com\"\u003eOther Building Blocks\u003c/a\u003e \u003c/th:block\u003eAnother option is to use the attribute th:remove, which allows us to selectively discard the wrapper tag, but not any of its children.\n\u003cdiv th:fragment=\"linkList\" th:remove=\"tag\"\u003eFor a more detailed discussion of the different th:remove options, consult the Thymeleaf documentation .\nth:replace This attribute does just what the name implies—it replaces the tag that contains it with the selected fragment. Thus, if the fragment is a \u003cp\u003e element, and the template contains \u003cdiv th:replace=\"...\"\u003e, then the div in the template will be replaced with a p. Similarly, if the fragment contains multiple elements, the single template tag will be replaced with the entire code block.\nTake home lesson: The template tag that contains th:replace does NOT have to match the HTML tags in the fragment.\nNow let’s see how to pull fragments into a template:\nExamples \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\" xmlns:th=\"http://www.thymeleaf.org/\"\u003e \u003chead th:fragment=\"head\"\u003e \u003cmeta charset=\"UTF-8\"/\u003e \u003ctitle th:text=\"${pageTitle}\"\u003e\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1 th:replace=\"fragments :: styledHeader\"\u003e\u003c/h1\u003e \u003c!-- Specific template code here... --\u003e \u003cp th:replace=\"fragments :: linkList\"\u003e\u003c/p\u003e \u003c/body\u003e When the code runs, the h1 element in line 9 will be replaced by the styledHeader fragment stored in the fragments.html file. Also, the p element in line 13 will be replaced by the \u003chr\u003e and three \u003ca\u003e elements defined in the linkList fragment.\nTry It! Code along with the following video to practice using fragments in your templates:\nNote The starter code for this video is found at the forms-continued branch of the CodingEventsJava repo. The final code presented in this video is found on the fragments branch . As always, code along to the videos in your own codingevents project.\nRemember that the summary text for the fragment and replace keywords supports the video and is NOT intended as a replacement.\nCheck Your Understanding Question Given our code fragment in fragments.html:\n\u003cth:block th:fragment = \"linkList\"\u003e \u003chr\u003e \u003ca href = \"https://www.launchcode.org\"\u003eLaunchCode\u003c/a\u003e \u003cbr/\u003e \u003ca href = \"https://www.lego.com\"\u003ePlay Well\u003c/a\u003e \u003cbr/\u003e \u003ca href = \"https://www.webelements.com\"\u003eOther Building Blocks\u003c/a\u003e \u003c/th:block\u003eWhich of the following would place the linkList fragment inside a \u003cdiv\u003e element in the template?\n\u003cdiv th:replace = \"fragments :: linkList\"\u003e\u003c/div\u003e \u003cdiv\u003e${th:replace = \"fragments :: linkList\"}\u003c/div\u003e \u003cdiv\u003e\u003cp th:replace = \"fragments :: linkList\"\u003e\u003c/p\u003e\u003c/div\u003e \u003cp\u003e\u003cdiv th:replace = \"fragments :: linkList\"\u003e\u003c/div\u003e\u003c/p\u003e Bonus Research th:remove to answer this question. Which of the following does NOT remove the wrapper tag but does eliminate all of its children.\nth:remove = \"all\" th:remove = \"body\" th:remove = \"tag\" th:remove = \"all-but-first\" th:remove = \"none\" ",
    "description": "Just like methods in Java provide us with the ability to reuse useful code, Thymeleaf allows us to do something similar with HTML.\nFragments are blocks of HTML elements that we want to use across multiple templates. The fragments are stored in a separate file, and they can be accessed by using the keywords fragment and replace.\nA summary of these two keywords is given below, followed by another video walkthrough to give you some more live-coding practice.",
    "tags": [],
    "title": "Template Fragments",
    "uri": "/thymeleaf-views/reading/fragments-thymeleaf/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Major Concepts After completing everything in this chapter, you should be able to understand the following:\nWhat polymorphism is. What interfaces are and the difference between interfaces and abstract classes. Different interfaces that are a part of Java, and how they can be used in our code. Best practices around unit tests and interfaces. Key Terminology Polymorphism Interface Method signature Default method Comparable\u003cT\u003e Comparator\u003cT\u003e Iterable\u003cT\u003e List\u003cE\u003e Map\u003cK,V\u003e Content Links Reading Exercises: Interfaces and Polymorphism Studio: Spinning the Discs Next Steps ",
    "description": "Major Concepts After completing everything in this chapter, you should be able to understand the following:\nWhat polymorphism is. What interfaces are and the difference between interfaces and abstract classes. Different interfaces that are a part of Java, and how they can be used in our code. Best practices around unit tests and interfaces. Key Terminology Polymorphism Interface Method signature Default method Comparable\u003cT\u003e Comparator\u003cT\u003e Iterable\u003cT\u003e List\u003cE\u003e Map\u003cK,V\u003e Content Links Reading Exercises: Interfaces and Polymorphism Studio: Spinning the Discs Next Steps ",
    "tags": [],
    "title": "Chapter 8: Interfaces and Polymorphism",
    "uri": "/interfaces/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "Up to now, we used templates to display controller data as text in the view. If we need to display an image or video, or if we want to create a link to a different file, then we need to move beyond a text output.\nWith Thymeleaf, we can set values for the HTML src and href attributes. Instead of hard-coding a file path or external URL inside a tag, th:src and th:href take advantage of a simpler syntax. You did this near the end of the last video when you referenced information stored in files other than the controller or the template.\nAccessing Resources Inside the resources folder, there is another directory called static. By convention, this is the location where we store files that our project needs to access—like images, CSS stylesheets, JavaScript code, etc.\nth:src and th:href - Video Code along with this final video to practice adding static resources to your codingevents project:\nThe starter code for this video is found at the fragments branch of the CodingEventsJava repo. The final code presented in this video is found on the static-resources branch . As always, code along to the videos on your own codingevents project.\nth:src To access a file with the standard HTML src attribute, we need to provide either a detailed or relative file path in order to establish a link. th:src shortens this process by filling in most of the file path automatically (.../project-name/src/main/resources/static). All we need to do is fill in the last portion of the file path—everything after /static.\nThe general syntax is:\nth:src = \"@{/filePath}\"Examples If we have an image file called familyPhoto1.jpg stored in static, then we can display it in the view with an img tag as follows:\n\u003cimg th:src=\"@{/familyPhoto1.jpg}\" /\u003eIf the image is contained in an images folder inside static, then the syntax is:\n\u003cimg th:src=\"@{/images/familyPhoto1.jpg}\" /\u003eThink of the @ symbol as representing everything in the file path up to the static folder.\nth:href The syntax for th:href is the same as that for th:src. For example, to link to a CSS stylesheet:\n\u003clink rel=\"stylesheet\" th:href=\"@{/css/styles.css}\" /\u003eCheck Your Understanding Question Given the file tree shown below, which option displays the correct syntax for finding the image fluffy.jpg?\nth:src=\"@{/pets/cats/fluffy.jpg}\" th:src=\"@{/static/pets/cats/fluffy.jpg}\" th:src=\"@{/static/pets/cats/images/fluffy.jpg}\" th:src=\"@{/pets/cats/images/fluffy.jpg}\" ",
    "description": "Up to now, we used templates to display controller data as text in the view. If we need to display an image or video, or if we want to create a link to a different file, then we need to move beyond a text output.\nWith Thymeleaf, we can set values for the HTML src and href attributes. Instead of hard-coding a file path or external URL inside a tag, th:src and th:href take advantage of a simpler syntax.",
    "tags": [],
    "title": "Static Resources",
    "uri": "/thymeleaf-views/reading/static-resources/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives After completing all the content in this chapter, you should be able to do the following:\nUnderstand the basic architecture of an MVC web application Initialize a Spring Boot application Key Terminology Here is a list of key terms you should make note of based on the page on which they first appear.\nDesign Patterns, MVC, and Spring, Oh My! design patterns Model-View-Controller model view controller Spring Spring Boot Spring MVC Tomcat Initialize Spring Gradle Chapter Content Reading Next Steps ",
    "description": "Learning Objectives After completing all the content in this chapter, you should be able to do the following:\nUnderstand the basic architecture of an MVC web application Initialize a Spring Boot application Key Terminology Here is a list of key terms you should make note of based on the page on which they first appear.\nDesign Patterns, MVC, and Spring, Oh My! design patterns Model-View-Controller model view controller Spring Spring Boot Spring MVC Tomcat Initialize Spring Gradle Chapter Content Reading Next Steps ",
    "tags": [],
    "title": "Chapter 9: Spring Into MVC",
    "uri": "/spring-intro/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 13: Thymeleaf Views \u003e Reading",
    "content": "Introduction Bootstrap is a commonly-used style library. It allows users to quickly apply its CSS style rules with class selectors. Style updates can add features or improve the usability of an application. For example, Bootstrap, and other styling libraries for that matter, use a standardized color scheme for items like clickable buttons. As the user of the helper library, you can apply the btn btn-primary classes to a button on your page and Bootstrap works behind the CSS scenes to render a blue button with white text in a legible font. For more customization, you could also choose which color you want all of the buttons labeled with btn-primary on your web page to be.\nStraight out of the box, Bootstrap helps developers get their web apps well-styled without needing to spend much time writing custom CSS rules. The library also does some of the work of applying user-experience best-practices. The button class btn-danger for example, is defaulted to appear red, a color most associated with danger.\nImage of standard HTML buttons without CSS:\nSame buttons with Bootstrap:\nAdding Bootstrap to “codingevents” Bootstrap - Video The starter code for this video is found at the static-resources branch of the codingevents repo. The final code presented in this video is found on the add-bootstrap branch . As always, code along to the videos in your own “codingevents” project.\nApart from adding the library to your Spring Boot project, we won’t focus much time on the individual Bootstrap updates to “codingevents” but we want you to know what they are and where they come from. Feel free to add as much or as little Bootstrap styling to your own version.\nYou’ll see from the Getting Started page that there are a few ways to incorporate Bootstrap as a dependency in your project. One method is with a link to a content delivery network, or CDN for short. Linking to a CDN allows you to take advantage of the publicly available library without downloading the entire codebase yourself. Think of the practice like using a web address of an image hosted somewhere else on the web. Unlike downloading the image and including it directly in your own repository, you are not the steward of the image’s longevity. The path to an externally hosted image may get moved at some point, or even removed entirely. The same is true with CDNs. So when you use a dependency from a CDN, know that you may need to update the link at some point in your project’s lifetime.\nFrom Bootstrap CDN , copy the Complete CSS and Complete JavaScript addresses and drop them into the head tag of fragments.html in your “codingevents” project.\n\u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\"\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js\"\u003e\u003c/script\u003e The addresses you find at Bootstrap CDN may be different from those above.\nBootstrap Layout Much of what makes Bootstrap a powerfully helpful and time-saving style library is the layout logic it contains. In brief, Bootstrap uses a grid system of elements labeled containers and rows that respond dynamically to the state of a web page. Grid elements are given a size label that dictates when an item will shift or change how it is rendered. Broadly speaking, the grid system helps developers write applications that work well on screens of various sizes. Once you play around with it, you’ll find that the grid layout can help you write apps that respond to more than just changes in window size.\nBootstrap Grid Bootstrap Tables Bootstrap gives us some table styling that we can use to display events in “codingevents”. Some table styling is customizable, so read around Bootstrap’s site and explore adding different options to your table.\nBootstrap Tables Bootstrap Forms Bootstrap offers a number of classes meant to decorate form elements. form-group helps organize items within a form so that inputs and corresponding labels stay visually connected. form-control can be applied to any type of form input to give it the Bootstrap style and look.\nBootstrap Forms Check Your Understanding Question True/False: Style updates are considered refactoring, since they add no new features to a project, only make it look better.\nTrue False ",
    "description": "Introduction Bootstrap is a commonly-used style library. It allows users to quickly apply its CSS style rules with class selectors. Style updates can add features or improve the usability of an application. For example, Bootstrap, and other styling libraries for that matter, use a standardized color scheme for items like clickable buttons. As the user of the helper library, you can apply the btn btn-primary classes to a button on your page and Bootstrap works behind the CSS scenes to render a blue button with white text in a legible font.",
    "tags": [],
    "title": "Bootstrap",
    "uri": "/thymeleaf-views/reading/bootstrap/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 5: Classes Part 2",
    "content": "Next Steps References for Customizing Fields Declaring Member Variables (docs.oracle.com) Initializing Fields (docs.oracle.com) Constructors (docs.oracle.com) References for Instance and Static Methods Encapsulation (wikipedia.org) Defining Methods (docs.oracle.com) Passing Data to a Method or Constructor (docs.oracle.com) References What is the equals() Method in Java Guide to hashCode() in Java ",
    "description": "Next Steps References for Customizing Fields Declaring Member Variables (docs.oracle.com) Initializing Fields (docs.oracle.com) Constructors (docs.oracle.com) References for Instance and Static Methods Encapsulation (wikipedia.org) Defining Methods (docs.oracle.com) Passing Data to a Method or Constructor (docs.oracle.com) References What is the equals() Method in Java Guide to hashCode() in Java ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/classes-part-2/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Understand the basic architecture of an MVC web application Build a Spring application that can handle various types of requests Key Terminology Simple Controllers route Controllers endpoint routing Conventional routing attribute routing action method attribute [HttpGet] [HttpPost] [Route(“path”)] Controllers with Parameters query string Cleaning Up Your Controllers attribute routing attributes Content Links Reading Exercises Studio: Skills Tracker ",
    "description": "Learning Objectives Understand the basic architecture of an MVC web application Build a Spring application that can handle various types of requests Key Terminology Simple Controllers route Controllers endpoint routing Conventional routing attribute routing action method attribute [HttpGet] [HttpPost] [Route(“path”)] Controllers with Parameters query string Cleaning Up Your Controllers attribute routing attributes Content Links Reading Exercises Studio: Skills Tracker ",
    "tags": [],
    "title": "Chapter 10: Controllers and Routing",
    "uri": "/controllers-and-routing/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Chapter 16: Enums",
    "content": "Before tackling SQL and ORM, you should make sure you have a good grasp on enums. If you would like some additional resources, here are a few of our favorites:\nW3Schools Oracle Docs TutorialsPoint ",
    "description": "Before tackling SQL and ORM, you should make sure you have a good grasp on enums. If you would like some additional resources, here are a few of our favorites:\nW3Schools Oracle Docs TutorialsPoint ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/enums/next-steps/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUnderstand what exceptions are. Understand how to use exceptions and interpret them. Key Terminology Here is a list of key terms that you should make note of as you read through this chapter.\nCheck the Temperature with Exceptions compile-time exception runtime exception Chapter Content Reading Exercises: Exceptions Next Steps ",
    "description": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUnderstand what exceptions are. Understand how to use exceptions and interpret them. Key Terminology Here is a list of key terms that you should make note of as you read through this chapter.\nCheck the Temperature with Exceptions compile-time exception runtime exception Chapter Content Reading Exercises: Exceptions Next Steps ",
    "tags": [],
    "title": "Chapter 11: Rules to the Exceptions",
    "uri": "/exceptions/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUnderstand the role of Gradle in a Spring Boot project Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page.\nGradle automated build tool projects tasks plugins dependencies repositories Debugging in IntelliJ breakpoint Debug mode Debugger Pane Add/Watch conditional breakpoint Step-over Step-into Step-out-of Variables Pane Frames Pane Chapter Content Reading Studio: If It Ain't Broke, Add a Breakpoint! Next Steps ",
    "description": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUnderstand the role of Gradle in a Spring Boot project Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page.\nGradle automated build tool projects tasks plugins dependencies repositories Debugging in IntelliJ breakpoint Debug mode Debugger Pane Add/Watch conditional breakpoint Step-over Step-into Step-out-of Variables Pane Frames Pane Chapter Content Reading Studio: If It Ain't Broke, Add a Breakpoint!",
    "tags": [],
    "title": "Chapter 12: Tools in Intellij",
    "uri": "/tools-in-intellij/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives By the end of this chapter you should understand:\nThe benefits of using templates How to create a new template using thymeleaf in a Spring Application. How to add iteration, conditionals, and forms to a template How to link a template to static resources like CSS stylesheets, and scripts. How to render a template using Spring controllers. Key Terminology fragments cdn, content delivery network template Thymeleaf bootstrap Content Links Reading Exercises: Thymeleaf Views Studio: Spa Day! ",
    "description": "Learning Objectives By the end of this chapter you should understand:\nThe benefits of using templates How to create a new template using thymeleaf in a Spring Application. How to add iteration, conditionals, and forms to a template How to link a template to static resources like CSS stylesheets, and scripts. How to render a template using Spring controllers. Key Terminology fragments cdn, content delivery network template Thymeleaf bootstrap Content Links Reading Exercises: Thymeleaf Views Studio: Spa Day!",
    "tags": [],
    "title": "Chapter 13: Thymeleaf Views",
    "uri": "/thymeleaf-views/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives After completing everything in this chapter, you should be able to do the following:\nUnderstand the role of models in MVC applications Use model binding to efficiently create objects during form processing Key Terminology On each page of the reading, make note of the following key terms and their definitions.\nModels in MVC model business logic Creating a Model Class POJO Models and Data uid unique identifier data layer Model-Binding model-binding @ModelAttribute Content Links Reading Exercises: Edit Model Classes Studio: Spa User Signup ",
    "description": "Learning Objectives After completing everything in this chapter, you should be able to do the following:\nUnderstand the role of models in MVC applications Use model binding to efficiently create objects during form processing Key Terminology On each page of the reading, make note of the following key terms and their definitions.\nModels in MVC model business logic Creating a Model Class POJO Models and Data uid unique identifier data layer Model-Binding model-binding @ModelAttribute Content Links Reading Exercises: Edit Model Classes Studio: Spa User Signup ",
    "tags": [],
    "title": "Chapter 14: Models and Model Binding",
    "uri": "/models-and-model-binding/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nValidate form submission data using annotations and model binding Key Terminology Here is a list of key terms for this chapter listed by the page the terms first appear on.\nServer-Side Validation client-side validation server-side validation Thymeleaf Form Tools no-arg constructor Chapter Content Reading Exercises: Model Validation Studio: Spa User Validation Next Steps ",
    "description": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nValidate form submission data using annotations and model binding Key Terminology Here is a list of key terms for this chapter listed by the page the terms first appear on.\nServer-Side Validation client-side validation server-side validation Thymeleaf Form Tools no-arg constructor Chapter Content Reading Exercises: Model Validation Studio: Spa User Validation Next Steps ",
    "tags": [],
    "title": "Chapter 15: Model Validation",
    "uri": "/spring-model-validation/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Once you have completed everything in the chapter, you should be able to do the following:\nUse enum types to represent categories of related objects Key Terminology Here is a list of key terms that you should make note of as you read through this chapter.\nenumeration types enums select log level Content Links Reading Exercises: Enum Practice Next Steps ",
    "description": "Learning Objectives Once you have completed everything in the chapter, you should be able to do the following:\nUse enum types to represent categories of related objects Key Terminology Here is a list of key terms that you should make note of as you read through this chapter.\nenumeration types enums select log level Content Links Reading Exercises: Enum Practice Next Steps ",
    "tags": [],
    "title": "Chapter 16: Enums",
    "uri": "/enums/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Understand how object-relational mapping allows object-oriented web applications to store data in relational databases Implement ORM for individual, non-related entities in Spring Boot Explain what object-relational mapping means Describe what a data layer is, and how it is used in ORM Key Terminology Here is a list of key terms that you should make note of as you read through this chapter.\nObject-Relational Mapping Object-Relation Mapping ORM Java Persistence API JPA Data Layer object-relational mapper Environment Variables Hibernate Accessing Data CrudRepository @Repository @Entity @Id @GeneratedValue persistent class entity class Repositories @Autowired Content Links Reading Exercises: OMG the ORM! Studio: Creating an AbstractEntity ",
    "description": "Learning Objectives Understand how object-relational mapping allows object-oriented web applications to store data in relational databases Implement ORM for individual, non-related entities in Spring Boot Explain what object-relational mapping means Describe what a data layer is, and how it is used in ORM Key Terminology Here is a list of key terms that you should make note of as you read through this chapter.\nObject-Relational Mapping Object-Relation Mapping ORM Java Persistence API JPA Data Layer object-relational mapper Environment Variables Hibernate Accessing Data CrudRepository @Repository @Entity @Id @GeneratedValue persistent class entity class Repositories @Autowired Content Links Reading Exercises: OMG the ORM!",
    "tags": [],
    "title": "Chapter 17: Introduction to Object-Relational Mapping",
    "uri": "/intro-orm-mapping/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives Upon completing the content in this chapter, you should be able to do the following:\nBuild persistent model classes that have one-to-many, many-to-one, one-to-one, and many-to-many relationships Understand how these relationships are represented in a relational database Key Terminology As you read though this chapter, make note of the following key terms and their definitions.\nTypes of Relationships one-to-one relationship one-to-many relationship many-to-one relationship many-to-many relationship Creating a Many-to-One Relationship truncate Creating a One-to-One Relationship transient cascades Creating a Many-to-Many Relationship data transfer object DTO join table Chapter Content Reading Exercises: The Early Bird Gets the ORM! Next Steps ",
    "description": "Learning Objectives Upon completing the content in this chapter, you should be able to do the following:\nBuild persistent model classes that have one-to-many, many-to-one, one-to-one, and many-to-many relationships Understand how these relationships are represented in a relational database Key Terminology As you read though this chapter, make note of the following key terms and their definitions.\nTypes of Relationships one-to-one relationship one-to-many relationship many-to-one relationship many-to-many relationship Creating a Many-to-One Relationship truncate Creating a One-to-One Relationship transient cascades Creating a Many-to-Many Relationship data transfer object DTO join table Chapter Content Reading Exercises: The Early Bird Gets the ORM!",
    "tags": [],
    "title": "Chapter 18: Relationships in Object-Relational Mapping",
    "uri": "/orm-relationships/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nUnderstand the basic concepts of authentication Use request filters to enable basic authentication in a Spring app Explain what two-way encryption is, and why it is not ideal for storing sensitive user data, such as passwords Explain what a one-way hash is, and why it presents greater security for storing sensitive user data Describe the characteristics of a good one-way hash function Write code that uses a provided hash function to hash sensitive data Describe how one-way hashes allow for passwords to be compared Describe the general authentication flow for a web app Key Terminology Introduction to Authentication cookies authorization authentication sessions Hashing Password two-way encryption one-way encryption password hashing collision bcrypt MD5, SHA1 hash function Creating a User Model bcrypt query methods Filtering Requests request filters whitelist code-based configuration Content Links Reading Studio: TechJobs Authentication Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nUnderstand the basic concepts of authentication Use request filters to enable basic authentication in a Spring app Explain what two-way encryption is, and why it is not ideal for storing sensitive user data, such as passwords Explain what a one-way hash is, and why it presents greater security for storing sensitive user data Describe the characteristics of a good one-way hash function Write code that uses a provided hash function to hash sensitive data Describe how one-way hashes allow for passwords to be compared Describe the general authentication flow for a web app Key Terminology Introduction to Authentication cookies authorization authentication sessions Hashing Password two-way encryption one-way encryption password hashing collision bcrypt MD5, SHA1 hash function Creating a User Model bcrypt query methods Filtering Requests request filters whitelist code-based configuration Content Links Reading Studio: TechJobs Authentication Next Steps ",
    "tags": [],
    "title": "Chapter 19: Authentication",
    "uri": "/authentication/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nSubmit HTTP requests using Postman to an API and receive the expected response GET POST DELETE Submit a bad HTTP reuqest, understand the response and how to fix it You should also have an understanding of the following:\nHTTP methods Endpoints Status Codes Headers API design Key Terminology Web APIs API Web API Server-side rendering Client-side rendering data presentation data representation state What is REST REST RESTful web services Representational state transfer JSON serialization JASON deserialization resource resource entity resource collection REST: Practical Fundamentals Shape Endpoint Content Links Reading Exercises: Web APIs and REST Studio: Consuming the Coding Events API With Postman Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nSubmit HTTP requests using Postman to an API and receive the expected response GET POST DELETE Submit a bad HTTP reuqest, understand the response and how to fix it You should also have an understanding of the following:\nHTTP methods Endpoints Status Codes Headers API design Key Terminology Web APIs API Web API Server-side rendering Client-side rendering data presentation data representation state What is REST REST RESTful web services Representational state transfer JSON serialization JASON deserialization resource resource entity resource collection REST: Practical Fundamentals Shape Endpoint Content Links Reading Exercises: Web APIs and REST Studio: Consuming the Coding Events API With Postman Next Steps ",
    "tags": [],
    "title": "Chapter 20: Introduction to Web APIs \u0026 REST",
    "uri": "/web-api-rest/index.html"
  },
  {
    "breadcrumb": "Java Web Development \u003e Appendices",
    "content": "When exploring and testing a web API, it is invaluable to have an interactive environment that allows you to fine-tune requests. For example, you may need to configure the HTTP method, headers, or body of the request – all of which the browser does not allow you to do. Instead of testing in a browser, we can use tools made specifically for interacting with APIs. One of the most popular API tools in the industry is Postman. Postman is a cross-platform tool that puts you in full control of configuring and executing API requests.\nInstalling Postman is easy thanks to its cross-platform nature. You can download the installer on their downloads page .\nMac Users Select the version that matches the type of chip your Mac has. If you are unsure if you have an Intel chip or the Apple chip, click on the apple in the upper left corner of your screen. Select About This Mac. Under Processor on the Overview tab, you will see the chip manufaturer. After installation, you can open the app. Postman will first prompt you to make an account, but if you are uncomfortable doing so, at the bottom of the screen is the option to sign up for an account later. The main view of Postman is the launchpad view.\nYou are ready to go!\nWindows Users Select the Windows x64 installer download then run the installer: Windows user should select the Windows 64-bit download option\nAfter installation, if Postman does not open automatically, locate the download and open it manually. Making an account can be useful, but if you do not want to create one, select the link in grey at the bottom of the splash screen that reads: “Skip signing in and take me straight to the to the app”: Note Windows Users: Once installed, you can right-click the Postman icon and pin it to your taskbar for easy access in the future:\nPinning the Postman application to your Windows taskbar could make your life easier\nYou can leave the launchpad view open for now. We will explore Postman after setting up our API server. Now that Postman is installed, there are a lot of features of the software to explore",
    "description": "When exploring and testing a web API, it is invaluable to have an interactive environment that allows you to fine-tune requests. For example, you may need to configure the HTTP method, headers, or body of the request – all of which the browser does not allow you to do. Instead of testing in a browser, we can use tools made specifically for interacting with APIs. One of the most popular API tools in the industry is Postman.",
    "tags": [],
    "title": "Installing Postman",
    "uri": "/appendices/install-postman/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Major Concepts \u0026 Key Terminology Content Links Assignment #0: Hello, World! Assignment #1: Tech Jobs Console Assignment #2: Tech Jobs OO Assignment #3: Tech Jobs (MVC Edition) Assignment #4: Tech Jobs Persistent Next Steps ",
    "description": "Major Concepts \u0026 Key Terminology Content Links Assignment #0: Hello, World! Assignment #1: Tech Jobs Console Assignment #2: Tech Jobs OO Assignment #3: Tech Jobs (MVC Edition) Assignment #4: Tech Jobs Persistent Next Steps ",
    "tags": [],
    "title": "Assignments",
    "uri": "/assignments/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "Content Links Installing Postman ",
    "description": "Content Links Installing Postman ",
    "tags": [],
    "title": "Appendices",
    "uri": "/appendices/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Java Web Development Course Summary This course is an introduction to Java and the Spring Boot framework. Java is a powerful programming language and one of the most widely used across the globe. This course is designed for learners who are already familiar with at least one programming language. Thus, we’ll move quickly through the syntax rules and procedural basics of the language (ie, how does one write a for loop in Java? a conditional statement?).\nAs you’ve likely heard before, once you grasp the fundamentals of programming in one language, learning another becomes much easier. Professional software developers often work in environments involving several programming languages so it’s wise to start learning new ones early on in your career.\nBeyond the basics of programming in Java, you’ll learn some key object oriented concepts to enhance the capabilities of your programs. You’ll also download a program called IntelliJ IDE to get familiar with the tools of the Java developer. In the final lessons of this course, you will use a Java framework called Spring Boot. This framework gives us the scaffolding necessary to create MVC programs, another concept we’ll cover, effectively and efficiently.\nWhere this Course Leads Upon completion of the content within this course you will be capable of building a web application with Spring MVC that can store data in a local database. You will also be ready to start reviewing the Liftoff materials, which focus on career-readiness and building a personal project.\nWhile you are entering a new career in technology, we hope you use the tools you learned in this program to learn new skills. You may find yourself wanting to learn more about the cloud, advanced testing tools, or building bigger and better APIs. Whatever it is, now that you have conquered the foundations of computer programming, we know you are ready for the challenge!\nChapters Chapter 1: Introduction and Setup Chapter 2: Data Types Chapter 3: Control Flow and Collections Chapter 4: Classes Chapter 5: Classes Part 2 Chapter 6: Unit Testing Chapter 7: Inheritance Chapter 8: Interfaces and Polymorphism Chapter 9: Spring Into MVC Chapter 10: Controllers and Routing Chapter 11: Rules to the Exceptions Chapter 12: Tools in Intellij Chapter 13: Thymeleaf Views Chapter 14: Models and Model Binding Chapter 15: Model Validation Chapter 16: Enums Chapter 17: Introduction to Object-Relational Mapping Chapter 18: Relationships in Object-Relational Mapping Chapter 19: Authentication Chapter 20: Introduction to Web APIs \u0026 REST Assignments Appendices Pre-Course Requirements You should already have completed Unit 1 of our Web Development program, Introduction to Professional Web Development in JavaScript.\nThe first steps you will take in programming in Java is setting up your programming environment.",
    "description": "Java Web Development Course Summary This course is an introduction to Java and the Spring Boot framework. Java is a powerful programming language and one of the most widely used across the globe. This course is designed for learners who are already familiar with at least one programming language. Thus, we’ll move quickly through the syntax rules and procedural basics of the language (ie, how does one write a for loop in Java?",
    "tags": [],
    "title": "Java Web Development",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Java Web Development",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
