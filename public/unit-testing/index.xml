<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter 6: Unit Testing :: Java Web Development</title>
    <link>http://localhost:1313/unit-testing/index.html</link>
    <description>Major Concepts Upon completing all the content in this chapter, you should be able to do the following:&#xA;Write unit tests to verify the behavior of methods Identify proper behaviors for which a test should be written Understand the importance of testing in creating well-functioning code Use test-driven development to define the behavior of code before writing it, and to ensure that code is properly tested Use JUnit to create tests Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Nov 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading</title>
      <link>http://localhost:1313/unit-testing/reading/index.html</link>
      <pubDate>Wed, 28 Jun 2023 13:58:37 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/reading/index.html</guid>
      <description> Testing in Java JUnit </description>
    </item>
    <item>
      <title>Exercises: Unit Testing</title>
      <link>http://localhost:1313/unit-testing/exercises/index.html</link>
      <pubDate>Wed, 28 Jun 2023 13:58:37 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/exercises/index.html</guid>
      <description>Work on these exercises in the IntelliJ car-exercises project in java-web-dev-projects/unit-testing/exercises. You will update your CarTest.java file by adding more test cases.&#xA;testGasTankAfterDriving() Add a test for the third TODO, “gasTankLevel is accurate after driving within tank range”.&#xA;Your test must use the Car method drive()&#xA;test_car.drive(50); With a value of 50 miles passed into drive(), we expect test_car to have a gasTankLevel of 9.&#xA;assertEquals(9, test_car.getGasTankLevel(), .001); Check your solution @Test public void testGasTankAfterDriving() { test_car.</description>
    </item>
    <item>
      <title>Studio: Unit Testing</title>
      <link>http://localhost:1313/unit-testing/studio/index.html</link>
      <pubDate>Wed, 28 Jun 2023 13:58:37 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/studio/index.html</guid>
      <description>For this studio, you will be writing unit tests to help you find errors in provided code.&#xA;Getting Started Locate the balanced-brackets project in java-web-dev-projects/unit-testing/studio directory.&#xA;Open the balanced-brackets project in IntelliJ.&#xA;Write unit tests to find the errors in BalancedBrackets.&#xA;The tests you write should guide how you revise the source code. Use TDD to first write tests that will work for the desired behavior of BalancedBrackets. When your tests fail, correct the class to pass your tests.</description>
    </item>
    <item>
      <title>Next Steps</title>
      <link>http://localhost:1313/unit-testing/next-steps/index.html</link>
      <pubDate>Wed, 28 Jun 2023 13:58:37 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/next-steps/index.html</guid>
      <description>Before continuing on to the next chapter, here are some additional resources on unit testing.&#xA;JUnit 5 Test LifeCycle JUnit Documentation Intellij notes on JUnit </description>
    </item>
  </channel>
</rss>